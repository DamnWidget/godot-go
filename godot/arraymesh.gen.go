package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// ArrayMeshArrayFormat is an enum for ArrayFormat values.
type ArrayMeshArrayFormat int

const (
	ArrayMeshArrayFormatBones   ArrayMeshArrayFormat = 64
	ArrayMeshArrayFormatColor   ArrayMeshArrayFormat = 8
	ArrayMeshArrayFormatIndex   ArrayMeshArrayFormat = 256
	ArrayMeshArrayFormatNormal  ArrayMeshArrayFormat = 2
	ArrayMeshArrayFormatTangent ArrayMeshArrayFormat = 4
	ArrayMeshArrayFormatTexUv   ArrayMeshArrayFormat = 16
	ArrayMeshArrayFormatTexUv2  ArrayMeshArrayFormat = 32
	ArrayMeshArrayFormatVertex  ArrayMeshArrayFormat = 1
	ArrayMeshArrayFormatWeights ArrayMeshArrayFormat = 128
)

// ArrayMeshArrayType is an enum for ArrayType values.
type ArrayMeshArrayType int

const (
	ArrayMeshArrayBones   ArrayMeshArrayType = 6
	ArrayMeshArrayColor   ArrayMeshArrayType = 3
	ArrayMeshArrayIndex   ArrayMeshArrayType = 8
	ArrayMeshArrayMax     ArrayMeshArrayType = 9
	ArrayMeshArrayNormal  ArrayMeshArrayType = 1
	ArrayMeshArrayTangent ArrayMeshArrayType = 2
	ArrayMeshArrayTexUv   ArrayMeshArrayType = 4
	ArrayMeshArrayTexUv2  ArrayMeshArrayType = 5
	ArrayMeshArrayVertex  ArrayMeshArrayType = 0
	ArrayMeshArrayWeights ArrayMeshArrayType = 7
)

//func NewArrayMeshFromPointer(ptr gdnative.Pointer) ArrayMesh {
func newArrayMeshFromPointer(ptr gdnative.Pointer) ArrayMesh {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ArrayMesh{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type ArrayMesh struct {
	Mesh
	owner gdnative.Object
}

func (o *ArrayMesh) BaseClass() string {
	return "ArrayMesh"
}

/*

	Args: [{ false name String}], Returns: void
*/
func (o *ArrayMesh) AddBlendShape(name gdnative.String) {
	//log.Println("Calling ArrayMesh.AddBlendShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "add_blend_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Create a new surface ([method get_surface_count] that will become surf_idx for this. Surfaces are created to be rendered using a "primitive", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. (As a note, when using indices, it is recommended to only use just points, lines or triangles).
	Args: [{ false primitive int} { false arrays Array} {[] true blend_shapes Array} {97792 true compress_flags int}], Returns: void
*/
func (o *ArrayMesh) AddSurfaceFromArrays(primitive gdnative.Int, arrays gdnative.Array, blendShapes gdnative.Array, compressFlags gdnative.Int) {
	//log.Println("Calling ArrayMesh.AddSurfaceFromArrays()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromInt(primitive)
	ptrArguments[1] = gdnative.NewPointerFromArray(arrays)
	ptrArguments[2] = gdnative.NewPointerFromArray(blendShapes)
	ptrArguments[3] = gdnative.NewPointerFromInt(compressFlags)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "add_surface_from_arrays")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *ArrayMesh) CenterGeometry() {
	//log.Println("Calling ArrayMesh.CenterGeometry()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "center_geometry")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *ArrayMesh) ClearBlendShapes() {
	//log.Println("Calling ArrayMesh.ClearBlendShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "clear_blend_shapes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: int
*/
func (o *ArrayMesh) GetBlendShapeCount() gdnative.Int {
	//log.Println("Calling ArrayMesh.GetBlendShapeCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "get_blend_shape_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.Mesh::BlendShapeMode
*/
func (o *ArrayMesh) GetBlendShapeMode() MeshBlendShapeMode {
	//log.Println("Calling ArrayMesh.GetBlendShapeMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "get_blend_shape_mode")

	// Call the parent method.
	// enum.Mesh::BlendShapeMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return MeshBlendShapeMode(ret)
}

/*

	Args: [{ false index int}], Returns: String
*/
func (o *ArrayMesh) GetBlendShapeName(index gdnative.Int) gdnative.String {
	//log.Println("Calling ArrayMesh.GetBlendShapeName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "get_blend_shape_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: AABB
*/
func (o *ArrayMesh) GetCustomAabb() gdnative.Aabb {
	//log.Println("Calling ArrayMesh.GetCustomAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "get_custom_aabb")

	// Call the parent method.
	// AABB
	retPtr := gdnative.NewEmptyAabb()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewAabbFromPointer(retPtr)
	return ret
}

/*
        Return the amount of surfaces that the [code]ArrayMesh[/code] holds.
	Args: [], Returns: int
*/
func (o *ArrayMesh) GetSurfaceCount() gdnative.Int {
	//log.Println("Calling ArrayMesh.GetSurfaceCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "get_surface_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false arg0 Transform} { false arg1 float}], Returns: enum.Error
*/
func (o *ArrayMesh) LightmapUnwrap(arg0 gdnative.Transform, arg1 gdnative.Float) gdnative.Error {
	//log.Println("Calling ArrayMesh.LightmapUnwrap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromTransform(arg0)
	ptrArguments[1] = gdnative.NewPointerFromFloat(arg1)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "lightmap_unwrap")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*

	Args: [], Returns: void
*/
func (o *ArrayMesh) RegenNormalmaps() {
	//log.Println("Calling ArrayMesh.RegenNormalmaps()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "regen_normalmaps")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *ArrayMesh) SetBlendShapeMode(mode gdnative.Int) {
	//log.Println("Calling ArrayMesh.SetBlendShapeMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "set_blend_shape_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false aabb AABB}], Returns: void
*/
func (o *ArrayMesh) SetCustomAabb(aabb gdnative.Aabb) {
	//log.Println("Calling ArrayMesh.SetCustomAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromAabb(aabb)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "set_custom_aabb")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Return the length in indices of the index array in the requested surface (see [method add_surface]).
	Args: [{ false surf_idx int}], Returns: int
*/
func (o *ArrayMesh) SurfaceGetArrayIndexLen(surfIdx gdnative.Int) gdnative.Int {
	//log.Println("Calling ArrayMesh.SurfaceGetArrayIndexLen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_get_array_index_len")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return the length in vertices of the vertex array in the requested surface (see [method add_surface]).
	Args: [{ false surf_idx int}], Returns: int
*/
func (o *ArrayMesh) SurfaceGetArrayLen(surfIdx gdnative.Int) gdnative.Int {
	//log.Println("Calling ArrayMesh.SurfaceGetArrayLen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_get_array_len")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false surf_idx int}], Returns: Array
*/
func (o *ArrayMesh) SurfaceGetArrays(surfIdx gdnative.Int) gdnative.Array {
	//log.Println("Calling ArrayMesh.SurfaceGetArrays()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_get_arrays")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false surf_idx int}], Returns: Array
*/
func (o *ArrayMesh) SurfaceGetBlendShapeArrays(surfIdx gdnative.Int) gdnative.Array {
	//log.Println("Calling ArrayMesh.SurfaceGetBlendShapeArrays()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_get_blend_shape_arrays")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Return the format mask of the requested surface (see [method add_surface]).
	Args: [{ false surf_idx int}], Returns: int
*/
func (o *ArrayMesh) SurfaceGetFormat(surfIdx gdnative.Int) gdnative.Int {
	//log.Println("Calling ArrayMesh.SurfaceGetFormat()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_get_format")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return a [Material] in a given surface. Surface is rendered using this material.
	Args: [{ false surf_idx int}], Returns: Material
*/
func (o *ArrayMesh) SurfaceGetMaterial(surfIdx gdnative.Int) MaterialImplementer {
	//log.Println("Calling ArrayMesh.SurfaceGetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_get_material")

	// Call the parent method.
	// Material
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMaterialFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MaterialImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Material" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MaterialImplementer)
	}

	return &ret
}

/*

	Args: [{ false surf_idx int}], Returns: String
*/
func (o *ArrayMesh) SurfaceGetName(surfIdx gdnative.Int) gdnative.String {
	//log.Println("Calling ArrayMesh.SurfaceGetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_get_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Return the primitive type of the requested surface (see [method add_surface]).
	Args: [{ false surf_idx int}], Returns: enum.Mesh::PrimitiveType
*/
func (o *ArrayMesh) SurfaceGetPrimitiveType(surfIdx gdnative.Int) MeshPrimitiveType {
	//log.Println("Calling ArrayMesh.SurfaceGetPrimitiveType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_get_primitive_type")

	// Call the parent method.
	// enum.Mesh::PrimitiveType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return MeshPrimitiveType(ret)
}

/*
        Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.
	Args: [{ false surf_idx int}], Returns: void
*/
func (o *ArrayMesh) SurfaceRemove(surfIdx gdnative.Int) {
	//log.Println("Calling ArrayMesh.SurfaceRemove()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_remove")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false surf_idx int} { false material Material}], Returns: void
*/
func (o *ArrayMesh) SurfaceSetMaterial(surfIdx gdnative.Int, material Material) {
	//log.Println("Calling ArrayMesh.SurfaceSetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)
	ptrArguments[1] = gdnative.NewPointerFromObject(material.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_set_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Set a [Material] for a given surface. Surface will be rendered using this material.
	Args: [{ false surf_idx int} { false name String}], Returns: void
*/
func (o *ArrayMesh) SurfaceSetName(surfIdx gdnative.Int, name gdnative.String) {
	//log.Println("Calling ArrayMesh.SurfaceSetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)
	ptrArguments[1] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_set_name")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false surf_idx int} { false offset int} { false data PoolByteArray}], Returns: void
*/
func (o *ArrayMesh) SurfaceUpdateRegion(surfIdx gdnative.Int, offset gdnative.Int, data gdnative.PoolByteArray) {
	//log.Println("Calling ArrayMesh.SurfaceUpdateRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(surfIdx)
	ptrArguments[1] = gdnative.NewPointerFromInt(offset)
	ptrArguments[2] = gdnative.NewPointerFromPoolByteArray(data)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ArrayMesh", "surface_update_region")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ArrayMeshImplementer is an interface that implements the methods
// of the ArrayMesh class.
type ArrayMeshImplementer interface {
	MeshImplementer
	AddBlendShape(name gdnative.String)
	AddSurfaceFromArrays(primitive gdnative.Int, arrays gdnative.Array, blendShapes gdnative.Array, compressFlags gdnative.Int)
	CenterGeometry()
	ClearBlendShapes()
	GetBlendShapeCount() gdnative.Int
	GetBlendShapeName(index gdnative.Int) gdnative.String
	GetCustomAabb() gdnative.Aabb
	GetSurfaceCount() gdnative.Int
	RegenNormalmaps()
	SetBlendShapeMode(mode gdnative.Int)
	SetCustomAabb(aabb gdnative.Aabb)
	SurfaceGetArrayIndexLen(surfIdx gdnative.Int) gdnative.Int
	SurfaceGetArrayLen(surfIdx gdnative.Int) gdnative.Int
	SurfaceGetArrays(surfIdx gdnative.Int) gdnative.Array
	SurfaceGetBlendShapeArrays(surfIdx gdnative.Int) gdnative.Array
	SurfaceGetFormat(surfIdx gdnative.Int) gdnative.Int
	SurfaceGetMaterial(surfIdx gdnative.Int) MaterialImplementer
	SurfaceGetName(surfIdx gdnative.Int) gdnative.String
	SurfaceRemove(surfIdx gdnative.Int)
	SurfaceSetMaterial(surfIdx gdnative.Int, material Material)
	SurfaceSetName(surfIdx gdnative.Int, name gdnative.String)
	SurfaceUpdateRegion(surfIdx gdnative.Int, offset gdnative.Int, data gdnative.PoolByteArray)
}
