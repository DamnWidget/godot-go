package class

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewSceneStateFromPointer(ptr gdnative.Pointer) SceneState {
func NewSceneStateFromPointer(ptr gdnative.Pointer) SceneState {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := SceneState{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Maintains a list of resources, nodes, exported and overridden properties, and built-in scripts associated with a scene.
*/
type SceneState struct {
	Reference
	owner gdnative.Object
}

func (o *SceneState) BaseClass() string {
	return "SceneState"
}

/*
        Returns the list of bound parameters for the signal at [code]idx[/code].
	Args: [{ false idx int}], Returns: Array
*/
func (o *SceneState) GetConnectionBinds(idx gdnative.Int) gdnative.Array {
	//log.Println("Calling SceneState.GetConnectionBinds()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_connection_binds")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the number of signal connections in the scene.
	Args: [], Returns: int
*/
func (o *SceneState) GetConnectionCount() gdnative.Int {
	//log.Println("Calling SceneState.GetConnectionCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_connection_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the flags for the signal at [code]idx[/code]. See [Object]'s [code]CONNECT_*[/code] flags.
	Args: [{ false idx int}], Returns: int
*/
func (o *SceneState) GetConnectionFlags(idx gdnative.Int) gdnative.Int {
	//log.Println("Calling SceneState.GetConnectionFlags()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_connection_flags")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the method connected to the signal at [code]idx[/code].
	Args: [{ false idx int}], Returns: String
*/
func (o *SceneState) GetConnectionMethod(idx gdnative.Int) gdnative.String {
	//log.Println("Calling SceneState.GetConnectionMethod()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_connection_method")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the name of the signal at [code]idx[/code].
	Args: [{ false idx int}], Returns: String
*/
func (o *SceneState) GetConnectionSignal(idx gdnative.Int) gdnative.String {
	//log.Println("Calling SceneState.GetConnectionSignal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_connection_signal")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the path to the node that owns the signal at [code]idx[/code], relative to the root node.
	Args: [{ false idx int}], Returns: NodePath
*/
func (o *SceneState) GetConnectionSource(idx gdnative.Int) gdnative.NodePath {
	//log.Println("Calling SceneState.GetConnectionSource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_connection_source")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the path to the node that owns the method connected to the signal at [code]idx[/code], relative to the root node.
	Args: [{ false idx int}], Returns: NodePath
*/
func (o *SceneState) GetConnectionTarget(idx gdnative.Int) gdnative.NodePath {
	//log.Println("Calling SceneState.GetConnectionTarget()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_connection_target")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the number of nodes in the scene.
	Args: [], Returns: int
*/
func (o *SceneState) GetNodeCount() gdnative.Int {
	//log.Println("Calling SceneState.GetNodeCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the list of group names associated with the node at [code]idx[/code].
	Args: [{ false idx int}], Returns: PoolStringArray
*/
func (o *SceneState) GetNodeGroups(idx gdnative.Int) gdnative.PoolStringArray {
	//log.Println("Calling SceneState.GetNodeGroups()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_groups")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [{ false idx int}], Returns: int
*/
func (o *SceneState) GetNodeIndex(idx gdnative.Int) gdnative.Int {
	//log.Println("Calling SceneState.GetNodeIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_index")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the scene for the node at [code]idx[/code] or [code]null[/code] if the node is not an instance.
	Args: [{ false idx int}], Returns: PackedScene
*/
func (o *SceneState) GetNodeInstance(idx gdnative.Int) PackedScene {
	//log.Println("Calling SceneState.GetNodeInstance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_instance")

	// Call the parent method.
	// PackedScene
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewPackedSceneFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the path to the represented scene file if the node at [code]idx[/code] is an [InstancePlaceholder].
	Args: [{ false idx int}], Returns: String
*/
func (o *SceneState) GetNodeInstancePlaceholder(idx gdnative.Int) gdnative.String {
	//log.Println("Calling SceneState.GetNodeInstancePlaceholder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_instance_placeholder")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the name of the node at [code]idx[/code].
	Args: [{ false idx int}], Returns: String
*/
func (o *SceneState) GetNodeName(idx gdnative.Int) gdnative.String {
	//log.Println("Calling SceneState.GetNodeName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the path to the owner of the node at [code]idx[/code], relative to the root node.
	Args: [{ false idx int}], Returns: NodePath
*/
func (o *SceneState) GetNodeOwnerPath(idx gdnative.Int) gdnative.NodePath {
	//log.Println("Calling SceneState.GetNodeOwnerPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_owner_path")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the path to the node at [code]idx[/code].
	Args: [{ false idx int} {False true for_parent bool}], Returns: NodePath
*/
func (o *SceneState) GetNodePath(idx gdnative.Int, forParent gdnative.Bool) gdnative.NodePath {
	//log.Println("Calling SceneState.GetNodePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(forParent)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_path")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the number of exported or overridden properties for the node at [code]idx[/code].
	Args: [{ false idx int}], Returns: int
*/
func (o *SceneState) GetNodePropertyCount(idx gdnative.Int) gdnative.Int {
	//log.Println("Calling SceneState.GetNodePropertyCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_property_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the name of the property at [code]prop_idx[/code] for the node at [code]idx[/code].
	Args: [{ false idx int} { false prop_idx int}], Returns: String
*/
func (o *SceneState) GetNodePropertyName(idx gdnative.Int, propIdx gdnative.Int) gdnative.String {
	//log.Println("Calling SceneState.GetNodePropertyName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromInt(propIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_property_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the value of the property at [code]prop_idx[/code] for the node at [code]idx[/code].
	Args: [{ false idx int} { false prop_idx int}], Returns: Variant
*/
func (o *SceneState) GetNodePropertyValue(idx gdnative.Int, propIdx gdnative.Int) gdnative.Variant {
	//log.Println("Calling SceneState.GetNodePropertyValue()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromInt(propIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_property_value")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the type of the node at [code]idx[/code].
	Args: [{ false idx int}], Returns: String
*/
func (o *SceneState) GetNodeType(idx gdnative.Int) gdnative.String {
	//log.Println("Calling SceneState.GetNodeType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "get_node_type")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns [code]true[/code] if the node at [code]idx[/code] is an [InstancePlaceholder].
	Args: [{ false idx int}], Returns: bool
*/
func (o *SceneState) IsNodeInstancePlaceholder(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling SceneState.IsNodeInstancePlaceholder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SceneState", "is_node_instance_placeholder")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}
