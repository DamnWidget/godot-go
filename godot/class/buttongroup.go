package class

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewButtonGroupFromPointer(ptr gdnative.Pointer) ButtonGroup {
func NewButtonGroupFromPointer(ptr gdnative.Pointer) ButtonGroup {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ButtonGroup{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Group of [Button]. All direct and indirect children buttons become radios. Only one allows being pressed. [member BaseButton.toggle_mode] should be [code]true[/code].
*/
type ButtonGroup struct {
	Resource
	owner gdnative.Object
}

func (o *ButtonGroup) BaseClass() string {
	return "ButtonGroup"
}

// SetBaseObject will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *ButtonGroup) SetBaseObject(object gdnative.Object) {
	o.owner = object
}

func (o *ButtonGroup) GetBaseObject() gdnative.Object {
	return o.owner
}

/*
        Return the pressed button.
	Args: [], Returns: BaseButton
*/
func (o *ButtonGroup) GetPressedButton() BaseButton {
	log.Println("Calling ButtonGroup.GetPressedButton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ButtonGroup", "get_pressed_button")

	// Call the parent method.
	// BaseButton
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewBaseButtonFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}
