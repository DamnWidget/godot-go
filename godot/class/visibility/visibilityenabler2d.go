package visibility

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
The VisibilityEnabler2D will disable [RigidBody2D], [AnimationPlayer], and other nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler2D itself.
*/
type VisibilityEnabler2D struct {
	VisibilityNotifier2D
}

func (o *VisibilityEnabler2D) BaseClass() string {
	return "VisibilityEnabler2D"
}

/*
   Undocumented
*/
func (o *VisibilityEnabler2D) X_NodeRemoved(arg0 *Object) {
	log.Println("Calling VisibilityEnabler2D.X_NodeRemoved()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_node_removed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisibilityEnabler2D) IsEnablerEnabled(enabler gdnative.Int) gdnative.Bool {
	log.Println("Calling VisibilityEnabler2D.IsEnablerEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabler)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_enabler_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisibilityEnabler2D) SetEnabler(enabler gdnative.Int, enabled gdnative.Bool) {
	log.Println("Calling VisibilityEnabler2D.SetEnabler()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(enabler)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_enabler", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisibilityEnabler2DImplementer is an interface for VisibilityEnabler2D objects.
*/
type VisibilityEnabler2DImplementer interface {
	Class
}
