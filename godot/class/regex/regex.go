package regex

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Undocumented
*/
type RegEx struct {
	Reference
}

func (o *RegEx) BaseClass() string {
	return "RegEx"
}

/*
   Undocumented
*/
func (o *RegEx) Clear() {
	log.Println("Calling RegEx.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RegEx) Compile(pattern gdnative.String) gdnative.Int {
	log.Println("Calling RegEx.Compile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pattern)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "compile", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RegEx) GetGroupCount() gdnative.Int {
	log.Println("Calling RegEx.GetGroupCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_group_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RegEx) GetNames() *Array {
	log.Println("Calling RegEx.GetNames()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_names", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RegEx) GetPattern() gdnative.String {
	log.Println("Calling RegEx.GetPattern()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_pattern", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RegEx) IsValid() gdnative.Bool {
	log.Println("Calling RegEx.IsValid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_valid", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RegEx) Search(subject gdnative.String, offset gdnative.Int, end gdnative.Int) *RegExMatch {
	log.Println("Calling RegEx.Search()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(subject)
	goArguments[1] = reflect.ValueOf(offset)
	goArguments[2] = reflect.ValueOf(end)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "search", goArguments, "*RegExMatch")

	returnValue := goRet.Interface().(*RegExMatch)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RegEx) SearchAll(subject gdnative.String, offset gdnative.Int, end gdnative.Int) *Array {
	log.Println("Calling RegEx.SearchAll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(subject)
	goArguments[1] = reflect.ValueOf(offset)
	goArguments[2] = reflect.ValueOf(end)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "search_all", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RegEx) Sub(subject gdnative.String, replacement gdnative.String, all gdnative.Bool, offset gdnative.Int, end gdnative.Int) gdnative.String {
	log.Println("Calling RegEx.Sub()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(subject)
	goArguments[1] = reflect.ValueOf(replacement)
	goArguments[2] = reflect.ValueOf(all)
	goArguments[3] = reflect.ValueOf(offset)
	goArguments[4] = reflect.ValueOf(end)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "sub", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   RegExImplementer is an interface for RegEx objects.
*/
type RegExImplementer interface {
	Class
}
