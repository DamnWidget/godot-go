package colorpickerbutton

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"

	"github.com/shadowapex/godot-go/godot/class/button"
	"github.com/shadowapex/godot-go/godot/class/colorpicker"

	"github.com/shadowapex/godot-go/godot/class/popup"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewColorPickerButtonFromPointer(ptr gdnative.Pointer) *ColorPickerButton {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ColorPickerButton{}
	obj.SetOwner(owner)

	return &obj

}

/*
Encapsulates a [ColorPicker] making it accesible by pressing a button, pressing the button will toggle the [ColorPicker] visibility
*/
type ColorPickerButton struct {
	button.Button
}

func (o *ColorPickerButton) BaseClass() string {
	return "ColorPickerButton"
}

/*
        Undocumented
	Args: [{ false arg0 Color}], Returns: void
*/

func (o *ColorPickerButton) X_ColorChanged(arg0 gdnative.Color) {
	log.Println("Calling ColorPickerButton.X_ColorChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "_color_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: Color
*/

func (o *ColorPickerButton) GetPickColor() gdnative.Color {
	log.Println("Calling ColorPickerButton.GetPickColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "get_pick_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the [code]ColorPicker[/code] that this [code]ColorPickerButton[/code] toggles.
	Args: [], Returns: ColorPicker
*/

func (o *ColorPickerButton) GetPicker() colorpicker.ColorPicker {
	log.Println("Calling ColorPickerButton.GetPicker()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "get_picker")

	// Call the parent method.
	// ColorPicker
	retPtr := colorpicker.NewEmptyColorPicker()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := colorpicker.NewColorPickerFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the control's [PopupPanel] which allows you to connect to Popup Signals. This allows you to handle events when the ColorPicker is shown or hidden.
	Args: [], Returns: PopupPanel
*/

func (o *ColorPickerButton) GetPopup() popup.PopupPanel {
	log.Println("Calling ColorPickerButton.GetPopup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "get_popup")

	// Call the parent method.
	// PopupPanel
	retPtr := popup.NewEmptyPopupPanel()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := popup.NewPopupPanelFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/

func (o *ColorPickerButton) IsEditingAlpha() gdnative.Bool {
	log.Println("Calling ColorPickerButton.IsEditingAlpha()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "is_editing_alpha")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false show bool}], Returns: void
*/

func (o *ColorPickerButton) SetEditAlpha(show gdnative.Bool) {
	log.Println("Calling ColorPickerButton.SetEditAlpha()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(show)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "set_edit_alpha")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false color Color}], Returns: void
*/

func (o *ColorPickerButton) SetPickColor(color gdnative.Color) {
	log.Println("Calling ColorPickerButton.SetPickColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "set_pick_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
