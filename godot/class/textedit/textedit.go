package textedit

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.
*/
type TextEdit struct {
	Control
}

func (o *TextEdit) BaseClass() string {
	return "TextEdit"
}

/*
   Undocumented
*/
func (o *TextEdit) X_ClickSelectionHeld() {
	log.Println("Calling TextEdit.X_ClickSelectionHeld()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_click_selection_held", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_CursorChangedEmit() {
	log.Println("Calling TextEdit.X_CursorChangedEmit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_cursor_changed_emit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling TextEdit.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_PushCurrentOp() {
	log.Println("Calling TextEdit.X_PushCurrentOp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_push_current_op", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_ScrollMoved(arg0 gdnative.Float) {
	log.Println("Calling TextEdit.X_ScrollMoved()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_scroll_moved", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_TextChangedEmit() {
	log.Println("Calling TextEdit.X_TextChangedEmit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_text_changed_emit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_ToggleDrawCaret() {
	log.Println("Calling TextEdit.X_ToggleDrawCaret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_toggle_draw_caret", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) X_VScrollInput() {
	log.Println("Calling TextEdit.X_VScrollInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_v_scroll_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add color region (given the delimiters) and its colors.
*/
func (o *TextEdit) AddColorRegion(beginKey gdnative.String, endKey gdnative.String, color *Color, lineOnly gdnative.Bool) {
	log.Println("Calling TextEdit.AddColorRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(beginKey)
	goArguments[1] = reflect.ValueOf(endKey)
	goArguments[2] = reflect.ValueOf(color)
	goArguments[3] = reflect.ValueOf(lineOnly)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_color_region", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a keyword and its color.
*/
func (o *TextEdit) AddKeywordColor(keyword gdnative.String, color *Color) {
	log.Println("Calling TextEdit.AddKeywordColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(keyword)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_keyword_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) CanFold(line gdnative.Int) gdnative.Bool {
	log.Println("Calling TextEdit.CanFold()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "can_fold", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Clear all the syntax coloring information.
*/
func (o *TextEdit) ClearColors() {
	log.Println("Calling TextEdit.ClearColors()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_colors", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clear the undo history.
*/
func (o *TextEdit) ClearUndoHistory() {
	log.Println("Calling TextEdit.ClearUndoHistory()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_undo_history", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Copy the current selection.
*/
func (o *TextEdit) Copy() {
	log.Println("Calling TextEdit.Copy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "copy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) CursorGetBlinkEnabled() gdnative.Bool {
	log.Println("Calling TextEdit.CursorGetBlinkEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "cursor_get_blink_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) CursorGetBlinkSpeed() gdnative.Float {
	log.Println("Calling TextEdit.CursorGetBlinkSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "cursor_get_blink_speed", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the column the editing cursor is at.
*/
func (o *TextEdit) CursorGetColumn() gdnative.Int {
	log.Println("Calling TextEdit.CursorGetColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "cursor_get_column", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the line the editing cursor is at.
*/
func (o *TextEdit) CursorGetLine() gdnative.Int {
	log.Println("Calling TextEdit.CursorGetLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "cursor_get_line", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) CursorIsBlockMode() gdnative.Bool {
	log.Println("Calling TextEdit.CursorIsBlockMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "cursor_is_block_mode", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) CursorSetBlinkEnabled(enable gdnative.Bool) {
	log.Println("Calling TextEdit.CursorSetBlinkEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "cursor_set_blink_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) CursorSetBlinkSpeed(blinkSpeed gdnative.Float) {
	log.Println("Calling TextEdit.CursorSetBlinkSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(blinkSpeed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "cursor_set_blink_speed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) CursorSetBlockMode(enable gdnative.Bool) {
	log.Println("Calling TextEdit.CursorSetBlockMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "cursor_set_block_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) CursorSetColumn(column gdnative.Int, adjustViewport gdnative.Bool) {
	log.Println("Calling TextEdit.CursorSetColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(column)
	goArguments[1] = reflect.ValueOf(adjustViewport)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "cursor_set_column", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) CursorSetLine(line gdnative.Int, adjustViewport gdnative.Bool, canBeHidden gdnative.Bool) {
	log.Println("Calling TextEdit.CursorSetLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(line)
	goArguments[1] = reflect.ValueOf(adjustViewport)
	goArguments[2] = reflect.ValueOf(canBeHidden)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "cursor_set_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Cut the current selection.
*/
func (o *TextEdit) Cut() {
	log.Println("Calling TextEdit.Cut()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "cut", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears the current selection.
*/
func (o *TextEdit) Deselect() {
	log.Println("Calling TextEdit.Deselect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "deselect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) FoldAllLines() {
	log.Println("Calling TextEdit.FoldAllLines()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "fold_all_lines", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) FoldLine(line gdnative.Int) {
	log.Println("Calling TextEdit.FoldLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "fold_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the text of a specific line.
*/
func (o *TextEdit) GetLine(line gdnative.Int) gdnative.String {
	log.Println("Calling TextEdit.GetLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_line", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of total lines in the text.
*/
func (o *TextEdit) GetLineCount() gdnative.Int {
	log.Println("Calling TextEdit.GetLineCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_line_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) GetMenu() *PopupMenu {
	log.Println("Calling TextEdit.GetMenu()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_menu", goArguments, "*PopupMenu")

	returnValue := goRet.Interface().(*PopupMenu)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the selection begin column.
*/
func (o *TextEdit) GetSelectionFromColumn() gdnative.Int {
	log.Println("Calling TextEdit.GetSelectionFromColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_selection_from_column", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the selection begin line.
*/
func (o *TextEdit) GetSelectionFromLine() gdnative.Int {
	log.Println("Calling TextEdit.GetSelectionFromLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_selection_from_line", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the text inside the selection.
*/
func (o *TextEdit) GetSelectionText() gdnative.String {
	log.Println("Calling TextEdit.GetSelectionText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_selection_text", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the selection end column.
*/
func (o *TextEdit) GetSelectionToColumn() gdnative.Int {
	log.Println("Calling TextEdit.GetSelectionToColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_selection_to_column", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the selection end line.
*/
func (o *TextEdit) GetSelectionToLine() gdnative.Int {
	log.Println("Calling TextEdit.GetSelectionToLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_selection_to_line", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) GetText() gdnative.String {
	log.Println("Calling TextEdit.GetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_text", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) GetVScrollSpeed() gdnative.Float {
	log.Println("Calling TextEdit.GetVScrollSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_v_scroll_speed", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) GetWordUnderCursor() gdnative.String {
	log.Println("Calling TextEdit.GetWordUnderCursor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_word_under_cursor", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Insert a given text at the cursor position.
*/
func (o *TextEdit) InsertTextAtCursor(text gdnative.String) {
	log.Println("Calling TextEdit.InsertTextAtCursor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "insert_text_at_cursor", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) IsContextMenuEnabled() gdnative.Bool {
	log.Println("Calling TextEdit.IsContextMenuEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_context_menu_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) IsFolded(line gdnative.Int) gdnative.Bool {
	log.Println("Calling TextEdit.IsFolded()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_folded", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsHidingEnabled() gdnative.Int {
	log.Println("Calling TextEdit.IsHidingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_hiding_enabled", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsHighlightAllOccurrencesEnabled() gdnative.Bool {
	log.Println("Calling TextEdit.IsHighlightAllOccurrencesEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_highlight_all_occurrences_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsHighlightCurrentLineEnabled() gdnative.Bool {
	log.Println("Calling TextEdit.IsHighlightCurrentLineEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_highlight_current_line_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) IsLineHidden(line gdnative.Int) gdnative.Bool {
	log.Println("Calling TextEdit.IsLineHidden()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_line_hidden", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsOverridingSelectedFontColor() gdnative.Bool {
	log.Println("Calling TextEdit.IsOverridingSelectedFontColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_overriding_selected_font_color", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsReadonly() gdnative.Bool {
	log.Println("Calling TextEdit.IsReadonly()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_readonly", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsRightClickMovingCaret() gdnative.Bool {
	log.Println("Calling TextEdit.IsRightClickMovingCaret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_right_click_moving_caret", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the selection is active.
*/
func (o *TextEdit) IsSelectionActive() gdnative.Bool {
	log.Println("Calling TextEdit.IsSelectionActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_selection_active", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsShowLineNumbersEnabled() gdnative.Bool {
	log.Println("Calling TextEdit.IsShowLineNumbersEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_show_line_numbers_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsSmoothScrollEnabled() gdnative.Bool {
	log.Println("Calling TextEdit.IsSmoothScrollEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_smooth_scroll_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsSyntaxColoringEnabled() gdnative.Bool {
	log.Println("Calling TextEdit.IsSyntaxColoringEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_syntax_coloring_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TextEdit) IsWrapping() gdnative.Bool {
	log.Println("Calling TextEdit.IsWrapping()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_wrapping", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TextEdit) MenuOption(option gdnative.Int) {
	log.Println("Calling TextEdit.MenuOption()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(option)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "menu_option", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Paste the current selection.
*/
func (o *TextEdit) Paste() {
	log.Println("Calling TextEdit.Paste()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "paste", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Perform redo operation.
*/
func (o *TextEdit) Redo() {
	log.Println("Calling TextEdit.Redo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "redo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.
*/
func (o *TextEdit) Search(key gdnative.String, flags gdnative.Int, fromLine gdnative.Int, fromColumn gdnative.Int) *PoolIntArray {
	log.Println("Calling TextEdit.Search()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(key)
	goArguments[1] = reflect.ValueOf(flags)
	goArguments[2] = reflect.ValueOf(fromLine)
	goArguments[3] = reflect.ValueOf(fromColumn)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "search", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Perform selection, from line/column to line/column.
*/
func (o *TextEdit) Select(fromLine gdnative.Int, fromColumn gdnative.Int, toLine gdnative.Int, toColumn gdnative.Int) {
	log.Println("Calling TextEdit.Select()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(fromLine)
	goArguments[1] = reflect.ValueOf(fromColumn)
	goArguments[2] = reflect.ValueOf(toLine)
	goArguments[3] = reflect.ValueOf(toColumn)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "select", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Select all the text.
*/
func (o *TextEdit) SelectAll() {
	log.Println("Calling TextEdit.SelectAll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "select_all", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetContextMenuEnabled(enable gdnative.Bool) {
	log.Println("Calling TextEdit.SetContextMenuEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_context_menu_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetHidingEnabled(enable gdnative.Int) {
	log.Println("Calling TextEdit.SetHidingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_hiding_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetHighlightAllOccurrences(enable gdnative.Bool) {
	log.Println("Calling TextEdit.SetHighlightAllOccurrences()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_highlight_all_occurrences", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetHighlightCurrentLine(enabled gdnative.Bool) {
	log.Println("Calling TextEdit.SetHighlightCurrentLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_highlight_current_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) SetLineAsHidden(line gdnative.Int, enable gdnative.Bool) {
	log.Println("Calling TextEdit.SetLineAsHidden()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(line)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_line_as_hidden", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetOverrideSelectedFontColor(override gdnative.Bool) {
	log.Println("Calling TextEdit.SetOverrideSelectedFontColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(override)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_override_selected_font_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetReadonly(enable gdnative.Bool) {
	log.Println("Calling TextEdit.SetReadonly()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_readonly", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetRightClickMovesCaret(enable gdnative.Bool) {
	log.Println("Calling TextEdit.SetRightClickMovesCaret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_right_click_moves_caret", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetShowLineNumbers(enable gdnative.Bool) {
	log.Println("Calling TextEdit.SetShowLineNumbers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_show_line_numbers", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetSmoothScrollEnable(enable gdnative.Bool) {
	log.Println("Calling TextEdit.SetSmoothScrollEnable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_smooth_scroll_enable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetSyntaxColoring(enable gdnative.Bool) {
	log.Println("Calling TextEdit.SetSyntaxColoring()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_syntax_coloring", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetText(text gdnative.String) {
	log.Println("Calling TextEdit.SetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetVScrollSpeed(speed gdnative.Float) {
	log.Println("Calling TextEdit.SetVScrollSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(speed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_v_scroll_speed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TextEdit) SetWrap(enable gdnative.Bool) {
	log.Println("Calling TextEdit.SetWrap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_wrap", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Toggle the folding of the code block at the given line.
*/
func (o *TextEdit) ToggleFoldLine(line gdnative.Int) {
	log.Println("Calling TextEdit.ToggleFoldLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "toggle_fold_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Perform undo operation.
*/
func (o *TextEdit) Undo() {
	log.Println("Calling TextEdit.Undo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "undo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) UnfoldLine(line gdnative.Int) {
	log.Println("Calling TextEdit.UnfoldLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "unfold_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TextEdit) UnhideAllLines() {
	log.Println("Calling TextEdit.UnhideAllLines()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "unhide_all_lines", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TextEditImplementer is an interface for TextEdit objects.
*/
type TextEditImplementer interface {
	Class
}
