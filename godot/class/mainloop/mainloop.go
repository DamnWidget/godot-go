package mainloop

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Main loop is the abstract main loop base class. All other main loop classes are derived from it. Upon application start, a [code]MainLoop[/code] has to be provided to OS, else the application will exit. This happens automatically (and a [SceneTree] is created), unless a main [Script] is supplied, which may or not create and return a [code]MainLoop[/code].
*/
type MainLoop struct {
	Object
}

func (o *MainLoop) BaseClass() string {
	return "MainLoop"
}

/*

 */
func (o *MainLoop) X_DropFiles(files *PoolStringArray, screen gdnative.Int) {
	log.Println("Calling MainLoop.X_DropFiles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(files)
	goArguments[1] = reflect.ValueOf(screen)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_drop_files", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Called before the program exits.
*/
func (o *MainLoop) X_Finalize() {
	log.Println("Calling MainLoop.X_Finalize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_finalize", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Called each idle frame with time since last call as an only argument.
*/
func (o *MainLoop) X_Idle(delta gdnative.Float) {
	log.Println("Calling MainLoop.X_Idle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(delta)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_idle", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Called once during initialization.
*/
func (o *MainLoop) X_Initialize() {
	log.Println("Calling MainLoop.X_Initialize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_initialize", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MainLoop) X_InputEvent(ev *InputEvent) {
	log.Println("Calling MainLoop.X_InputEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ev)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_input_event", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MainLoop) X_InputText(text gdnative.String) {
	log.Println("Calling MainLoop.X_InputText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_input_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MainLoop) X_Iteration(delta gdnative.Float) {
	log.Println("Calling MainLoop.X_Iteration()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(delta)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_iteration", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MainLoop) Finish() {
	log.Println("Calling MainLoop.Finish()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "finish", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MainLoop) Idle(delta gdnative.Float) gdnative.Bool {
	log.Println("Calling MainLoop.Idle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(delta)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "idle", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MainLoop) Init() {
	log.Println("Calling MainLoop.Init()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "init", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MainLoop) InputEvent(ev *InputEvent) {
	log.Println("Calling MainLoop.InputEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ev)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "input_event", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MainLoop) InputText(text gdnative.String) {
	log.Println("Calling MainLoop.InputText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "input_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MainLoop) Iteration(delta gdnative.Float) gdnative.Bool {
	log.Println("Calling MainLoop.Iteration()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(delta)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "iteration", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   MainLoopImplementer is an interface for MainLoop objects.
*/
type MainLoopImplementer interface {
	Class
}
