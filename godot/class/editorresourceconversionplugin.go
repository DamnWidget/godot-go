package class

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewEditorResourceConversionPluginFromPointer(ptr gdnative.Pointer) EditorResourceConversionPlugin {
func NewEditorResourceConversionPluginFromPointer(ptr gdnative.Pointer) EditorResourceConversionPlugin {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorResourceConversionPlugin{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type EditorResourceConversionPlugin struct {
	Reference
	owner gdnative.Object
}

func (o *EditorResourceConversionPlugin) BaseClass() string {
	return "EditorResourceConversionPlugin"
}

// SetBaseObject will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *EditorResourceConversionPlugin) SetBaseObject(object gdnative.Object) {
	o.owner = object
}

func (o *EditorResourceConversionPlugin) GetBaseObject() gdnative.Object {
	return o.owner
}

/*

	Args: [{ false resource Resource}], Returns: Resource
*/
func (o *EditorResourceConversionPlugin) X_Convert(resource Resource) Resource {
	log.Println("Calling EditorResourceConversionPlugin.X_Convert()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(resource.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourceConversionPlugin", "_convert")

	// Call the parent method.
	// Resource
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewResourceFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [], Returns: String
*/
func (o *EditorResourceConversionPlugin) X_ConvertsTo() gdnative.String {
	log.Println("Calling EditorResourceConversionPlugin.X_ConvertsTo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourceConversionPlugin", "_converts_to")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}
