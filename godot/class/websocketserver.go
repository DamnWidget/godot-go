package class

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewWebSocketServerFromPointer(ptr gdnative.Pointer) WebSocketServer {
func NewWebSocketServerFromPointer(ptr gdnative.Pointer) WebSocketServer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := WebSocketServer{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type WebSocketServer struct {
	WebSocketMultiplayerPeer
	owner gdnative.Object
}

func (o *WebSocketServer) BaseClass() string {
	return "WebSocketServer"
}

// SetBaseObject will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *WebSocketServer) SetBaseObject(object gdnative.Object) {
	o.owner = object
}

func (o *WebSocketServer) GetBaseObject() gdnative.Object {
	return o.owner
}

/*

	Args: [{ false id int}], Returns: bool
*/
func (o *WebSocketServer) HasPeer(id gdnative.Int) gdnative.Bool {
	log.Println("Calling WebSocketServer.HasPeer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "has_peer")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [], Returns: bool
*/
func (o *WebSocketServer) IsListening() gdnative.Bool {
	log.Println("Calling WebSocketServer.IsListening()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "is_listening")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [{ false port int} {[] true protocols PoolStringArray} {False true gd_mp_api bool}], Returns: enum.Error
*/

/*

	Args: [], Returns: void
*/
func (o *WebSocketServer) Stop() {
	log.Println("Calling WebSocketServer.Stop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "stop")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}
