package audioeffect

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB). Compressor has many uses in the mix: - In the Master bus to compress the whole output (Although a [AudioEffectLimiter] is probably better) - In voice channels to ensure they sound as balanced as possible. - Sidechained. Sidechained, which can reduce the sound level sidechained with another audio bus for threshold detection.. This technique is very common in video game mixing to download the level of Music/SFX while voices are being heard. - Accentuates transients by using a wider attack, making effects sound more punchy.
*/
type AudioEffectCompressor struct {
	AudioEffect
}

func (o *AudioEffectCompressor) BaseClass() string {
	return "AudioEffectCompressor"
}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) GetAttackUs() gdnative.Float {
	log.Println("Calling AudioEffectCompressor.GetAttackUs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_attack_us", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) GetGain() gdnative.Float {
	log.Println("Calling AudioEffectCompressor.GetGain()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_gain", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) GetMix() gdnative.Float {
	log.Println("Calling AudioEffectCompressor.GetMix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_mix", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) GetRatio() gdnative.Float {
	log.Println("Calling AudioEffectCompressor.GetRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_ratio", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) GetReleaseMs() gdnative.Float {
	log.Println("Calling AudioEffectCompressor.GetReleaseMs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_release_ms", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) GetSidechain() gdnative.String {
	log.Println("Calling AudioEffectCompressor.GetSidechain()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_sidechain", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) GetThreshold() gdnative.Float {
	log.Println("Calling AudioEffectCompressor.GetThreshold()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_threshold", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) SetAttackUs(attackUs gdnative.Float) {
	log.Println("Calling AudioEffectCompressor.SetAttackUs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(attackUs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_attack_us", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) SetGain(gain gdnative.Float) {
	log.Println("Calling AudioEffectCompressor.SetGain()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(gain)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_gain", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) SetMix(mix gdnative.Float) {
	log.Println("Calling AudioEffectCompressor.SetMix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mix)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_mix", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) SetRatio(ratio gdnative.Float) {
	log.Println("Calling AudioEffectCompressor.SetRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_ratio", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) SetReleaseMs(releaseMs gdnative.Float) {
	log.Println("Calling AudioEffectCompressor.SetReleaseMs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(releaseMs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_release_ms", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) SetSidechain(sidechain gdnative.String) {
	log.Println("Calling AudioEffectCompressor.SetSidechain()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sidechain)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_sidechain", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectCompressor) SetThreshold(threshold gdnative.Float) {
	log.Println("Calling AudioEffectCompressor.SetThreshold()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(threshold)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_threshold", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioEffectCompressorImplementer is an interface for AudioEffectCompressor objects.
*/
type AudioEffectCompressorImplementer interface {
	Class
}
