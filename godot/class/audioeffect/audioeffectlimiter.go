package audioeffect

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A limiter is similar to a compressor, but itâ€™s less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master Bus is always recommended to reduce the effects of clipping. Soft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.
*/
type AudioEffectLimiter struct {
	AudioEffect
}

func (o *AudioEffectLimiter) BaseClass() string {
	return "AudioEffectLimiter"
}

/*
   Undocumented
*/
func (o *AudioEffectLimiter) GetCeilingDb() gdnative.Float {
	log.Println("Calling AudioEffectLimiter.GetCeilingDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_ceiling_db", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectLimiter) GetSoftClipDb() gdnative.Float {
	log.Println("Calling AudioEffectLimiter.GetSoftClipDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_soft_clip_db", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectLimiter) GetSoftClipRatio() gdnative.Float {
	log.Println("Calling AudioEffectLimiter.GetSoftClipRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_soft_clip_ratio", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectLimiter) GetThresholdDb() gdnative.Float {
	log.Println("Calling AudioEffectLimiter.GetThresholdDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_threshold_db", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectLimiter) SetCeilingDb(ceiling gdnative.Float) {
	log.Println("Calling AudioEffectLimiter.SetCeilingDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ceiling)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_ceiling_db", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectLimiter) SetSoftClipDb(softClip gdnative.Float) {
	log.Println("Calling AudioEffectLimiter.SetSoftClipDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(softClip)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_soft_clip_db", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectLimiter) SetSoftClipRatio(softClip gdnative.Float) {
	log.Println("Calling AudioEffectLimiter.SetSoftClipRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(softClip)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_soft_clip_ratio", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectLimiter) SetThresholdDb(threshold gdnative.Float) {
	log.Println("Calling AudioEffectLimiter.SetThresholdDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(threshold)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_threshold_db", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioEffectLimiterImplementer is an interface for AudioEffectLimiter objects.
*/
type AudioEffectLimiterImplementer interface {
	Class
}
