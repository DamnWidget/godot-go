package audioeffect

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewAudioEffectLimiterFromPointer(ptr gdnative.Pointer) *AudioEffectLimiter {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := AudioEffectLimiter{}
	obj.SetOwner(owner)

	return &obj

}

/*
A limiter is similar to a compressor, but itâ€™s less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master Bus is always recommended to reduce the effects of clipping. Soft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.
*/
type AudioEffectLimiter struct {
	AudioEffect
}

func (o *AudioEffectLimiter) BaseClass() string {
	return "AudioEffectLimiter"
}

/*
        Undocumented
	Args: [], Returns: float
*/

func (o *AudioEffectLimiter) GetCeilingDb() gdnative.Float {
	log.Println("Calling AudioEffectLimiter.GetCeilingDb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectLimiter", "get_ceiling_db")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyFloat()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewFloatFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/

func (o *AudioEffectLimiter) GetSoftClipDb() gdnative.Float {
	log.Println("Calling AudioEffectLimiter.GetSoftClipDb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectLimiter", "get_soft_clip_db")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyFloat()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewFloatFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/

func (o *AudioEffectLimiter) GetSoftClipRatio() gdnative.Float {
	log.Println("Calling AudioEffectLimiter.GetSoftClipRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectLimiter", "get_soft_clip_ratio")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyFloat()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewFloatFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/

func (o *AudioEffectLimiter) GetThresholdDb() gdnative.Float {
	log.Println("Calling AudioEffectLimiter.GetThresholdDb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectLimiter", "get_threshold_db")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyFloat()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewFloatFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false ceiling float}], Returns: void
*/

func (o *AudioEffectLimiter) SetCeilingDb(ceiling gdnative.Float) {
	log.Println("Calling AudioEffectLimiter.SetCeilingDb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromFloat(ceiling)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectLimiter", "set_ceiling_db")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false soft_clip float}], Returns: void
*/

func (o *AudioEffectLimiter) SetSoftClipDb(softClip gdnative.Float) {
	log.Println("Calling AudioEffectLimiter.SetSoftClipDb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromFloat(softClip)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectLimiter", "set_soft_clip_db")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false soft_clip float}], Returns: void
*/

func (o *AudioEffectLimiter) SetSoftClipRatio(softClip gdnative.Float) {
	log.Println("Calling AudioEffectLimiter.SetSoftClipRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromFloat(softClip)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectLimiter", "set_soft_clip_ratio")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false threshold float}], Returns: void
*/

func (o *AudioEffectLimiter) SetThresholdDb(threshold gdnative.Float) {
	log.Println("Calling AudioEffectLimiter.SetThresholdDb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromFloat(threshold)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AudioEffectLimiter", "set_threshold_db")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
