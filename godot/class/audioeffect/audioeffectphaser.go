package audioeffect

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a Low Frequency Oscillator.
*/
type AudioEffectPhaser struct {
	AudioEffect
}

func (o *AudioEffectPhaser) BaseClass() string {
	return "AudioEffectPhaser"
}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) GetDepth() gdnative.Float {
	log.Println("Calling AudioEffectPhaser.GetDepth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_depth", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) GetFeedback() gdnative.Float {
	log.Println("Calling AudioEffectPhaser.GetFeedback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_feedback", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) GetRangeMaxHz() gdnative.Float {
	log.Println("Calling AudioEffectPhaser.GetRangeMaxHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_range_max_hz", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) GetRangeMinHz() gdnative.Float {
	log.Println("Calling AudioEffectPhaser.GetRangeMinHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_range_min_hz", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) GetRateHz() gdnative.Float {
	log.Println("Calling AudioEffectPhaser.GetRateHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_rate_hz", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) SetDepth(depth gdnative.Float) {
	log.Println("Calling AudioEffectPhaser.SetDepth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(depth)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_depth", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) SetFeedback(fbk gdnative.Float) {
	log.Println("Calling AudioEffectPhaser.SetFeedback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(fbk)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_feedback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) SetRangeMaxHz(hz gdnative.Float) {
	log.Println("Calling AudioEffectPhaser.SetRangeMaxHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hz)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_range_max_hz", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) SetRangeMinHz(hz gdnative.Float) {
	log.Println("Calling AudioEffectPhaser.SetRangeMinHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hz)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_range_min_hz", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AudioEffectPhaser) SetRateHz(hz gdnative.Float) {
	log.Println("Calling AudioEffectPhaser.SetRateHz()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hz)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_rate_hz", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioEffectPhaserImplementer is an interface for AudioEffectPhaser objects.
*/
type AudioEffectPhaserImplementer interface {
	Class
}
