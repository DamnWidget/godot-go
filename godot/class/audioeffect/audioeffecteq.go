package audioeffect

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQ are very useful on the Master Bus to completely master a mix and give it character. They are also very useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged).
*/
type AudioEffectEQ struct {
	AudioEffect
}

func (o *AudioEffectEQ) BaseClass() string {
	return "AudioEffectEQ"
}

/*
   Returns the number of bands of the equalizer.
*/
func (o *AudioEffectEQ) GetBandCount() gdnative.Int {
	log.Println("Calling AudioEffectEQ.GetBandCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_band_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the band's gain at the specified index, in dB.
*/
func (o *AudioEffectEQ) GetBandGainDb(bandIdx gdnative.Int) gdnative.Float {
	log.Println("Calling AudioEffectEQ.GetBandGainDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bandIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_band_gain_db", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets band's gain at the specified index, in dB.
*/
func (o *AudioEffectEQ) SetBandGainDb(bandIdx gdnative.Int, volumeDb gdnative.Float) {
	log.Println("Calling AudioEffectEQ.SetBandGainDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(bandIdx)
	goArguments[1] = reflect.ValueOf(volumeDb)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_band_gain_db", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioEffectEQImplementer is an interface for AudioEffectEQ objects.
*/
type AudioEffectEQImplementer interface {
	Class
}
