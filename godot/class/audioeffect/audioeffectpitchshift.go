package audioeffect

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.
*/
type AudioEffectPitchShift struct {
	AudioEffect
}

func (o *AudioEffectPitchShift) BaseClass() string {
	return "AudioEffectPitchShift"
}

/*
   Undocumented
*/
func (o *AudioEffectPitchShift) GetPitchScale() gdnative.Float {
	log.Println("Calling AudioEffectPitchShift.GetPitchScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_pitch_scale", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AudioEffectPitchShift) SetPitchScale(rate gdnative.Float) {
	log.Println("Calling AudioEffectPitchShift.SetPitchScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rate)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_pitch_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AudioEffectPitchShiftImplementer is an interface for AudioEffectPitchShift objects.
*/
type AudioEffectPitchShiftImplementer interface {
	Class
}
