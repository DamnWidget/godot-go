package inputevent

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Stores general mouse events information.
*/
type InputEventMouse struct {
	InputEventWithModifiers
}

func (o *InputEventMouse) BaseClass() string {
	return "InputEventMouse"
}

/*
   Undocumented
*/
func (o *InputEventMouse) GetButtonMask() gdnative.Int {
	log.Println("Calling InputEventMouse.GetButtonMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_button_mask", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEventMouse) GetGlobalPosition() *Vector2 {
	log.Println("Calling InputEventMouse.GetGlobalPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_global_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEventMouse) GetPosition() *Vector2 {
	log.Println("Calling InputEventMouse.GetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEventMouse) SetButtonMask(buttonMask gdnative.Int) {
	log.Println("Calling InputEventMouse.SetButtonMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(buttonMask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_button_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *InputEventMouse) SetGlobalPosition(globalPosition *Vector2) {
	log.Println("Calling InputEventMouse.SetGlobalPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(globalPosition)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_global_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *InputEventMouse) SetPosition(position *Vector2) {
	log.Println("Calling InputEventMouse.SetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   InputEventMouseImplementer is an interface for InputEventMouse objects.
*/
type InputEventMouseImplementer interface {
	Class
}
