package inputevent

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Stores multi-touch press/release information. Supports touch press, touch release and [member index] for multi-touch count and order.
*/
type InputEventScreenTouch struct {
	InputEvent
}

func (o *InputEventScreenTouch) BaseClass() string {
	return "InputEventScreenTouch"
}

/*
   Undocumented
*/
func (o *InputEventScreenTouch) GetIndex() gdnative.Int {
	log.Println("Calling InputEventScreenTouch.GetIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_index", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEventScreenTouch) GetPosition() *Vector2 {
	log.Println("Calling InputEventScreenTouch.GetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEventScreenTouch) SetIndex(index gdnative.Int) {
	log.Println("Calling InputEventScreenTouch.SetIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_index", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *InputEventScreenTouch) SetPosition(position *Vector2) {
	log.Println("Calling InputEventScreenTouch.SetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *InputEventScreenTouch) SetPressed(pressed gdnative.Bool) {
	log.Println("Calling InputEventScreenTouch.SetPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pressed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   InputEventScreenTouchImplementer is an interface for InputEventScreenTouch objects.
*/
type InputEventScreenTouchImplementer interface {
	Class
}
