package inputevent

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Base class of all sort of input event. See [method Node._input].
*/
type InputEvent struct {
	Resource
}

func (o *InputEvent) BaseClass() string {
	return "InputEvent"
}

/*
   Returns [code]true[/code] if this event matches [code]event[/code].
*/
func (o *InputEvent) ActionMatch(event *InputEvent) gdnative.Bool {
	log.Println("Calling InputEvent.ActionMatch()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(event)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "action_match", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a [String] representation of the event.
*/
func (o *InputEvent) AsText() gdnative.String {
	log.Println("Calling InputEvent.AsText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "as_text", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEvent) GetDevice() gdnative.Int {
	log.Println("Calling InputEvent.GetDevice()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_device", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if this input event matches a pre-defined action of any type.
*/
func (o *InputEvent) IsAction(action gdnative.String) gdnative.Bool {
	log.Println("Calling InputEvent.IsAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_action", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the given action is being pressed (and is not an echo event for KEY events). Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].
*/
func (o *InputEvent) IsActionPressed(action gdnative.String) gdnative.Bool {
	log.Println("Calling InputEvent.IsActionPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_action_pressed", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the given action is released (i.e. not pressed). Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].
*/
func (o *InputEvent) IsActionReleased(action gdnative.String) gdnative.Bool {
	log.Println("Calling InputEvent.IsActionReleased()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_action_released", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if this input event's type is one of the [code]InputEvent[/code] constants.
*/
func (o *InputEvent) IsActionType() gdnative.Bool {
	log.Println("Calling InputEvent.IsActionType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_action_type", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if this input event is an echo event (only for events of type KEY).
*/
func (o *InputEvent) IsEcho() gdnative.Bool {
	log.Println("Calling InputEvent.IsEcho()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_echo", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if this input event is pressed. Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].
*/
func (o *InputEvent) IsPressed() gdnative.Bool {
	log.Println("Calling InputEvent.IsPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_pressed", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEvent) SetDevice(device gdnative.Int) {
	log.Println("Calling InputEvent.SetDevice()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(device)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_device", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InputEvent) ShortcutMatch(event *InputEvent) gdnative.Bool {
	log.Println("Calling InputEvent.ShortcutMatch()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(event)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "shortcut_match", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEvent) XformedBy(xform *Transform2D, localOfs *Vector2) *InputEvent {
	log.Println("Calling InputEvent.XformedBy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(xform)
	goArguments[1] = reflect.ValueOf(localOfs)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "xformed_by", goArguments, "*InputEvent")

	returnValue := goRet.Interface().(*InputEvent)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   InputEventImplementer is an interface for InputEvent objects.
*/
type InputEventImplementer interface {
	Class
}
