package inputevent

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Stores key presses on the keyboard. Supports key presses, key releases and [member echo] events.
*/
type InputEventKey struct {
	InputEventWithModifiers
}

func (o *InputEventKey) BaseClass() string {
	return "InputEventKey"
}

/*
   Undocumented
*/
func (o *InputEventKey) GetScancode() gdnative.Int {
	log.Println("Calling InputEventKey.GetScancode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scancode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *InputEventKey) GetScancodeWithModifiers() gdnative.Int {
	log.Println("Calling InputEventKey.GetScancodeWithModifiers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scancode_with_modifiers", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEventKey) GetUnicode() gdnative.Int {
	log.Println("Calling InputEventKey.GetUnicode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_unicode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEventKey) SetEcho(echo gdnative.Bool) {
	log.Println("Calling InputEventKey.SetEcho()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(echo)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_echo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *InputEventKey) SetPressed(pressed gdnative.Bool) {
	log.Println("Calling InputEventKey.SetPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pressed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *InputEventKey) SetScancode(scancode gdnative.Int) {
	log.Println("Calling InputEventKey.SetScancode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scancode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_scancode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *InputEventKey) SetUnicode(unicode gdnative.Int) {
	log.Println("Calling InputEventKey.SetUnicode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(unicode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_unicode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   InputEventKeyImplementer is an interface for InputEventKey objects.
*/
type InputEventKeyImplementer interface {
	Class
}
