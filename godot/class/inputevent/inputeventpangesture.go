package inputevent

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type InputEventPanGesture struct {
	InputEventGesture
}

func (o *InputEventPanGesture) BaseClass() string {
	return "InputEventPanGesture"
}

/*
   Undocumented
*/
func (o *InputEventPanGesture) GetDelta() *Vector2 {
	log.Println("Calling InputEventPanGesture.GetDelta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_delta", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InputEventPanGesture) SetDelta(delta *Vector2) {
	log.Println("Calling InputEventPanGesture.SetDelta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(delta)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_delta", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   InputEventPanGestureImplementer is an interface for InputEventPanGesture objects.
*/
type InputEventPanGestureImplementer interface {
	Class
}
