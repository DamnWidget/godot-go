package node2d

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A 2D game object, with a position, rotation and scale. All 2D physics nodes and sprites inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control on the node's render order.
*/
type Node2D struct {
	CanvasItem
}

func (o *Node2D) BaseClass() string {
	return "Node2D"
}

/*
   Multiplies the current scale by the 'ratio' vector.
*/
func (o *Node2D) ApplyScale(ratio *Vector2) {
	log.Println("Calling Node2D.ApplyScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "apply_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the angle between the node and the 'point' in radians.
*/
func (o *Node2D) GetAngleTo(point *Vector2) gdnative.Float {
	log.Println("Calling Node2D.GetAngleTo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(point)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_angle_to", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) GetGlobalPosition() *Vector2 {
	log.Println("Calling Node2D.GetGlobalPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_global_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) GetGlobalRotation() gdnative.Float {
	log.Println("Calling Node2D.GetGlobalRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_global_rotation", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) GetGlobalRotationDegrees() gdnative.Float {
	log.Println("Calling Node2D.GetGlobalRotationDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_global_rotation_degrees", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) GetGlobalScale() *Vector2 {
	log.Println("Calling Node2D.GetGlobalScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_global_scale", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) GetPosition() *Vector2 {
	log.Println("Calling Node2D.GetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Transform2D] relative to this node's parent.
*/
func (o *Node2D) GetRelativeTransformToParent(parent *Object) *Transform2D {
	log.Println("Calling Node2D.GetRelativeTransformToParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(parent)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_relative_transform_to_parent", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) GetRotation() gdnative.Float {
	log.Println("Calling Node2D.GetRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_rotation", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) GetRotationDegrees() gdnative.Float {
	log.Println("Calling Node2D.GetRotationDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_rotation_degrees", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) GetScale() *Vector2 {
	log.Println("Calling Node2D.GetScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scale", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Node2D) GetZIndex() gdnative.Int {
	log.Println("Calling Node2D.GetZIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_z_index", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Adds the 'offset' vector to the node's global position.
*/
func (o *Node2D) GlobalTranslate(offset *Vector2) {
	log.Println("Calling Node2D.GlobalTranslate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "global_translate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) IsZRelative() gdnative.Bool {
	log.Println("Calling Node2D.IsZRelative()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_z_relative", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Rotates the node so it points towards the 'point'.
*/
func (o *Node2D) LookAt(point *Vector2) {
	log.Println("Calling Node2D.LookAt()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(point)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "look_at", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Applies a local translation on the node's X axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is false, normalizes the movement.
*/
func (o *Node2D) MoveLocalX(delta gdnative.Float, scaled gdnative.Bool) {
	log.Println("Calling Node2D.MoveLocalX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(delta)
	goArguments[1] = reflect.ValueOf(scaled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "move_local_x", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Applies a local translation on the node's Y axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is false, normalizes the movement.
*/
func (o *Node2D) MoveLocalY(delta gdnative.Float, scaled gdnative.Bool) {
	log.Println("Calling Node2D.MoveLocalY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(delta)
	goArguments[1] = reflect.ValueOf(scaled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "move_local_y", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Applies a rotation to the node, in radians, starting from its current rotation.
*/
func (o *Node2D) Rotate(radians gdnative.Float) {
	log.Println("Calling Node2D.Rotate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radians)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "rotate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetGlobalPosition(position *Vector2) {
	log.Println("Calling Node2D.SetGlobalPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_global_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetGlobalRotation(radians gdnative.Float) {
	log.Println("Calling Node2D.SetGlobalRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radians)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_global_rotation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetGlobalRotationDegrees(degrees gdnative.Float) {
	log.Println("Calling Node2D.SetGlobalRotationDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(degrees)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_global_rotation_degrees", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetGlobalScale(scale *Vector2) {
	log.Println("Calling Node2D.SetGlobalScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_global_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetGlobalTransform(xform *Transform2D) {
	log.Println("Calling Node2D.SetGlobalTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(xform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_global_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetPosition(position *Vector2) {
	log.Println("Calling Node2D.SetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetRotation(radians gdnative.Float) {
	log.Println("Calling Node2D.SetRotation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radians)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_rotation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetRotationDegrees(degrees gdnative.Float) {
	log.Println("Calling Node2D.SetRotationDegrees()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(degrees)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_rotation_degrees", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetScale(scale *Vector2) {
	log.Println("Calling Node2D.SetScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetTransform(xform *Transform2D) {
	log.Println("Calling Node2D.SetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(xform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetZAsRelative(enable gdnative.Bool) {
	log.Println("Calling Node2D.SetZAsRelative()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_z_as_relative", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Node2D) SetZIndex(zIndex gdnative.Int) {
	log.Println("Calling Node2D.SetZIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(zIndex)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_z_index", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Converts a local point's coordinates to global coordinates.
*/
func (o *Node2D) ToGlobal(localPoint *Vector2) *Vector2 {
	log.Println("Calling Node2D.ToGlobal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(localPoint)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "to_global", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Converts a global point's coordinates to local coordinates.
*/
func (o *Node2D) ToLocal(globalPoint *Vector2) *Vector2 {
	log.Println("Calling Node2D.ToLocal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(globalPoint)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "to_local", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Translates the node by the given [code]offset[/code] in local coordinates.
*/
func (o *Node2D) Translate(offset *Vector2) {
	log.Println("Calling Node2D.Translate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "translate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Node2DImplementer is an interface for Node2D objects.
*/
type Node2DImplementer interface {
	Class
}
