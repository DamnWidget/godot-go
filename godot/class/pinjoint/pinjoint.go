package pinjoint

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Pin Joint for 3D Rigid Bodies. It pins 2 bodies (rigid or static) together.
*/
type PinJoint struct {
	Joint
}

func (o *PinJoint) BaseClass() string {
	return "PinJoint"
}

/*
   Undocumented
*/
func (o *PinJoint) GetParam(param gdnative.Int) gdnative.Float {
	log.Println("Calling PinJoint.GetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PinJoint) SetParam(param gdnative.Int, value gdnative.Float) {
	log.Println("Calling PinJoint.SetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PinJointImplementer is an interface for PinJoint objects.
*/
type PinJointImplementer interface {
	Class
}
