package jsonparseresult

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
	"github.com/shadowapex/godot-go/godot/class/reference"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewJSONParseResultFromPointer(ptr gdnative.Pointer) *JSONParseResult {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := JSONParseResult{}
	obj.SetOwner(owner)

	return &obj

}

/*
Returned by [method JSON.parse], [code]JSONParseResult[/code] contains decoded JSON or error information if JSON source not successfully parsed. You can check if JSON source was successfully parsed with [code]if json_result.error == OK[/code].
*/
type JSONParseResult struct {
	reference.Reference
}

func (o *JSONParseResult) BaseClass() string {
	return "JSONParseResult"
}

/*
        Undocumented
	Args: [], Returns: enum.Error
*/

/*
        Undocumented
	Args: [], Returns: int
*/

func (o *JSONParseResult) GetErrorLine() gdnative.Int {
	log.Println("Calling JSONParseResult.GetErrorLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("JSONParseResult", "get_error_line")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/

func (o *JSONParseResult) GetErrorString() gdnative.String {
	log.Println("Calling JSONParseResult.GetErrorString()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("JSONParseResult", "get_error_string")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Variant
*/

func (o *JSONParseResult) GetResult() gdnative.Variant {
	log.Println("Calling JSONParseResult.GetResult()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("JSONParseResult", "get_result")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false error int}], Returns: void
*/

func (o *JSONParseResult) SetError(error gdnative.Int) {
	log.Println("Calling JSONParseResult.SetError()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(error)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("JSONParseResult", "set_error")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false error_line int}], Returns: void
*/

func (o *JSONParseResult) SetErrorLine(errorLine gdnative.Int) {
	log.Println("Calling JSONParseResult.SetErrorLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(errorLine)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("JSONParseResult", "set_error_line")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false error_string String}], Returns: void
*/

func (o *JSONParseResult) SetErrorString(errorString gdnative.String) {
	log.Println("Calling JSONParseResult.SetErrorString()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(errorString)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("JSONParseResult", "set_error_string")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false result Variant}], Returns: void
*/

func (o *JSONParseResult) SetResult(result gdnative.Variant) {
	log.Println("Calling JSONParseResult.SetResult()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVariant(result)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("JSONParseResult", "set_result")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
