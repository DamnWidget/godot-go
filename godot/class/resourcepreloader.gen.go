package class

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewResourcePreloaderFromPointer(ptr gdnative.Pointer) ResourcePreloader {
func NewResourcePreloaderFromPointer(ptr gdnative.Pointer) ResourcePreloader {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ResourcePreloader{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Resource Preloader Node. This node is used to preload sub-resources inside a scene, so when the scene is loaded all the resources are ready to use and be retrieved from here.
*/
type ResourcePreloader struct {
	Node
	owner gdnative.Object
}

func (o *ResourcePreloader) BaseClass() string {
	return "ResourcePreloader"
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *ResourcePreloader) X_GetResources() gdnative.Array {
	//log.Println("Calling ResourcePreloader.X_GetResources()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourcePreloader", "_get_resources")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 Array}], Returns: void
*/
func (o *ResourcePreloader) X_SetResources(arg0 gdnative.Array) {
	//log.Println("Calling ResourcePreloader.X_SetResources()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourcePreloader", "_set_resources")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false name String} { false resource Resource}], Returns: void
*/
func (o *ResourcePreloader) AddResource(name gdnative.String, resource Resource) {
	//log.Println("Calling ResourcePreloader.AddResource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(name)
	ptrArguments[1] = gdnative.NewPointerFromObject(resource.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourcePreloader", "add_resource")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Return the resource given a text-id.
	Args: [{ false name String}], Returns: Resource
*/
func (o *ResourcePreloader) GetResource(name gdnative.String) Resource {
	//log.Println("Calling ResourcePreloader.GetResource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourcePreloader", "get_resource")

	// Call the parent method.
	// Resource
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewResourceFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Return the list of resources inside the preloader.
	Args: [], Returns: PoolStringArray
*/
func (o *ResourcePreloader) GetResourceList() gdnative.PoolStringArray {
	//log.Println("Calling ResourcePreloader.GetResourceList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourcePreloader", "get_resource_list")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Return true if the preloader has a given resource.
	Args: [{ false name String}], Returns: bool
*/
func (o *ResourcePreloader) HasResource(name gdnative.String) gdnative.Bool {
	//log.Println("Calling ResourcePreloader.HasResource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourcePreloader", "has_resource")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Remove a resource from the preloader by text id.
	Args: [{ false name String}], Returns: void
*/
func (o *ResourcePreloader) RemoveResource(name gdnative.String) {
	//log.Println("Calling ResourcePreloader.RemoveResource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourcePreloader", "remove_resource")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Rename a resource inside the preloader, from a text-id to a new text-id.
	Args: [{ false name String} { false newname String}], Returns: void
*/
func (o *ResourcePreloader) RenameResource(name gdnative.String, newname gdnative.String) {
	//log.Println("Calling ResourcePreloader.RenameResource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(name)
	ptrArguments[1] = gdnative.NewPointerFromString(newname)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourcePreloader", "rename_resource")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}
