package networkedmultiplayerpeer

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Manages the connection to network peers. Assigns unique IDs to each client connected to the server.
*/
type NetworkedMultiplayerPeer struct {
	PacketPeer
}

func (o *NetworkedMultiplayerPeer) BaseClass() string {
	return "NetworkedMultiplayerPeer"
}

/*
   Returns the current state of the connection. See [enum ConnectionStatus].
*/
func (o *NetworkedMultiplayerPeer) GetConnectionStatus() gdnative.Int {
	log.Println("Calling NetworkedMultiplayerPeer.GetConnectionStatus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_status", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the ID of the [code]NetworkedMultiplayerPeer[/code] who sent the most recent packet.
*/
func (o *NetworkedMultiplayerPeer) GetPacketPeer() gdnative.Int {
	log.Println("Calling NetworkedMultiplayerPeer.GetPacketPeer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_packet_peer", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerPeer) GetTransferMode() gdnative.Int {
	log.Println("Calling NetworkedMultiplayerPeer.GetTransferMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_transfer_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the ID of this [code]NetworkedMultiplayerPeer[/code].
*/
func (o *NetworkedMultiplayerPeer) GetUniqueId() gdnative.Int {
	log.Println("Calling NetworkedMultiplayerPeer.GetUniqueId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_unique_id", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerPeer) IsRefusingNewConnections() gdnative.Bool {
	log.Println("Calling NetworkedMultiplayerPeer.IsRefusingNewConnections()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_refusing_new_connections", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Waits up to 1 second to receive a new network event.
*/
func (o *NetworkedMultiplayerPeer) Poll() {
	log.Println("Calling NetworkedMultiplayerPeer.Poll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "poll", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerPeer) SetRefuseNewConnections(enable gdnative.Bool) {
	log.Println("Calling NetworkedMultiplayerPeer.SetRefuseNewConnections()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_refuse_new_connections", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The peer to which packets will be sent. Default value: [code]0[/code].
*/
func (o *NetworkedMultiplayerPeer) SetTargetPeer(id gdnative.Int) {
	log.Println("Calling NetworkedMultiplayerPeer.SetTargetPeer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_target_peer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerPeer) SetTransferMode(mode gdnative.Int) {
	log.Println("Calling NetworkedMultiplayerPeer.SetTransferMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_transfer_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   NetworkedMultiplayerPeerImplementer is an interface for NetworkedMultiplayerPeer objects.
*/
type NetworkedMultiplayerPeerImplementer interface {
	Class
}
