package gridmap

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Undocumented
*/
type GridMap struct {
	Spatial
}

func (o *GridMap) BaseClass() string {
	return "GridMap"
}

/*
   Undocumented
*/
func (o *GridMap) X_UpdateOctantsCallback() {
	log.Println("Calling GridMap.X_UpdateOctantsCallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_update_octants_callback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) Clear() {
	log.Println("Calling GridMap.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) ClearBakedMeshes() {
	log.Println("Calling GridMap.ClearBakedMeshes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_baked_meshes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) GetBakeMeshInstance(idx gdnative.Int) *RID {
	log.Println("Calling GridMap.GetBakeMeshInstance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bake_mesh_instance", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetBakeMeshes() *Array {
	log.Println("Calling GridMap.GetBakeMeshes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bake_meshes", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCellItem(x gdnative.Int, y gdnative.Int, z gdnative.Int) gdnative.Int {
	log.Println("Calling GridMap.GetCellItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(x)
	goArguments[1] = reflect.ValueOf(y)
	goArguments[2] = reflect.ValueOf(z)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_cell_item", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCellItemOrientation(x gdnative.Int, y gdnative.Int, z gdnative.Int) gdnative.Int {
	log.Println("Calling GridMap.GetCellItemOrientation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(x)
	goArguments[1] = reflect.ValueOf(y)
	goArguments[2] = reflect.ValueOf(z)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_cell_item_orientation", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCellScale() gdnative.Float {
	log.Println("Calling GridMap.GetCellScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_cell_scale", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCellSize() *Vector3 {
	log.Println("Calling GridMap.GetCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_cell_size", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCenterX() gdnative.Bool {
	log.Println("Calling GridMap.GetCenterX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_center_x", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCenterY() gdnative.Bool {
	log.Println("Calling GridMap.GetCenterY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_center_y", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCenterZ() gdnative.Bool {
	log.Println("Calling GridMap.GetCenterZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_center_z", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCollisionLayer() gdnative.Int {
	log.Println("Calling GridMap.GetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_collision_layer", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCollisionLayerBit(bit gdnative.Int) gdnative.Bool {
	log.Println("Calling GridMap.GetCollisionLayerBit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bit)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_collision_layer_bit", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCollisionMask() gdnative.Int {
	log.Println("Calling GridMap.GetCollisionMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_collision_mask", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetCollisionMaskBit(bit gdnative.Int) gdnative.Bool {
	log.Println("Calling GridMap.GetCollisionMaskBit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bit)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_collision_mask_bit", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetMeshes() *Array {
	log.Println("Calling GridMap.GetMeshes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_meshes", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetOctantSize() gdnative.Int {
	log.Println("Calling GridMap.GetOctantSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_octant_size", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetTheme() *MeshLibrary {
	log.Println("Calling GridMap.GetTheme()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_theme", goArguments, "*MeshLibrary")

	returnValue := goRet.Interface().(*MeshLibrary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) GetUsedCells() *Array {
	log.Println("Calling GridMap.GetUsedCells()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_used_cells", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) MakeBakedMeshes(genLightmapUv gdnative.Bool, lightmapUvTexelSize gdnative.Float) {
	log.Println("Calling GridMap.MakeBakedMeshes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(genLightmapUv)
	goArguments[1] = reflect.ValueOf(lightmapUvTexelSize)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "make_baked_meshes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) MapToWorld(x gdnative.Int, y gdnative.Int, z gdnative.Int) *Vector3 {
	log.Println("Calling GridMap.MapToWorld()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(x)
	goArguments[1] = reflect.ValueOf(y)
	goArguments[2] = reflect.ValueOf(z)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "map_to_world", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridMap) ResourceChanged(resource *Resource) {
	log.Println("Calling GridMap.ResourceChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(resource)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "resource_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCellItem(x gdnative.Int, y gdnative.Int, z gdnative.Int, item gdnative.Int, orientation gdnative.Int) {
	log.Println("Calling GridMap.SetCellItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(x)
	goArguments[1] = reflect.ValueOf(y)
	goArguments[2] = reflect.ValueOf(z)
	goArguments[3] = reflect.ValueOf(item)
	goArguments[4] = reflect.ValueOf(orientation)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_cell_item", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCellScale(scale gdnative.Float) {
	log.Println("Calling GridMap.SetCellScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_cell_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCellSize(size *Vector3) {
	log.Println("Calling GridMap.SetCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_cell_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCenterX(enable gdnative.Bool) {
	log.Println("Calling GridMap.SetCenterX()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_center_x", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCenterY(enable gdnative.Bool) {
	log.Println("Calling GridMap.SetCenterY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_center_y", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCenterZ(enable gdnative.Bool) {
	log.Println("Calling GridMap.SetCenterZ()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_center_z", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetClip(enabled gdnative.Bool, clipabove gdnative.Bool, floor gdnative.Int, axis gdnative.Int) {
	log.Println("Calling GridMap.SetClip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(enabled)
	goArguments[1] = reflect.ValueOf(clipabove)
	goArguments[2] = reflect.ValueOf(floor)
	goArguments[3] = reflect.ValueOf(axis)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_clip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCollisionLayer(layer gdnative.Int) {
	log.Println("Calling GridMap.SetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_collision_layer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCollisionLayerBit(bit gdnative.Int, value gdnative.Bool) {
	log.Println("Calling GridMap.SetCollisionLayerBit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(bit)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_collision_layer_bit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCollisionMask(mask gdnative.Int) {
	log.Println("Calling GridMap.SetCollisionMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_collision_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetCollisionMaskBit(bit gdnative.Int, value gdnative.Bool) {
	log.Println("Calling GridMap.SetCollisionMaskBit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(bit)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_collision_mask_bit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetOctantSize(size gdnative.Int) {
	log.Println("Calling GridMap.SetOctantSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_octant_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) SetTheme(theme *MeshLibrary) {
	log.Println("Calling GridMap.SetTheme()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(theme)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_theme", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GridMap) WorldToMap(pos *Vector3) *Vector3 {
	log.Println("Calling GridMap.WorldToMap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pos)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "world_to_map", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   GridMapImplementer is an interface for GridMap objects.
*/
type GridMapImplementer interface {
	Class
}
