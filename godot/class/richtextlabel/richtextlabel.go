package richtextlabel

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Rich text can contain custom text, fonts, images and some basic formatting. The label manages these as an internal tag stack. It also adapts itself to given width/heights. Note that assignments to [member bbcode_text] clear the tag stack and reconstruct it from the property's contents. Any edits made to [member bbcode_text] will erase previous edits made from other manual sources such as [method append_bbcode] and the [code]push_*[/code] / [method pop] methods.
*/
type RichTextLabel struct {
	Control
}

func (o *RichTextLabel) BaseClass() string {
	return "RichTextLabel"
}

/*
   Undocumented
*/
func (o *RichTextLabel) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling RichTextLabel.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) X_ScrollChanged(arg0 gdnative.Float) {
	log.Println("Calling RichTextLabel.X_ScrollChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_scroll_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds an image's opening and closing tags to the tag stack.
*/
func (o *RichTextLabel) AddImage(image *Texture) {
	log.Println("Calling RichTextLabel.AddImage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(image)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_image", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds raw non-bbcode-parsed text to the tag stack.
*/
func (o *RichTextLabel) AddText(text gdnative.String) {
	log.Println("Calling RichTextLabel.AddText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Parses [code]bbcode[/code] and adds tags to the tag stack as needed. Returns the result of the parsing, [code]OK[/code] if successful.
*/
func (o *RichTextLabel) AppendBbcode(bbcode gdnative.String) gdnative.Int {
	log.Println("Calling RichTextLabel.AppendBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bbcode)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "append_bbcode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Clears the tag stack and sets [member bbcode_text] to an empty string.
*/
func (o *RichTextLabel) Clear() {
	log.Println("Calling RichTextLabel.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) GetBbcode() gdnative.String {
	log.Println("Calling RichTextLabel.GetBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bbcode", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the total number of newlines in the tag stack's text tags. Considers wrapped text as one line.
*/
func (o *RichTextLabel) GetLineCount() gdnative.Int {
	log.Println("Calling RichTextLabel.GetLineCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_line_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) GetPercentVisible() gdnative.Float {
	log.Println("Calling RichTextLabel.GetPercentVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_percent_visible", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) GetTabSize() gdnative.Int {
	log.Println("Calling RichTextLabel.GetTabSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_size", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) GetText() gdnative.String {
	log.Println("Calling RichTextLabel.GetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_text", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the total number of characters from text tags. Does not include bbcodes.
*/
func (o *RichTextLabel) GetTotalCharacterCount() gdnative.Int {
	log.Println("Calling RichTextLabel.GetTotalCharacterCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_total_character_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the vertical scrollbar.
*/
func (o *RichTextLabel) GetVScroll() *VScrollBar {
	log.Println("Calling RichTextLabel.GetVScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_v_scroll", goArguments, "*VScrollBar")

	returnValue := goRet.Interface().(*VScrollBar)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) GetVisibleCharacters() gdnative.Int {
	log.Println("Calling RichTextLabel.GetVisibleCharacters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_visible_characters", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of visible lines.
*/
func (o *RichTextLabel) GetVisibleLineCount() gdnative.Int {
	log.Println("Calling RichTextLabel.GetVisibleLineCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_visible_line_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) IsMetaUnderlined() gdnative.Bool {
	log.Println("Calling RichTextLabel.IsMetaUnderlined()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_meta_underlined", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) IsOverridingSelectedFontColor() gdnative.Bool {
	log.Println("Calling RichTextLabel.IsOverridingSelectedFontColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_overriding_selected_font_color", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) IsScrollActive() gdnative.Bool {
	log.Println("Calling RichTextLabel.IsScrollActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_scroll_active", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) IsScrollFollowing() gdnative.Bool {
	log.Println("Calling RichTextLabel.IsScrollFollowing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_scroll_following", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) IsSelectionEnabled() gdnative.Bool {
	log.Println("Calling RichTextLabel.IsSelectionEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_selection_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RichTextLabel) IsUsingBbcode() gdnative.Bool {
	log.Println("Calling RichTextLabel.IsUsingBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_using_bbcode", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Adds a newline tag to the tag stack.
*/
func (o *RichTextLabel) Newline() {
	log.Println("Calling RichTextLabel.Newline()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "newline", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The assignment version of [method append_bbcode]. Clears the tag stack and inserts the new content. Returns [code]OK[/code] if parses [code]bbcode[/code] successfully.
*/
func (o *RichTextLabel) ParseBbcode(bbcode gdnative.String) gdnative.Int {
	log.Println("Calling RichTextLabel.ParseBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bbcode)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "parse_bbcode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Terminates the current tag. Use after [code]push_*[/code] methods to close bbcodes manually. Does not need to follow [code]add_*[/code] methods.
*/
func (o *RichTextLabel) Pop() {
	log.Println("Calling RichTextLabel.Pop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "pop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a [code][right][/code] tag to the tag stack.
*/
func (o *RichTextLabel) PushAlign(align gdnative.Int) {
	log.Println("Calling RichTextLabel.PushAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "push_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a [code][cell][/code] tag to the tag stack. Must be inside a [table] tag. See [method push_table] for details.
*/
func (o *RichTextLabel) PushCell() {
	log.Println("Calling RichTextLabel.PushCell()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "push_cell", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a [code][color][/code] tag to the tag stack.
*/
func (o *RichTextLabel) PushColor(color *Color) {
	log.Println("Calling RichTextLabel.PushColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "push_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a [code][font][/code] tag to the tag stack. Overrides default fonts for its duration.
*/
func (o *RichTextLabel) PushFont(font *Font) {
	log.Println("Calling RichTextLabel.PushFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(font)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "push_font", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds an [code][indent][/code] tag to the tag stack. Multiplies "level" by current tab_size to determine new margin length.
*/
func (o *RichTextLabel) PushIndent(level gdnative.Int) {
	log.Println("Calling RichTextLabel.PushIndent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(level)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "push_indent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a list tag to the tag stack. Similar to the bbcodes [code][ol][/code] or [code][ul][/code], but supports more list types. Not fully implemented!
*/
func (o *RichTextLabel) PushList(aType gdnative.Int) {
	log.Println("Calling RichTextLabel.PushList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "push_list", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a meta tag to the tag stack. Similar to the bbcode [code][url=something]{text}[/url][/code], but supports non-[String] metadata types.
*/
func (o *RichTextLabel) PushMeta(data *Variant) {
	log.Println("Calling RichTextLabel.PushMeta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "push_meta", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a [code][table=columns][/code] tag to the tag stack.
*/
func (o *RichTextLabel) PushTable(columns gdnative.Int) {
	log.Println("Calling RichTextLabel.PushTable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(columns)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "push_table", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a [code][u][/code] tag to the tag stack.
*/
func (o *RichTextLabel) PushUnderline() {
	log.Println("Calling RichTextLabel.PushUnderline()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "push_underline", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes a line of content from the label. Returns [code]true[/code] if the line exists.
*/
func (o *RichTextLabel) RemoveLine(line gdnative.Int) gdnative.Bool {
	log.Println("Calling RichTextLabel.RemoveLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "remove_line", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Scrolls the window's top line to match [code]line[/code].
*/
func (o *RichTextLabel) ScrollToLine(line gdnative.Int) {
	log.Println("Calling RichTextLabel.ScrollToLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(line)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "scroll_to_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetBbcode(text gdnative.String) {
	log.Println("Calling RichTextLabel.SetBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bbcode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetMetaUnderline(enable gdnative.Bool) {
	log.Println("Calling RichTextLabel.SetMetaUnderline()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_meta_underline", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetOverrideSelectedFontColor(override gdnative.Bool) {
	log.Println("Calling RichTextLabel.SetOverrideSelectedFontColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(override)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_override_selected_font_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetPercentVisible(percentVisible gdnative.Float) {
	log.Println("Calling RichTextLabel.SetPercentVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(percentVisible)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_percent_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetScrollActive(active gdnative.Bool) {
	log.Println("Calling RichTextLabel.SetScrollActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(active)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_scroll_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetScrollFollow(follow gdnative.Bool) {
	log.Println("Calling RichTextLabel.SetScrollFollow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(follow)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_scroll_follow", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetSelectionEnabled(enabled gdnative.Bool) {
	log.Println("Calling RichTextLabel.SetSelectionEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_selection_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetTabSize(spaces gdnative.Int) {
	log.Println("Calling RichTextLabel.SetTabSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(spaces)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Edits the selected columns expansion options. If [code]expand[/code] is [code]true[/code], the column expands in proportion to its expansion ratio versus the other columns' ratios. For example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively. Columns with a [code]false[/code] expand will not contribute to the total ratio.
*/
func (o *RichTextLabel) SetTableColumnExpand(column gdnative.Int, expand gdnative.Bool, ratio gdnative.Int) {
	log.Println("Calling RichTextLabel.SetTableColumnExpand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(column)
	goArguments[1] = reflect.ValueOf(expand)
	goArguments[2] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_table_column_expand", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetText(text gdnative.String) {
	log.Println("Calling RichTextLabel.SetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetUseBbcode(enable gdnative.Bool) {
	log.Println("Calling RichTextLabel.SetUseBbcode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_use_bbcode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *RichTextLabel) SetVisibleCharacters(amount gdnative.Int) {
	log.Println("Calling RichTextLabel.SetVisibleCharacters()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_visible_characters", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   RichTextLabelImplementer is an interface for RichTextLabel objects.
*/
type RichTextLabelImplementer interface {
	Class
}
