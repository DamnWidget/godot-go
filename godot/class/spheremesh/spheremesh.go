package spheremesh

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Class representing a spherical [PrimitiveMesh].
*/
type SphereMesh struct {
	PrimitiveMesh
}

func (o *SphereMesh) BaseClass() string {
	return "SphereMesh"
}

/*
   Undocumented
*/
func (o *SphereMesh) GetHeight() gdnative.Float {
	log.Println("Calling SphereMesh.GetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_height", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SphereMesh) GetIsHemisphere() gdnative.Bool {
	log.Println("Calling SphereMesh.GetIsHemisphere()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_is_hemisphere", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SphereMesh) GetRadialSegments() gdnative.Int {
	log.Println("Calling SphereMesh.GetRadialSegments()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_radial_segments", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SphereMesh) GetRadius() gdnative.Float {
	log.Println("Calling SphereMesh.GetRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_radius", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SphereMesh) GetRings() gdnative.Int {
	log.Println("Calling SphereMesh.GetRings()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_rings", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SphereMesh) SetHeight(height gdnative.Float) {
	log.Println("Calling SphereMesh.SetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(height)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_height", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SphereMesh) SetIsHemisphere(isHemisphere gdnative.Bool) {
	log.Println("Calling SphereMesh.SetIsHemisphere()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(isHemisphere)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_is_hemisphere", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SphereMesh) SetRadialSegments(radialSegments gdnative.Int) {
	log.Println("Calling SphereMesh.SetRadialSegments()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radialSegments)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_radial_segments", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SphereMesh) SetRadius(radius gdnative.Float) {
	log.Println("Calling SphereMesh.SetRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radius)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_radius", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SphereMesh) SetRings(rings gdnative.Int) {
	log.Println("Calling SphereMesh.SetRings()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rings)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_rings", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SphereMeshImplementer is an interface for SphereMesh objects.
*/
type SphereMeshImplementer interface {
	Class
}
