package class

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewGridContainerFromPointer(ptr gdnative.Pointer) GridContainer {
func NewGridContainerFromPointer(ptr gdnative.Pointer) GridContainer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := GridContainer{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Grid container will arrange its children in a grid like structure, the grid columns are specified using the [method set_columns] method and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.
*/
type GridContainer struct {
	Container
	owner gdnative.Object
}

func (o *GridContainer) BaseClass() string {
	return "GridContainer"
}

// SetBaseObject will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *GridContainer) SetBaseObject(object gdnative.Object) {
	o.owner = object
}

func (o *GridContainer) GetBaseObject() gdnative.Object {
	return o.owner
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *GridContainer) GetColumns() gdnative.Int {
	log.Println("Calling GridContainer.GetColumns()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GridContainer", "get_columns")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false columns int}], Returns: void
*/
func (o *GridContainer) SetColumns(columns gdnative.Int) {
	log.Println("Calling GridContainer.SetColumns()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(columns)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GridContainer", "set_columns")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}
