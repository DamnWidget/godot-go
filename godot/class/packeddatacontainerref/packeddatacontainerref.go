package packeddatacontainerref

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
	"github.com/shadowapex/godot-go/godot/class/reference"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewPackedDataContainerRefFromPointer(ptr gdnative.Pointer) *PackedDataContainerRef {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PackedDataContainerRef{}
	obj.SetOwner(owner)

	return &obj

}

/*

 */
type PackedDataContainerRef struct {
	reference.Reference
}

func (o *PackedDataContainerRef) BaseClass() string {
	return "PackedDataContainerRef"
}

/*
        Undocumented
	Args: [], Returns: bool
*/

func (o *PackedDataContainerRef) X_IsDictionary() gdnative.Bool {
	log.Println("Calling PackedDataContainerRef.X_IsDictionary()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainerRef", "_is_dictionary")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 Variant}], Returns: Variant
*/

func (o *PackedDataContainerRef) X_IterGet(arg0 gdnative.Variant) gdnative.Variant {
	log.Println("Calling PackedDataContainerRef.X_IterGet()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVariant(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainerRef", "_iter_get")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 Array}], Returns: Variant
*/

func (o *PackedDataContainerRef) X_IterInit(arg0 gdnative.Array) gdnative.Variant {
	log.Println("Calling PackedDataContainerRef.X_IterInit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainerRef", "_iter_init")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 Array}], Returns: Variant
*/

func (o *PackedDataContainerRef) X_IterNext(arg0 gdnative.Array) gdnative.Variant {
	log.Println("Calling PackedDataContainerRef.X_IterNext()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainerRef", "_iter_next")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [], Returns: int
*/

func (o *PackedDataContainerRef) Size() gdnative.Int {
	log.Println("Calling PackedDataContainerRef.Size()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PackedDataContainerRef", "size")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}
