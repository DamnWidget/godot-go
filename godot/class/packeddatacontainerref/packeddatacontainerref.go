package packeddatacontainerref

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type PackedDataContainerRef struct {
	Reference
}

func (o *PackedDataContainerRef) BaseClass() string {
	return "PackedDataContainerRef"
}

/*
   Undocumented
*/
func (o *PackedDataContainerRef) X_IsDictionary() gdnative.Bool {
	log.Println("Calling PackedDataContainerRef.X_IsDictionary()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_is_dictionary", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PackedDataContainerRef) X_IterGet(arg0 *Variant) *Variant {
	log.Println("Calling PackedDataContainerRef.X_IterGet()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_iter_get", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PackedDataContainerRef) X_IterInit(arg0 *Array) *Variant {
	log.Println("Calling PackedDataContainerRef.X_IterInit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_iter_init", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PackedDataContainerRef) X_IterNext(arg0 *Array) *Variant {
	log.Println("Calling PackedDataContainerRef.X_IterNext()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_iter_next", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PackedDataContainerRef) Size() gdnative.Int {
	log.Println("Calling PackedDataContainerRef.Size()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "size", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   PackedDataContainerRefImplementer is an interface for PackedDataContainerRef objects.
*/
type PackedDataContainerRefImplementer interface {
	Class
}
