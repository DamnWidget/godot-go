package menubutton

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"

	"github.com/shadowapex/godot-go/godot/class/button"
	"github.com/shadowapex/godot-go/godot/class/inputevent"

	"github.com/shadowapex/godot-go/godot/class/popup"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewMenuButtonFromPointer(ptr gdnative.Pointer) *MenuButton {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := MenuButton{}
	obj.SetOwner(owner)

	return &obj

}

/*
Special button that brings up a [PopupMenu] when clicked. That's pretty much all it does, as it's just a helper class when building GUIs.
*/
type MenuButton struct {
	button.Button
}

func (o *MenuButton) BaseClass() string {
	return "MenuButton"
}

/*
        Undocumented
	Args: [], Returns: Array
*/

func (o *MenuButton) X_GetItems() gdnative.Array {
	log.Println("Calling MenuButton.X_GetItems()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MenuButton", "_get_items")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 Array}], Returns: void
*/

func (o *MenuButton) X_SetItems(arg0 gdnative.Array) {
	log.Println("Calling MenuButton.X_SetItems()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MenuButton", "_set_items")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/

func (o *MenuButton) X_UnhandledKeyInput(arg0 inputevent.InputEvent) {
	log.Println("Calling MenuButton.X_UnhandledKeyInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetOwner())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MenuButton", "_unhandled_key_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Return the [PopupMenu] contained in this button.
	Args: [], Returns: PopupMenu
*/

func (o *MenuButton) GetPopup() popup.PopupMenu {
	log.Println("Calling MenuButton.GetPopup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MenuButton", "get_popup")

	// Call the parent method.
	// PopupMenu
	retPtr := popup.NewEmptyPopupMenu()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := popup.NewPopupMenuFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [{ false disabled bool}], Returns: void
*/

func (o *MenuButton) SetDisableShortcuts(disabled gdnative.Bool) {
	log.Println("Calling MenuButton.SetDisableShortcuts()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MenuButton", "set_disable_shortcuts")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
