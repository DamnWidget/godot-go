package audioserver

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func newSingletonAudioServer() *audioServer {
	obj := &audioServer{}
	ptr := C.godot_global_get_singleton(C.CString("AudioServer"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*
   AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.
*/
var AudioServer = newSingletonAudioServer()

/*
AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.
*/
type audioServer struct {
	Object
}

func (o *audioServer) BaseClass() string {
	return "AudioServer"
}

/*
   Adds a bus at [code]at_position[/code].
*/
func (o *audioServer) AddBus(atPosition gdnative.Int) {
	log.Println("Calling AudioServer.AddBus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(atPosition)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_bus", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds an [AudioEffect] effect to the bus [code]bus_idx[/code] at [code]at_position[/code].
*/
func (o *audioServer) AddBusEffect(busIdx gdnative.Int, effect *AudioEffect, atPosition gdnative.Int) {
	log.Println("Calling AudioServer.AddBusEffect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(effect)
	goArguments[2] = reflect.ValueOf(atPosition)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_bus_effect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Generates an [AudioBusLayout] using the available busses and effects.
*/
func (o *audioServer) GenerateBusLayout() *AudioBusLayout {
	log.Println("Calling AudioServer.GenerateBusLayout()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "generate_bus_layout", goArguments, "*AudioBusLayout")

	returnValue := goRet.Interface().(*AudioBusLayout)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of available busses.
*/
func (o *audioServer) GetBusCount() gdnative.Int {
	log.Println("Calling AudioServer.GetBusCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bus_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [AudioEffect] at position [code]effect_idx[/code] in bus [code]bus_idx[/code].
*/
func (o *audioServer) GetBusEffect(busIdx gdnative.Int, effectIdx gdnative.Int) *AudioEffect {
	log.Println("Calling AudioServer.GetBusEffect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(effectIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bus_effect", goArguments, "*AudioEffect")

	returnValue := goRet.Interface().(*AudioEffect)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of effects on the bus at [code]bus_idx[/code].
*/
func (o *audioServer) GetBusEffectCount(busIdx gdnative.Int) gdnative.Int {
	log.Println("Calling AudioServer.GetBusEffectCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(busIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bus_effect_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the index of the bus with the name [code]bus_name[/code].
*/
func (o *audioServer) GetBusIndex(busName gdnative.String) gdnative.Int {
	log.Println("Calling AudioServer.GetBusIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(busName)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bus_index", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the name of the bus with the index [code]bus_idx[/code].
*/
func (o *audioServer) GetBusName(busIdx gdnative.Int) gdnative.String {
	log.Println("Calling AudioServer.GetBusName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(busIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bus_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the peak volume of the left speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].
*/
func (o *audioServer) GetBusPeakVolumeLeftDb(busIdx gdnative.Int, channel gdnative.Int) gdnative.Float {
	log.Println("Calling AudioServer.GetBusPeakVolumeLeftDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(channel)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bus_peak_volume_left_db", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the peak volume of the right speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].
*/
func (o *audioServer) GetBusPeakVolumeRightDb(busIdx gdnative.Int, channel gdnative.Int) gdnative.Float {
	log.Println("Calling AudioServer.GetBusPeakVolumeRightDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(channel)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bus_peak_volume_right_db", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the name of the bus that the bus at index [code]bus_idx[/code] sends to.
*/
func (o *audioServer) GetBusSend(busIdx gdnative.Int) gdnative.String {
	log.Println("Calling AudioServer.GetBusSend()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(busIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bus_send", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the volume of the bus at index [code]bus_idx[/code] in dB.
*/
func (o *audioServer) GetBusVolumeDb(busIdx gdnative.Int) gdnative.Float {
	log.Println("Calling AudioServer.GetBusVolumeDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(busIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bus_volume_db", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the sample rate at the output of the audioserver.
*/
func (o *audioServer) GetMixRate() gdnative.Float {
	log.Println("Calling AudioServer.GetMixRate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_mix_rate", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the speaker configuration.
*/
func (o *audioServer) GetSpeakerMode() gdnative.Int {
	log.Println("Calling AudioServer.GetSpeakerMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_speaker_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.
*/
func (o *audioServer) IsBusBypassingEffects(busIdx gdnative.Int) gdnative.Bool {
	log.Println("Calling AudioServer.IsBusBypassingEffects()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(busIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_bus_bypassing_effects", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.
*/
func (o *audioServer) IsBusEffectEnabled(busIdx gdnative.Int, effectIdx gdnative.Int) gdnative.Bool {
	log.Println("Calling AudioServer.IsBusEffectEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(effectIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_bus_effect_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.
*/
func (o *audioServer) IsBusMute(busIdx gdnative.Int) gdnative.Bool {
	log.Println("Calling AudioServer.IsBusMute()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(busIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_bus_mute", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.
*/
func (o *audioServer) IsBusSolo(busIdx gdnative.Int) gdnative.Bool {
	log.Println("Calling AudioServer.IsBusSolo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(busIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_bus_solo", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Locks the audio drivers mainloop. Remember to unlock it afterwards.
*/
func (o *audioServer) Lock() {
	log.Println("Calling AudioServer.Lock()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "lock", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Moves the bus from index [code]index[/code] to index [code]to_index[/code].
*/
func (o *audioServer) MoveBus(index gdnative.Int, toIndex gdnative.Int) {
	log.Println("Calling AudioServer.MoveBus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(index)
	goArguments[1] = reflect.ValueOf(toIndex)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "move_bus", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes the bus at index [code]index[/code].
*/
func (o *audioServer) RemoveBus(index gdnative.Int) {
	log.Println("Calling AudioServer.RemoveBus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_bus", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes the effect at index [code]effect_idx[/code] from the bus at index [code]bus_idx[/code].
*/
func (o *audioServer) RemoveBusEffect(busIdx gdnative.Int, effectIdx gdnative.Int) {
	log.Println("Calling AudioServer.RemoveBusEffect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(effectIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_bus_effect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.
*/
func (o *audioServer) SetBusBypassEffects(busIdx gdnative.Int, enable gdnative.Bool) {
	log.Println("Calling AudioServer.SetBusBypassEffects()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bus_bypass_effects", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds and removes busses to make the number of busses match [code]amount[/code].
*/
func (o *audioServer) SetBusCount(amount gdnative.Int) {
	log.Println("Calling AudioServer.SetBusCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bus_count", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.
*/
func (o *audioServer) SetBusEffectEnabled(busIdx gdnative.Int, effectIdx gdnative.Int, enabled gdnative.Bool) {
	log.Println("Calling AudioServer.SetBusEffectEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(effectIdx)
	goArguments[2] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bus_effect_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Overwrites the currently used [AudioBusLayout].
*/
func (o *audioServer) SetBusLayout(busLayout *AudioBusLayout) {
	log.Println("Calling AudioServer.SetBusLayout()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(busLayout)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bus_layout", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.
*/
func (o *audioServer) SetBusMute(busIdx gdnative.Int, enable gdnative.Bool) {
	log.Println("Calling AudioServer.SetBusMute()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bus_mute", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the name of the bus at index [code]bus_idx[/code] to [code]name[/code].
*/
func (o *audioServer) SetBusName(busIdx gdnative.Int, name gdnative.String) {
	log.Println("Calling AudioServer.SetBusName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bus_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Connects the output of the bus at [code]bus_idx[/code] to the bus named [code]send[/code].
*/
func (o *audioServer) SetBusSend(busIdx gdnative.Int, send gdnative.String) {
	log.Println("Calling AudioServer.SetBusSend()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(send)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bus_send", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.
*/
func (o *audioServer) SetBusSolo(busIdx gdnative.Int, enable gdnative.Bool) {
	log.Println("Calling AudioServer.SetBusSolo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bus_solo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the volume of the bus at index [code]bus_idx[/code] to [code]volume_db[/code].
*/
func (o *audioServer) SetBusVolumeDb(busIdx gdnative.Int, volumeDb gdnative.Float) {
	log.Println("Calling AudioServer.SetBusVolumeDb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(volumeDb)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bus_volume_db", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Swaps the position of two effects in bus [code]bus_idx[/code].
*/
func (o *audioServer) SwapBusEffects(busIdx gdnative.Int, effectIdx gdnative.Int, byEffectIdx gdnative.Int) {
	log.Println("Calling AudioServer.SwapBusEffects()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(busIdx)
	goArguments[1] = reflect.ValueOf(effectIdx)
	goArguments[2] = reflect.ValueOf(byEffectIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "swap_bus_effects", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Unlocks the audiodriver's main loop. After locking it always unlock it.
*/
func (o *audioServer) Unlock() {
	log.Println("Calling AudioServer.Unlock()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "unlock", goArguments, "")

	log.Println("  Function successfully completed.")

}
