package navigationmeshinstance

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type NavigationMeshInstance struct {
	Spatial
}

func (o *NavigationMeshInstance) BaseClass() string {
	return "NavigationMeshInstance"
}

/*
   Undocumented
*/
func (o *NavigationMeshInstance) GetNavigationMesh() *NavigationMesh {
	log.Println("Calling NavigationMeshInstance.GetNavigationMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_navigation_mesh", goArguments, "*NavigationMesh")

	returnValue := goRet.Interface().(*NavigationMesh)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NavigationMeshInstance) IsEnabled() gdnative.Bool {
	log.Println("Calling NavigationMeshInstance.IsEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NavigationMeshInstance) SetEnabled(enabled gdnative.Bool) {
	log.Println("Calling NavigationMeshInstance.SetEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *NavigationMeshInstance) SetNavigationMesh(navmesh *NavigationMesh) {
	log.Println("Calling NavigationMeshInstance.SetNavigationMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(navmesh)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_navigation_mesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   NavigationMeshInstanceImplementer is an interface for NavigationMeshInstance objects.
*/
type NavigationMeshInstanceImplementer interface {
	Class
}
