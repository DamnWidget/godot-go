package animation

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A node graph tool for blending multiple animations bound to an [AnimationPlayer]. Especially useful for animating characters or other skeleton-based rigs. It can combine several animations to form a desired pose. It takes [Animation]s from an [AnimationPlayer] node and mixes them depending on the graph.
*/
type AnimationTreePlayer struct {
	Node
}

func (o *AnimationTreePlayer) BaseClass() string {
	return "AnimationTreePlayer"
}

/*
   Adds a [code]type[/code] node to the graph with name [code]id[/code].
*/
func (o *AnimationTreePlayer) AddNode(aType gdnative.Int, id gdnative.String) {
	log.Println("Calling AnimationTreePlayer.AddNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(aType)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Shifts position in the animation timeline. Delta is the time in seconds to shift.
*/
func (o *AnimationTreePlayer) Advance(delta gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.Advance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(delta)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "advance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the [AnimationPlayer]'s [Animation] bound to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].
*/
func (o *AnimationTreePlayer) AnimationNodeGetAnimation(id gdnative.String) *Animation {
	log.Println("Calling AnimationTreePlayer.AnimationNodeGetAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "animation_node_get_animation", goArguments, "*Animation")

	returnValue := goRet.Interface().(*Animation)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the name of the [member master_player]'s [Animation] bound to this animation node.
*/
func (o *AnimationTreePlayer) AnimationNodeGetMasterAnimation(id gdnative.String) gdnative.String {
	log.Println("Calling AnimationTreePlayer.AnimationNodeGetMasterAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "animation_node_get_master_animation", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Binds a new [Animation] from the [member master_player] to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].
*/
func (o *AnimationTreePlayer) AnimationNodeSetAnimation(id gdnative.String, animation *Animation) {
	log.Println("Calling AnimationTreePlayer.AnimationNodeSetAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(animation)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "animation_node_set_animation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]enable[/code] is [code]true[/code], the animation node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.
*/
func (o *AnimationTreePlayer) AnimationNodeSetFilterPath(id gdnative.String, path *NodePath, enable gdnative.Bool) {
	log.Println("Calling AnimationTreePlayer.AnimationNodeSetFilterPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(path)
	goArguments[2] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "animation_node_set_filter_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Binds the [Animation] named [code]source[/code] from [member master_player] to the animation node [code]id[/code]. Recalculates caches.
*/
func (o *AnimationTreePlayer) AnimationNodeSetMasterAnimation(id gdnative.String, source gdnative.String) {
	log.Println("Calling AnimationTreePlayer.AnimationNodeSetMasterAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(source)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "animation_node_set_master_animation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns whether node [code]id[/code] and [code]dst_id[/code] are connected at the specified slot.
*/
func (o *AnimationTreePlayer) AreNodesConnected(id gdnative.String, dstId gdnative.String, dstInputIdx gdnative.Int) gdnative.Bool {
	log.Println("Calling AnimationTreePlayer.AreNodesConnected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(dstId)
	goArguments[2] = reflect.ValueOf(dstInputIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "are_nodes_connected", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the blend amount of a Blend2 node given its name.
*/
func (o *AnimationTreePlayer) Blend2NodeGetAmount(id gdnative.String) gdnative.Float {
	log.Println("Calling AnimationTreePlayer.Blend2NodeGetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "blend2_node_get_amount", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the blend amount of a Blend2 node given its name and value. A Blend2 Node blends two animations with the amount between 0 and 1. At 0, Output is input a. Towards 1, the influence of a gets lessened, the influence of b gets raised. At 1, Output is input b.
*/
func (o *AnimationTreePlayer) Blend2NodeSetAmount(id gdnative.String, blend gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.Blend2NodeSetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(blend)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "blend2_node_set_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]enable[/code] is [code]true[/code], the blend2 node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.
*/
func (o *AnimationTreePlayer) Blend2NodeSetFilterPath(id gdnative.String, path *NodePath, enable gdnative.Bool) {
	log.Println("Calling AnimationTreePlayer.Blend2NodeSetFilterPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(path)
	goArguments[2] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "blend2_node_set_filter_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the blend amount of a Blend3 node given its name.
*/
func (o *AnimationTreePlayer) Blend3NodeGetAmount(id gdnative.String) gdnative.Float {
	log.Println("Calling AnimationTreePlayer.Blend3NodeGetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "blend3_node_get_amount", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the blend amount of a Blend3 node given its name and value. A Blend3 Node blends three animations with the amount between -1 and 1. At -1, Output is input b-. From -1 to 0, the influence of b- gets lessened, the influence of a gets raised and the influence of b+ is 0. At 0, Output is input a. From 0 to 1, the influence of a gets lessened, the influence of b+ gets raised and the influence of b+ is 0. At 1, Output is input b+.
*/
func (o *AnimationTreePlayer) Blend3NodeSetAmount(id gdnative.String, blend gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.Blend3NodeSetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(blend)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "blend3_node_set_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the blend amount of a Blend4 node given its name.
*/
func (o *AnimationTreePlayer) Blend4NodeGetAmount(id gdnative.String) *Vector2 {
	log.Println("Calling AnimationTreePlayer.Blend4NodeGetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "blend4_node_get_amount", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the blend amount of a Blend4 node given its name and value. A Blend4 Node blends two pairs of animations. The two pairs are blended like blend2 and then added together.
*/
func (o *AnimationTreePlayer) Blend4NodeSetAmount(id gdnative.String, blend *Vector2) {
	log.Println("Calling AnimationTreePlayer.Blend4NodeSetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(blend)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "blend4_node_set_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Connects node [code]id[/code] to [code]dst_id[/code] at the specified input slot.
*/
func (o *AnimationTreePlayer) ConnectNodes(id gdnative.String, dstId gdnative.String, dstInputIdx gdnative.Int) gdnative.Int {
	log.Println("Calling AnimationTreePlayer.ConnectNodes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(dstId)
	goArguments[2] = reflect.ValueOf(dstInputIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "connect_nodes", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Disconnects nodes connected to [code]id[/code] at the specified input slot.
*/
func (o *AnimationTreePlayer) DisconnectNodes(id gdnative.String, dstInputIdx gdnative.Int) {
	log.Println("Calling AnimationTreePlayer.DisconnectNodes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(dstInputIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "disconnect_nodes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AnimationTreePlayer) GetAnimationProcessMode() gdnative.Int {
	log.Println("Calling AnimationTreePlayer.GetAnimationProcessMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_animation_process_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AnimationTreePlayer) GetBasePath() *NodePath {
	log.Println("Calling AnimationTreePlayer.GetBasePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_base_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AnimationTreePlayer) GetMasterPlayer() *NodePath {
	log.Println("Calling AnimationTreePlayer.GetMasterPlayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_master_player", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a [PoolStringArray] containing the name of all nodes.
*/
func (o *AnimationTreePlayer) GetNodeList() *PoolStringArray {
	log.Println("Calling AnimationTreePlayer.GetNodeList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AnimationTreePlayer) IsActive() gdnative.Bool {
	log.Println("Calling AnimationTreePlayer.IsActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_active", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns mix amount of a Mix node given its name.
*/
func (o *AnimationTreePlayer) MixNodeGetAmount(id gdnative.String) gdnative.Float {
	log.Println("Calling AnimationTreePlayer.MixNodeGetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mix_node_get_amount", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets mix amount of a Mix node given its name and value. A Mix node adds input b to input a by a the amount given by ratio.
*/
func (o *AnimationTreePlayer) MixNodeSetAmount(id gdnative.String, ratio gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.MixNodeSetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "mix_node_set_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Check if a node exists (by name).
*/
func (o *AnimationTreePlayer) NodeExists(node gdnative.String) gdnative.Bool {
	log.Println("Calling AnimationTreePlayer.NodeExists()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "node_exists", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the input count for a given node. Different types of nodes have different amount of inputs.
*/
func (o *AnimationTreePlayer) NodeGetInputCount(id gdnative.String) gdnative.Int {
	log.Println("Calling AnimationTreePlayer.NodeGetInputCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "node_get_input_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the input source for a given node input.
*/
func (o *AnimationTreePlayer) NodeGetInputSource(id gdnative.String, idx gdnative.Int) gdnative.String {
	log.Println("Calling AnimationTreePlayer.NodeGetInputSource()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "node_get_input_source", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns position of a node in the graph given its name.
*/
func (o *AnimationTreePlayer) NodeGetPosition(id gdnative.String) *Vector2 {
	log.Println("Calling AnimationTreePlayer.NodeGetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "node_get_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the node type, will return from NODE_* enum.
*/
func (o *AnimationTreePlayer) NodeGetType(id gdnative.String) gdnative.Int {
	log.Println("Calling AnimationTreePlayer.NodeGetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "node_get_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Rename a node in the graph.
*/
func (o *AnimationTreePlayer) NodeRename(node gdnative.String, newName gdnative.String) gdnative.Int {
	log.Println("Calling AnimationTreePlayer.NodeRename()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(node)
	goArguments[1] = reflect.ValueOf(newName)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "node_rename", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets position of a node in the graph given its name and position.
*/
func (o *AnimationTreePlayer) NodeSetPosition(id gdnative.String, screenPosition *Vector2) {
	log.Println("Calling AnimationTreePlayer.NodeSetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(screenPosition)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "node_set_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns autostart delay of a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeGetAutorestartDelay(id gdnative.String) gdnative.Float {
	log.Println("Calling AnimationTreePlayer.OneshotNodeGetAutorestartDelay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "oneshot_node_get_autorestart_delay", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns autostart random delay of a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeGetAutorestartRandomDelay(id gdnative.String) gdnative.Float {
	log.Println("Calling AnimationTreePlayer.OneshotNodeGetAutorestartRandomDelay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "oneshot_node_get_autorestart_random_delay", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns fade in time of a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeGetFadeinTime(id gdnative.String) gdnative.Float {
	log.Println("Calling AnimationTreePlayer.OneshotNodeGetFadeinTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "oneshot_node_get_fadein_time", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns fade out time of a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeGetFadeoutTime(id gdnative.String) gdnative.Float {
	log.Println("Calling AnimationTreePlayer.OneshotNodeGetFadeoutTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "oneshot_node_get_fadeout_time", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a OneShot node will auto restart given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeHasAutorestart(id gdnative.String) gdnative.Bool {
	log.Println("Calling AnimationTreePlayer.OneshotNodeHasAutorestart()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "oneshot_node_has_autorestart", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a OneShot node is active given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeIsActive(id gdnative.String) gdnative.Bool {
	log.Println("Calling AnimationTreePlayer.OneshotNodeIsActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "oneshot_node_is_active", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets autorestart property of a OneShot node given its name and value.
*/
func (o *AnimationTreePlayer) OneshotNodeSetAutorestart(id gdnative.String, enable gdnative.Bool) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetAutorestart()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "oneshot_node_set_autorestart", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets autorestart delay of a OneShot node given its name and value in seconds.
*/
func (o *AnimationTreePlayer) OneshotNodeSetAutorestartDelay(id gdnative.String, delaySec gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetAutorestartDelay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(delaySec)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "oneshot_node_set_autorestart_delay", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets autorestart random delay of a OneShot node given its name and value in seconds.
*/
func (o *AnimationTreePlayer) OneshotNodeSetAutorestartRandomDelay(id gdnative.String, randSec gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetAutorestartRandomDelay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(randSec)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "oneshot_node_set_autorestart_random_delay", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets fade in time of a OneShot node given its name and value in seconds.
*/
func (o *AnimationTreePlayer) OneshotNodeSetFadeinTime(id gdnative.String, timeSec gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetFadeinTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(timeSec)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "oneshot_node_set_fadein_time", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets fade out time of a OneShot node given its name and value in seconds.
*/
func (o *AnimationTreePlayer) OneshotNodeSetFadeoutTime(id gdnative.String, timeSec gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetFadeoutTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(timeSec)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "oneshot_node_set_fadeout_time", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]enable[/code] is [code]true[/code], the oneshot node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.
*/
func (o *AnimationTreePlayer) OneshotNodeSetFilterPath(id gdnative.String, path *NodePath, enable gdnative.Bool) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeSetFilterPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(path)
	goArguments[2] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "oneshot_node_set_filter_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Starts a OneShot node given its name.
*/
func (o *AnimationTreePlayer) OneshotNodeStart(id gdnative.String) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeStart()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "oneshot_node_start", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Stops the OneShot node with name [code]id[/code].
*/
func (o *AnimationTreePlayer) OneshotNodeStop(id gdnative.String) {
	log.Println("Calling AnimationTreePlayer.OneshotNodeStop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "oneshot_node_stop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Manually recalculates the cache of track information generated from animation nodes. Needed when external sources modify the animation nodes' state.
*/
func (o *AnimationTreePlayer) RecomputeCaches() {
	log.Println("Calling AnimationTreePlayer.RecomputeCaches()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "recompute_caches", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes the animation node with name [code]id[/code].
*/
func (o *AnimationTreePlayer) RemoveNode(id gdnative.String) {
	log.Println("Calling AnimationTreePlayer.RemoveNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Resets this [code]AnimationTreePlayer[/code].
*/
func (o *AnimationTreePlayer) Reset() {
	log.Println("Calling AnimationTreePlayer.Reset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AnimationTreePlayer) SetActive(enabled gdnative.Bool) {
	log.Println("Calling AnimationTreePlayer.SetActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AnimationTreePlayer) SetAnimationProcessMode(mode gdnative.Int) {
	log.Println("Calling AnimationTreePlayer.SetAnimationProcessMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_animation_process_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AnimationTreePlayer) SetBasePath(path *NodePath) {
	log.Println("Calling AnimationTreePlayer.SetBasePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_base_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AnimationTreePlayer) SetMasterPlayer(nodepath *NodePath) {
	log.Println("Calling AnimationTreePlayer.SetMasterPlayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(nodepath)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_master_player", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns time scale value of the TimeScale node with name [code]id[/code].
*/
func (o *AnimationTreePlayer) TimescaleNodeGetScale(id gdnative.String) gdnative.Float {
	log.Println("Calling AnimationTreePlayer.TimescaleNodeGetScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "timescale_node_get_scale", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the time scale of the TimeScale node with name [code]id[/code] to [code]scale[/code]. The timescale node is used to speed [Animation]s up if the scale is above 1 or slow them down if it is below 1. If applied after a blend or mix, affects all input animations to that blend or mix.
*/
func (o *AnimationTreePlayer) TimescaleNodeSetScale(id gdnative.String, scale gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.TimescaleNodeSetScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "timescale_node_set_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the time seek value of the TimeSeek node with name [code]id[/code] to [code]seconds[/code] This functions as a seek in the [Animation] or the blend or mix of [Animation]s input in it.
*/
func (o *AnimationTreePlayer) TimeseekNodeSeek(id gdnative.String, seconds gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.TimeseekNodeSeek()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(seconds)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "timeseek_node_seek", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Deletes the input at [code]input_idx[/code] for the transition node with name [code]id[/code].
*/
func (o *AnimationTreePlayer) TransitionNodeDeleteInput(id gdnative.String, inputIdx gdnative.Int) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeDeleteInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(inputIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "transition_node_delete_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the index of the currently evaluated input for the transition node with name [code]id[/code].
*/
func (o *AnimationTreePlayer) TransitionNodeGetCurrent(id gdnative.String) gdnative.Int {
	log.Println("Calling AnimationTreePlayer.TransitionNodeGetCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "transition_node_get_current", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of inputs for the transition node with name [code]id[/code]. You can add inputs by rightclicking on the transition node.
*/
func (o *AnimationTreePlayer) TransitionNodeGetInputCount(id gdnative.String) gdnative.Int {
	log.Println("Calling AnimationTreePlayer.TransitionNodeGetInputCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "transition_node_get_input_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the cross fade time for the transition node with name [code]id[/code].
*/
func (o *AnimationTreePlayer) TransitionNodeGetXfadeTime(id gdnative.String) gdnative.Float {
	log.Println("Calling AnimationTreePlayer.TransitionNodeGetXfadeTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "transition_node_get_xfade_time", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the input at [code]input_idx[/code] on transition node with name [code]id[/code] is set to automatically advance to the next input upon completion.
*/
func (o *AnimationTreePlayer) TransitionNodeHasInputAutoAdvance(id gdnative.String, inputIdx gdnative.Int) gdnative.Bool {
	log.Println("Calling AnimationTreePlayer.TransitionNodeHasInputAutoAdvance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(inputIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "transition_node_has_input_auto_advance", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   The transition node with name [code]id[/code] sets its current input at [code]input_idx[/code].
*/
func (o *AnimationTreePlayer) TransitionNodeSetCurrent(id gdnative.String, inputIdx gdnative.Int) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeSetCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(inputIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "transition_node_set_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The transition node with name [code]id[/code] advances to its next input automatically when the input at [code]input_idx[/code] completes.
*/
func (o *AnimationTreePlayer) TransitionNodeSetInputAutoAdvance(id gdnative.String, inputIdx gdnative.Int, enable gdnative.Bool) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeSetInputAutoAdvance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(inputIdx)
	goArguments[2] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "transition_node_set_input_auto_advance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Resizes the number of inputs available for the transition node with name [code]id[/code].
*/
func (o *AnimationTreePlayer) TransitionNodeSetInputCount(id gdnative.String, count gdnative.Int) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeSetInputCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(count)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "transition_node_set_input_count", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The transition node with name [code]id[/code] sets its cross fade time to [code]time_sec[/code].
*/
func (o *AnimationTreePlayer) TransitionNodeSetXfadeTime(id gdnative.String, timeSec gdnative.Float) {
	log.Println("Calling AnimationTreePlayer.TransitionNodeSetXfadeTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(timeSec)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "transition_node_set_xfade_time", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AnimationTreePlayerImplementer is an interface for AnimationTreePlayer objects.
*/
type AnimationTreePlayerImplementer interface {
	Class
}
