package texture

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
	"github.com/shadowapex/godot-go/godot/class/control"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewTextureRectFromPointer(ptr gdnative.Pointer) *TextureRect {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := TextureRect{}
	obj.SetOwner(owner)

	return &obj

}

/*
Use TextureRect to draw icons and sprites in your User Interfaces. To create panels and menu boxes, take a look at [NinePatchFrame]. Its Stretch Mode property controls the texture's scale and placement. It can scale, tile and stay centered inside its bounding rectangle. TextureRect is one of the 5 most common nodes to create game UI.
*/
type TextureRect struct {
	control.Control
}

func (o *TextureRect) BaseClass() string {
	return "TextureRect"
}

/*
        Undocumented
	Args: [], Returns: enum.TextureRect::StretchMode
*/

/*
        Undocumented
	Args: [], Returns: Texture
*/

func (o *TextureRect) GetTexture() Texture {
	log.Println("Calling TextureRect.GetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextureRect", "get_texture")

	// Call the parent method.
	// Texture
	retPtr := NewEmptyTexture()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewTextureFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/

func (o *TextureRect) HasExpand() gdnative.Bool {
	log.Println("Calling TextureRect.HasExpand()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextureRect", "has_expand")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/

func (o *TextureRect) SetExpand(enable gdnative.Bool) {
	log.Println("Calling TextureRect.SetExpand()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextureRect", "set_expand")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false stretch_mode int}], Returns: void
*/

func (o *TextureRect) SetStretchMode(stretchMode gdnative.Int) {
	log.Println("Calling TextureRect.SetStretchMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(stretchMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextureRect", "set_stretch_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false texture Texture}], Returns: void
*/

func (o *TextureRect) SetTexture(texture Texture) {
	log.Println("Calling TextureRect.SetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetOwner())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextureRect", "set_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
