package texture

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D [Sprite] or GUI [Control].
*/
type Texture struct {
	Resource
}

func (o *Texture) BaseClass() string {
	return "Texture"
}

/*

 */
func (o *Texture) Draw(canvasItem *RID, position *Vector2, modulate *Color, transpose gdnative.Bool, normalMap *Texture) {
	log.Println("Calling Texture.Draw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(canvasItem)
	goArguments[1] = reflect.ValueOf(position)
	goArguments[2] = reflect.ValueOf(modulate)
	goArguments[3] = reflect.ValueOf(transpose)
	goArguments[4] = reflect.ValueOf(normalMap)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Texture) DrawRect(canvasItem *RID, rect *Rect2, tile gdnative.Bool, modulate *Color, transpose gdnative.Bool, normalMap *Texture) {
	log.Println("Calling Texture.DrawRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 6, 6)
	goArguments[0] = reflect.ValueOf(canvasItem)
	goArguments[1] = reflect.ValueOf(rect)
	goArguments[2] = reflect.ValueOf(tile)
	goArguments[3] = reflect.ValueOf(modulate)
	goArguments[4] = reflect.ValueOf(transpose)
	goArguments[5] = reflect.ValueOf(normalMap)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "draw_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Texture) DrawRectRegion(canvasItem *RID, rect *Rect2, srcRect *Rect2, modulate *Color, transpose gdnative.Bool, normalMap *Texture, clipUv gdnative.Bool) {
	log.Println("Calling Texture.DrawRectRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 7, 7)
	goArguments[0] = reflect.ValueOf(canvasItem)
	goArguments[1] = reflect.ValueOf(rect)
	goArguments[2] = reflect.ValueOf(srcRect)
	goArguments[3] = reflect.ValueOf(modulate)
	goArguments[4] = reflect.ValueOf(transpose)
	goArguments[5] = reflect.ValueOf(normalMap)
	goArguments[6] = reflect.ValueOf(clipUv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "draw_rect_region", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Texture) GetData() *Image {
	log.Println("Calling Texture.GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_data", goArguments, "*Image")

	returnValue := goRet.Interface().(*Image)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Texture) GetFlags() gdnative.Int {
	log.Println("Calling Texture.GetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_flags", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the texture height.
*/
func (o *Texture) GetHeight() gdnative.Int {
	log.Println("Calling Texture.GetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_height", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the texture size.
*/
func (o *Texture) GetSize() *Vector2 {
	log.Println("Calling Texture.GetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_size", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the texture width.
*/
func (o *Texture) GetWidth() gdnative.Int {
	log.Println("Calling Texture.GetWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_width", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Texture) HasAlpha() gdnative.Bool {
	log.Println("Calling Texture.HasAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_alpha", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Texture) SetFlags(flags gdnative.Int) {
	log.Println("Calling Texture.SetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_flags", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TextureImplementer is an interface for Texture objects.
*/
type TextureImplementer interface {
	Class
}
