package polygonpathfinder

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type PolygonPathFinder struct {
	Resource
}

func (o *PolygonPathFinder) BaseClass() string {
	return "PolygonPathFinder"
}

/*
   Undocumented
*/
func (o *PolygonPathFinder) X_GetData() *Dictionary {
	log.Println("Calling PolygonPathFinder.X_GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_data", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PolygonPathFinder) X_SetData(arg0 *Dictionary) {
	log.Println("Calling PolygonPathFinder.X_SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *PolygonPathFinder) FindPath(from *Vector2, to *Vector2) *PoolVector2Array {
	log.Println("Calling PolygonPathFinder.FindPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(to)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "find_path", goArguments, "*PoolVector2Array")

	returnValue := goRet.Interface().(*PoolVector2Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PolygonPathFinder) GetBounds() *Rect2 {
	log.Println("Calling PolygonPathFinder.GetBounds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bounds", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PolygonPathFinder) GetClosestPoint(point *Vector2) *Vector2 {
	log.Println("Calling PolygonPathFinder.GetClosestPoint()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(point)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_closest_point", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PolygonPathFinder) GetIntersections(from *Vector2, to *Vector2) *PoolVector2Array {
	log.Println("Calling PolygonPathFinder.GetIntersections()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(to)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_intersections", goArguments, "*PoolVector2Array")

	returnValue := goRet.Interface().(*PoolVector2Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PolygonPathFinder) GetPointPenalty(idx gdnative.Int) gdnative.Float {
	log.Println("Calling PolygonPathFinder.GetPointPenalty()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_point_penalty", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PolygonPathFinder) IsPointInside(point *Vector2) gdnative.Bool {
	log.Println("Calling PolygonPathFinder.IsPointInside()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(point)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_point_inside", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PolygonPathFinder) SetPointPenalty(idx gdnative.Int, penalty gdnative.Float) {
	log.Println("Calling PolygonPathFinder.SetPointPenalty()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(penalty)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_point_penalty", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *PolygonPathFinder) Setup(points *PoolVector2Array, connections *PoolIntArray) {
	log.Println("Calling PolygonPathFinder.Setup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(points)
	goArguments[1] = reflect.ValueOf(connections)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "setup", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PolygonPathFinderImplementer is an interface for PolygonPathFinder objects.
*/
type PolygonPathFinderImplementer interface {
	Class
}
