package translation

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Translations are resources that can be loaded/unloaded on demand. They map a string to another string.
*/
type Translation struct {
	Resource
}

func (o *Translation) BaseClass() string {
	return "Translation"
}

/*
   Undocumented
*/
func (o *Translation) X_GetMessages() *PoolStringArray {
	log.Println("Calling Translation.X_GetMessages()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_messages", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Translation) X_SetMessages(arg0 *PoolStringArray) {
	log.Println("Calling Translation.X_SetMessages()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_messages", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a message for translation.
*/
func (o *Translation) AddMessage(srcMessage gdnative.String, xlatedMessage gdnative.String) {
	log.Println("Calling Translation.AddMessage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(srcMessage)
	goArguments[1] = reflect.ValueOf(xlatedMessage)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_message", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Erase a message.
*/
func (o *Translation) EraseMessage(srcMessage gdnative.String) {
	log.Println("Calling Translation.EraseMessage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(srcMessage)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "erase_message", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Translation) GetLocale() gdnative.String {
	log.Println("Calling Translation.GetLocale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_locale", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return a message for translation.
*/
func (o *Translation) GetMessage(srcMessage gdnative.String) gdnative.String {
	log.Println("Calling Translation.GetMessage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(srcMessage)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_message", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Translation) GetMessageCount() gdnative.Int {
	log.Println("Calling Translation.GetMessageCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_message_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return all the messages (keys).
*/
func (o *Translation) GetMessageList() *PoolStringArray {
	log.Println("Calling Translation.GetMessageList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_message_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Translation) SetLocale(locale gdnative.String) {
	log.Println("Calling Translation.SetLocale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(locale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_locale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TranslationImplementer is an interface for Translation objects.
*/
type TranslationImplementer interface {
	Class
}
