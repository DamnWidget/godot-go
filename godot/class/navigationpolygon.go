package class

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewNavigationPolygonFromPointer(ptr gdnative.Pointer) NavigationPolygon {
func NewNavigationPolygonFromPointer(ptr gdnative.Pointer) NavigationPolygon {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := NavigationPolygon{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type NavigationPolygon struct {
	Resource
	owner gdnative.Object
}

func (o *NavigationPolygon) BaseClass() string {
	return "NavigationPolygon"
}

// SetBaseObject will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *NavigationPolygon) SetBaseObject(object gdnative.Object) {
	o.owner = object
}

func (o *NavigationPolygon) GetBaseObject() gdnative.Object {
	return o.owner
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *NavigationPolygon) X_GetOutlines() gdnative.Array {
	log.Println("Calling NavigationPolygon.X_GetOutlines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "_get_outlines")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *NavigationPolygon) X_GetPolygons() gdnative.Array {
	log.Println("Calling NavigationPolygon.X_GetPolygons()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "_get_polygons")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false outlines Array}], Returns: void
*/
func (o *NavigationPolygon) X_SetOutlines(outlines gdnative.Array) {
	log.Println("Calling NavigationPolygon.X_SetOutlines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(outlines)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "_set_outlines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false polygons Array}], Returns: void
*/
func (o *NavigationPolygon) X_SetPolygons(polygons gdnative.Array) {
	log.Println("Calling NavigationPolygon.X_SetPolygons()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(polygons)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "_set_polygons")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false outline PoolVector2Array}], Returns: void
*/
func (o *NavigationPolygon) AddOutline(outline gdnative.PoolVector2Array) {
	log.Println("Calling NavigationPolygon.AddOutline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(outline)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "add_outline")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false outline PoolVector2Array} { false index int}], Returns: void
*/
func (o *NavigationPolygon) AddOutlineAtIndex(outline gdnative.PoolVector2Array, index gdnative.Int) {
	log.Println("Calling NavigationPolygon.AddOutlineAtIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(outline)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "add_outline_at_index")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false polygon PoolIntArray}], Returns: void
*/
func (o *NavigationPolygon) AddPolygon(polygon gdnative.PoolIntArray) {
	log.Println("Calling NavigationPolygon.AddPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolIntArray(polygon)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "add_polygon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *NavigationPolygon) ClearOutlines() {
	log.Println("Calling NavigationPolygon.ClearOutlines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "clear_outlines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *NavigationPolygon) ClearPolygons() {
	log.Println("Calling NavigationPolygon.ClearPolygons()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "clear_polygons")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false idx int}], Returns: PoolVector2Array
*/
func (o *NavigationPolygon) GetOutline(idx gdnative.Int) gdnative.PoolVector2Array {
	log.Println("Calling NavigationPolygon.GetOutline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_outline")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [], Returns: int
*/
func (o *NavigationPolygon) GetOutlineCount() gdnative.Int {
	log.Println("Calling NavigationPolygon.GetOutlineCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_outline_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [{ false idx int}], Returns: PoolIntArray
*/
func (o *NavigationPolygon) GetPolygon(idx gdnative.Int) gdnative.PoolIntArray {
	log.Println("Calling NavigationPolygon.GetPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_polygon")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [], Returns: int
*/
func (o *NavigationPolygon) GetPolygonCount() gdnative.Int {
	log.Println("Calling NavigationPolygon.GetPolygonCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_polygon_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [], Returns: PoolVector2Array
*/
func (o *NavigationPolygon) GetVertices() gdnative.PoolVector2Array {
	log.Println("Calling NavigationPolygon.GetVertices()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_vertices")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [], Returns: void
*/
func (o *NavigationPolygon) MakePolygonsFromOutlines() {
	log.Println("Calling NavigationPolygon.MakePolygonsFromOutlines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "make_polygons_from_outlines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false idx int}], Returns: void
*/
func (o *NavigationPolygon) RemoveOutline(idx gdnative.Int) {
	log.Println("Calling NavigationPolygon.RemoveOutline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "remove_outline")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false idx int} { false outline PoolVector2Array}], Returns: void
*/
func (o *NavigationPolygon) SetOutline(idx gdnative.Int, outline gdnative.PoolVector2Array) {
	log.Println("Calling NavigationPolygon.SetOutline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromPoolVector2Array(outline)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "set_outline")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false vertices PoolVector2Array}], Returns: void
*/
func (o *NavigationPolygon) SetVertices(vertices gdnative.PoolVector2Array) {
	log.Println("Calling NavigationPolygon.SetVertices()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(vertices)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "set_vertices")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}
