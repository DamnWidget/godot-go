package gdnative

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Undocumented
*/
type GDNative struct {
	Reference
}

func (o *GDNative) BaseClass() string {
	return "GDNative"
}

/*
   Undocumented
*/
func (o *GDNative) CallNative(callingType gdnative.String, procedureName gdnative.String, arguments *Array) *Variant {
	log.Println("Calling GDNative.CallNative()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(callingType)
	goArguments[1] = reflect.ValueOf(procedureName)
	goArguments[2] = reflect.ValueOf(arguments)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "call_native", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GDNative) GetLibrary() *GDNativeLibrary {
	log.Println("Calling GDNative.GetLibrary()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_library", goArguments, "*GDNativeLibrary")

	returnValue := goRet.Interface().(*GDNativeLibrary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GDNative) Initialize() gdnative.Bool {
	log.Println("Calling GDNative.Initialize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "initialize", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GDNative) SetLibrary(library *GDNativeLibrary) {
	log.Println("Calling GDNative.SetLibrary()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(library)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_library", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GDNative) Terminate() gdnative.Bool {
	log.Println("Calling GDNative.Terminate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "terminate", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   GDNativeImplementer is an interface for GDNative objects.
*/
type GDNativeImplementer interface {
	Class
}
