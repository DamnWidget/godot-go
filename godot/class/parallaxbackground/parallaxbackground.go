package parallaxbackground

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A ParallaxBackground uses one or more [ParallaxLayer] child nodes to create a parallax effect. Each [ParallaxLayer] can move at a different speed using [member ParallaxLayer.motion_offset]. This creates an illusion of depth in a 2D game. If not used with a [Camera2D], you must manually calculate the [member scroll_offset].
*/
type ParallaxBackground struct {
	CanvasLayer
}

func (o *ParallaxBackground) BaseClass() string {
	return "ParallaxBackground"
}

/*
   Undocumented
*/
func (o *ParallaxBackground) X_CameraMoved(arg0 *Transform2D, arg1 *Vector2) {
	log.Println("Calling ParallaxBackground.X_CameraMoved()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(arg0)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_camera_moved", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ParallaxBackground) GetLimitBegin() *Vector2 {
	log.Println("Calling ParallaxBackground.GetLimitBegin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_limit_begin", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ParallaxBackground) GetLimitEnd() *Vector2 {
	log.Println("Calling ParallaxBackground.GetLimitEnd()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_limit_end", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ParallaxBackground) GetScrollBaseOffset() *Vector2 {
	log.Println("Calling ParallaxBackground.GetScrollBaseOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scroll_base_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ParallaxBackground) GetScrollBaseScale() *Vector2 {
	log.Println("Calling ParallaxBackground.GetScrollBaseScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scroll_base_scale", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ParallaxBackground) GetScrollOffset() *Vector2 {
	log.Println("Calling ParallaxBackground.GetScrollOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scroll_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ParallaxBackground) IsIgnoreCameraZoom() gdnative.Bool {
	log.Println("Calling ParallaxBackground.IsIgnoreCameraZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_ignore_camera_zoom", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ParallaxBackground) SetIgnoreCameraZoom(ignore gdnative.Bool) {
	log.Println("Calling ParallaxBackground.SetIgnoreCameraZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ignore)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_ignore_camera_zoom", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ParallaxBackground) SetLimitBegin(ofs *Vector2) {
	log.Println("Calling ParallaxBackground.SetLimitBegin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_limit_begin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ParallaxBackground) SetLimitEnd(ofs *Vector2) {
	log.Println("Calling ParallaxBackground.SetLimitEnd()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_limit_end", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ParallaxBackground) SetScrollBaseOffset(ofs *Vector2) {
	log.Println("Calling ParallaxBackground.SetScrollBaseOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_scroll_base_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ParallaxBackground) SetScrollBaseScale(scale *Vector2) {
	log.Println("Calling ParallaxBackground.SetScrollBaseScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_scroll_base_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ParallaxBackground) SetScrollOffset(ofs *Vector2) {
	log.Println("Calling ParallaxBackground.SetScrollOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_scroll_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ParallaxBackgroundImplementer is an interface for ParallaxBackground objects.
*/
type ParallaxBackgroundImplementer interface {
	Class
}
