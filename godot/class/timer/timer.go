package timer

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or "one shot" mode.
*/
type Timer struct {
	Node
}

func (o *Timer) BaseClass() string {
	return "Timer"
}

/*
   Undocumented
*/
func (o *Timer) GetTimeLeft() gdnative.Float {
	log.Println("Calling Timer.GetTimeLeft()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_time_left", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Timer) GetTimerProcessMode() gdnative.Int {
	log.Println("Calling Timer.GetTimerProcessMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_timer_process_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Timer) GetWaitTime() gdnative.Float {
	log.Println("Calling Timer.GetWaitTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_wait_time", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Timer) HasAutostart() gdnative.Bool {
	log.Println("Calling Timer.HasAutostart()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_autostart", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Timer) IsOneShot() gdnative.Bool {
	log.Println("Calling Timer.IsOneShot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_one_shot", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Timer) IsPaused() gdnative.Bool {
	log.Println("Calling Timer.IsPaused()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_paused", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the timer is stopped.
*/
func (o *Timer) IsStopped() gdnative.Bool {
	log.Println("Calling Timer.IsStopped()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_stopped", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Timer) SetAutostart(enable gdnative.Bool) {
	log.Println("Calling Timer.SetAutostart()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_autostart", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Timer) SetOneShot(enable gdnative.Bool) {
	log.Println("Calling Timer.SetOneShot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_one_shot", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Timer) SetPaused(paused gdnative.Bool) {
	log.Println("Calling Timer.SetPaused()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(paused)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_paused", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Timer) SetTimerProcessMode(mode gdnative.Int) {
	log.Println("Calling Timer.SetTimerProcessMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_timer_process_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Timer) SetWaitTime(timeSec gdnative.Float) {
	log.Println("Calling Timer.SetWaitTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(timeSec)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_wait_time", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Starts the timer. This also resets the remaining time to [code]wait_time[/code]. Note: this method will not resume a paused timer. See [method set_paused].
*/
func (o *Timer) Start() {
	log.Println("Calling Timer.Start()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "start", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Stop (cancel) the Timer.
*/
func (o *Timer) Stop() {
	log.Println("Calling Timer.Stop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "stop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TimerImplementer is an interface for Timer objects.
*/
type TimerImplementer interface {
	Class
}
