package scenestate

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Maintains a list of resources, nodes, exported and overridden properties, and built-in scripts associated with a scene.
*/
type SceneState struct {
	Reference
}

func (o *SceneState) BaseClass() string {
	return "SceneState"
}

/*
   Returns the list of bound parameters for the signal at [code]idx[/code].
*/
func (o *SceneState) GetConnectionBinds(idx gdnative.Int) *Array {
	log.Println("Calling SceneState.GetConnectionBinds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_binds", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of signal connections in the scene.
*/
func (o *SceneState) GetConnectionCount() gdnative.Int {
	log.Println("Calling SceneState.GetConnectionCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the flags for the signal at [code]idx[/code]. See [Object]'s [code]CONNECT_*[/code] flags.
*/
func (o *SceneState) GetConnectionFlags(idx gdnative.Int) gdnative.Int {
	log.Println("Calling SceneState.GetConnectionFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_flags", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the method connected to the signal at [code]idx[/code].
*/
func (o *SceneState) GetConnectionMethod(idx gdnative.Int) gdnative.String {
	log.Println("Calling SceneState.GetConnectionMethod()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_method", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the name of the signal at [code]idx[/code].
*/
func (o *SceneState) GetConnectionSignal(idx gdnative.Int) gdnative.String {
	log.Println("Calling SceneState.GetConnectionSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_signal", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the path to the node that owns the signal at [code]idx[/code], relative to the root node.
*/
func (o *SceneState) GetConnectionSource(idx gdnative.Int) *NodePath {
	log.Println("Calling SceneState.GetConnectionSource()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_source", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the path to the node that owns the method connected to the signal at [code]idx[/code], relative to the root node.
*/
func (o *SceneState) GetConnectionTarget(idx gdnative.Int) *NodePath {
	log.Println("Calling SceneState.GetConnectionTarget()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_target", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of nodes in the scene.
*/
func (o *SceneState) GetNodeCount() gdnative.Int {
	log.Println("Calling SceneState.GetNodeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the list of group names associated with the node at [code]idx[/code].
*/
func (o *SceneState) GetNodeGroups(idx gdnative.Int) *PoolStringArray {
	log.Println("Calling SceneState.GetNodeGroups()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_groups", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *SceneState) GetNodeIndex(idx gdnative.Int) gdnative.Int {
	log.Println("Calling SceneState.GetNodeIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_index", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the scene for the node at [code]idx[/code] or [code]null[/code] if the node is not an instance.
*/
func (o *SceneState) GetNodeInstance(idx gdnative.Int) *PackedScene {
	log.Println("Calling SceneState.GetNodeInstance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_instance", goArguments, "*PackedScene")

	returnValue := goRet.Interface().(*PackedScene)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the path to the represented scene file if the node at [code]idx[/code] is an [InstancePlaceholder].
*/
func (o *SceneState) GetNodeInstancePlaceholder(idx gdnative.Int) gdnative.String {
	log.Println("Calling SceneState.GetNodeInstancePlaceholder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_instance_placeholder", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the name of the node at [code]idx[/code].
*/
func (o *SceneState) GetNodeName(idx gdnative.Int) gdnative.String {
	log.Println("Calling SceneState.GetNodeName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the path to the owner of the node at [code]idx[/code], relative to the root node.
*/
func (o *SceneState) GetNodeOwnerPath(idx gdnative.Int) *NodePath {
	log.Println("Calling SceneState.GetNodeOwnerPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_owner_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the path to the node at [code]idx[/code].
*/
func (o *SceneState) GetNodePath(idx gdnative.Int, forParent gdnative.Bool) *NodePath {
	log.Println("Calling SceneState.GetNodePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(forParent)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of exported or overridden properties for the node at [code]idx[/code].
*/
func (o *SceneState) GetNodePropertyCount(idx gdnative.Int) gdnative.Int {
	log.Println("Calling SceneState.GetNodePropertyCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_property_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the name of the property at [code]prop_idx[/code] for the node at [code]idx[/code].
*/
func (o *SceneState) GetNodePropertyName(idx gdnative.Int, propIdx gdnative.Int) gdnative.String {
	log.Println("Calling SceneState.GetNodePropertyName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(propIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_property_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the value of the property at [code]prop_idx[/code] for the node at [code]idx[/code].
*/
func (o *SceneState) GetNodePropertyValue(idx gdnative.Int, propIdx gdnative.Int) *Variant {
	log.Println("Calling SceneState.GetNodePropertyValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(propIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_property_value", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the type of the node at [code]idx[/code].
*/
func (o *SceneState) GetNodeType(idx gdnative.Int) gdnative.String {
	log.Println("Calling SceneState.GetNodeType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_type", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the node at [code]idx[/code] is an [InstancePlaceholder].
*/
func (o *SceneState) IsNodeInstancePlaceholder(idx gdnative.Int) gdnative.Bool {
	log.Println("Calling SceneState.IsNodeInstancePlaceholder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_node_instance_placeholder", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   SceneStateImplementer is an interface for SceneState objects.
*/
type SceneStateImplementer interface {
	Class
}
