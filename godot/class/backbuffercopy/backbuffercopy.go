package backbuffercopy

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Node for back-buffering the currently displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Accessing this buffer is done with the texscreen() shader instruction.
*/
type BackBufferCopy struct {
	Node2D
}

func (o *BackBufferCopy) BaseClass() string {
	return "BackBufferCopy"
}

/*
   Undocumented
*/
func (o *BackBufferCopy) GetCopyMode() gdnative.Int {
	log.Println("Calling BackBufferCopy.GetCopyMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_copy_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BackBufferCopy) GetRect() *Rect2 {
	log.Println("Calling BackBufferCopy.GetRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_rect", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BackBufferCopy) SetCopyMode(copyMode gdnative.Int) {
	log.Println("Calling BackBufferCopy.SetCopyMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(copyMode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_copy_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BackBufferCopy) SetRect(rect *Rect2) {
	log.Println("Calling BackBufferCopy.SetRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rect)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   BackBufferCopyImplementer is an interface for BackBufferCopy objects.
*/
type BackBufferCopyImplementer interface {
	Class
}
