package immediategeometry

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Draws simple geometry from code. Uses a drawing mode similar to OpenGL 1.x.
*/
type ImmediateGeometry struct {
	GeometryInstance
}

func (o *ImmediateGeometry) BaseClass() string {
	return "ImmediateGeometry"
}

/*
   Simple helper to draw a uvsphere, with given latitudes, longitude and radius.
*/
func (o *ImmediateGeometry) AddSphere(lats gdnative.Int, lons gdnative.Int, radius gdnative.Float, addUv gdnative.Bool) {
	log.Println("Calling ImmediateGeometry.AddSphere()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(lats)
	goArguments[1] = reflect.ValueOf(lons)
	goArguments[2] = reflect.ValueOf(radius)
	goArguments[3] = reflect.ValueOf(addUv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_sphere", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a vertex with the currently set color/uv/etc.
*/
func (o *ImmediateGeometry) AddVertex(position *Vector3) {
	log.Println("Calling ImmediateGeometry.AddVertex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_vertex", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Begin drawing (And optionally pass a texture override). When done call end(). For more information on how this works, search for glBegin() glEnd() references. For the type of primitive, use the [Mesh].PRIMITIVE_* enumerations.
*/
func (o *ImmediateGeometry) Begin(primitive gdnative.Int, texture *Texture) {
	log.Println("Calling ImmediateGeometry.Begin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(primitive)
	goArguments[1] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "begin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears everything that was drawn using begin/end.
*/
func (o *ImmediateGeometry) Clear() {
	log.Println("Calling ImmediateGeometry.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Ends a drawing context and displays the results.
*/
func (o *ImmediateGeometry) End() {
	log.Println("Calling ImmediateGeometry.End()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "end", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The current drawing color.
*/
func (o *ImmediateGeometry) SetColor(color *Color) {
	log.Println("Calling ImmediateGeometry.SetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The next vertex's normal.
*/
func (o *ImmediateGeometry) SetNormal(normal *Vector3) {
	log.Println("Calling ImmediateGeometry.SetNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(normal)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_normal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The next vertex's tangent (and binormal facing).
*/
func (o *ImmediateGeometry) SetTangent(tangent *Plane) {
	log.Println("Calling ImmediateGeometry.SetTangent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tangent)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tangent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The next vertex's UV.
*/
func (o *ImmediateGeometry) SetUv(uv *Vector2) {
	log.Println("Calling ImmediateGeometry.SetUv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(uv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_uv", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The next vertex's second layer UV.
*/
func (o *ImmediateGeometry) SetUv2(uv *Vector2) {
	log.Println("Calling ImmediateGeometry.SetUv2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(uv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_uv2", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ImmediateGeometryImplementer is an interface for ImmediateGeometry objects.
*/
type ImmediateGeometryImplementer interface {
	Class
}
