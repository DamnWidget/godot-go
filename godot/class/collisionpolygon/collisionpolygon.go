package collisionpolygon

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Allows editing a collision polygon's vertices on a selected plane. Can also set a depth perpendicular to that plane. This class is only available in the editor. It will not appear in the scene tree at runtime. Creates a [Shape] for gameplay. Properties modified during gameplay will have no effect.
*/
type CollisionPolygon struct {
	Spatial
}

func (o *CollisionPolygon) BaseClass() string {
	return "CollisionPolygon"
}

/*
   Undocumented
*/
func (o *CollisionPolygon) GetDepth() gdnative.Float {
	log.Println("Calling CollisionPolygon.GetDepth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_depth", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CollisionPolygon) GetPolygon() *PoolVector2Array {
	log.Println("Calling CollisionPolygon.GetPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_polygon", goArguments, "*PoolVector2Array")

	returnValue := goRet.Interface().(*PoolVector2Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CollisionPolygon) IsDisabled() gdnative.Bool {
	log.Println("Calling CollisionPolygon.IsDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_disabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CollisionPolygon) SetDepth(depth gdnative.Float) {
	log.Println("Calling CollisionPolygon.SetDepth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(depth)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_depth", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *CollisionPolygon) SetDisabled(disabled gdnative.Bool) {
	log.Println("Calling CollisionPolygon.SetDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *CollisionPolygon) SetPolygon(polygon *PoolVector2Array) {
	log.Println("Calling CollisionPolygon.SetPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(polygon)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_polygon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CollisionPolygonImplementer is an interface for CollisionPolygon objects.
*/
type CollisionPolygonImplementer interface {
	Class
}
