package buttongroup

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"

	"github.com/shadowapex/godot-go/godot/class/basebutton"
	"github.com/shadowapex/godot-go/godot/class/resource"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewButtonGroupFromPointer(ptr gdnative.Pointer) *ButtonGroup {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ButtonGroup{}
	obj.SetOwner(owner)

	return &obj

}

/*
Group of [Button]. All direct and indirect children buttons become radios. Only one allows being pressed. [member BaseButton.toggle_mode] should be [code]true[/code].
*/
type ButtonGroup struct {
	resource.Resource
}

func (o *ButtonGroup) BaseClass() string {
	return "ButtonGroup"
}

/*
        Return the pressed button.
	Args: [], Returns: BaseButton
*/

func (o *ButtonGroup) GetPressedButton() basebutton.BaseButton {
	log.Println("Calling ButtonGroup.GetPressedButton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ButtonGroup", "get_pressed_button")

	// Call the parent method.
	// BaseButton
	retPtr := basebutton.NewEmptyBaseButton()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := basebutton.NewBaseButtonFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}
