package gridcontainer

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Grid container will arrange its children in a grid like structure, the grid columns are specified using the [method set_columns] method and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.
*/
type GridContainer struct {
	Container
}

func (o *GridContainer) BaseClass() string {
	return "GridContainer"
}

/*
   Undocumented
*/
func (o *GridContainer) GetColumns() gdnative.Int {
	log.Println("Calling GridContainer.GetColumns()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_columns", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GridContainer) SetColumns(columns gdnative.Int) {
	log.Println("Calling GridContainer.SetColumns()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(columns)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_columns", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GridContainerImplementer is an interface for GridContainer objects.
*/
type GridContainerImplementer interface {
	Class
}
