package viewport

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type ViewportTexture struct {
	Texture
}

func (o *ViewportTexture) BaseClass() string {
	return "ViewportTexture"
}

/*
   Undocumented
*/
func (o *ViewportTexture) GetViewportPathInScene() *NodePath {
	log.Println("Calling ViewportTexture.GetViewportPathInScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_viewport_path_in_scene", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ViewportTexture) SetViewportPathInScene(path *NodePath) {
	log.Println("Calling ViewportTexture.SetViewportPathInScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_viewport_path_in_scene", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ViewportTextureImplementer is an interface for ViewportTexture objects.
*/
type ViewportTextureImplementer interface {
	Class
}
