package viewport

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"

	"github.com/shadowapex/godot-go/godot/class/container"
	"github.com/shadowapex/godot-go/godot/class/inputevent"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewViewportContainerFromPointer(ptr gdnative.Pointer) *ViewportContainer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ViewportContainer{}
	obj.SetOwner(owner)

	return &obj

}

/*

 */
type ViewportContainer struct {
	container.Container
}

func (o *ViewportContainer) BaseClass() string {
	return "ViewportContainer"
}

/*
        Undocumented
	Args: [{ false event InputEvent}], Returns: void
*/

func (o *ViewportContainer) X_Input(event inputevent.InputEvent) {
	log.Println("Calling ViewportContainer.X_Input()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(event.GetOwner())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ViewportContainer", "_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: int
*/

func (o *ViewportContainer) GetStretchShrink() gdnative.Int {
	log.Println("Calling ViewportContainer.GetStretchShrink()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ViewportContainer", "get_stretch_shrink")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/

func (o *ViewportContainer) IsStretchEnabled() gdnative.Bool {
	log.Println("Calling ViewportContainer.IsStretchEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ViewportContainer", "is_stretch_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/

func (o *ViewportContainer) SetStretch(enable gdnative.Bool) {
	log.Println("Calling ViewportContainer.SetStretch()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ViewportContainer", "set_stretch")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount int}], Returns: void
*/

func (o *ViewportContainer) SetStretchShrink(amount gdnative.Int) {
	log.Println("Calling ViewportContainer.SetStretchShrink()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ViewportContainer", "set_stretch_shrink")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
