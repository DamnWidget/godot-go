package class

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewGDScriptFromPointer(ptr gdnative.Pointer) GDScript {
func NewGDScriptFromPointer(ptr gdnative.Pointer) GDScript {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := GDScript{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type GDScript struct {
	Script
	owner gdnative.Object
}

func (o *GDScript) BaseClass() string {
	return "GDScript"
}

/*
        Undocumented
	Args: [], Returns: PoolByteArray
*/
func (o *GDScript) GetAsByteCode() gdnative.PoolByteArray {
	//log.Println("Calling GDScript.GetAsByteCode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GDScript", "get_as_byte_code")

	// Call the parent method.
	// PoolByteArray
	retPtr := gdnative.NewEmptyPoolByteArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolByteArrayFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Object
*/
func (o *GDScript) New() Object {
	//log.Println("Calling GDScript.New()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GDScript", "new")

	// Call the parent method.
	// Object
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewObjectFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}
