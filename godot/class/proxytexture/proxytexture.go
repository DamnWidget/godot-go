package proxytexture

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type ProxyTexture struct {
	Texture
}

func (o *ProxyTexture) BaseClass() string {
	return "ProxyTexture"
}

/*
   Undocumented
*/
func (o *ProxyTexture) GetBase() *Texture {
	log.Println("Calling ProxyTexture.GetBase()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_base", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ProxyTexture) SetBase(base *Texture) {
	log.Println("Calling ProxyTexture.SetBase()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(base)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_base", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ProxyTextureImplementer is an interface for ProxyTexture objects.
*/
type ProxyTextureImplementer interface {
	Class
}
