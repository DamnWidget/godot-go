package bakedlightmapdata

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type BakedLightmapData struct {
	Resource
}

func (o *BakedLightmapData) BaseClass() string {
	return "BakedLightmapData"
}

/*
   Undocumented
*/
func (o *BakedLightmapData) X_GetUserData() *Array {
	log.Println("Calling BakedLightmapData.X_GetUserData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_user_data", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmapData) X_SetUserData(data *Array) {
	log.Println("Calling BakedLightmapData.X_SetUserData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_user_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *BakedLightmapData) AddUser(path *NodePath, lightmap *Texture, instance gdnative.Int) {
	log.Println("Calling BakedLightmapData.AddUser()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(lightmap)
	goArguments[2] = reflect.ValueOf(instance)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_user", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *BakedLightmapData) ClearUsers() {
	log.Println("Calling BakedLightmapData.ClearUsers()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_users", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmapData) GetBounds() *AABB {
	log.Println("Calling BakedLightmapData.GetBounds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bounds", goArguments, "*AABB")

	returnValue := goRet.Interface().(*AABB)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmapData) GetCellSpaceTransform() *Transform {
	log.Println("Calling BakedLightmapData.GetCellSpaceTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_cell_space_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmapData) GetCellSubdiv() gdnative.Int {
	log.Println("Calling BakedLightmapData.GetCellSubdiv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_cell_subdiv", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmapData) GetEnergy() gdnative.Float {
	log.Println("Calling BakedLightmapData.GetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_energy", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmapData) GetOctree() *PoolByteArray {
	log.Println("Calling BakedLightmapData.GetOctree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_octree", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *BakedLightmapData) GetUserCount() gdnative.Int {
	log.Println("Calling BakedLightmapData.GetUserCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_user_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *BakedLightmapData) GetUserLightmap(userIdx gdnative.Int) *Texture {
	log.Println("Calling BakedLightmapData.GetUserLightmap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(userIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_user_lightmap", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *BakedLightmapData) GetUserPath(userIdx gdnative.Int) *NodePath {
	log.Println("Calling BakedLightmapData.GetUserPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(userIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_user_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmapData) SetBounds(bounds *AABB) {
	log.Println("Calling BakedLightmapData.SetBounds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bounds)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bounds", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmapData) SetCellSpaceTransform(xform *Transform) {
	log.Println("Calling BakedLightmapData.SetCellSpaceTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(xform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_cell_space_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmapData) SetCellSubdiv(cellSubdiv gdnative.Int) {
	log.Println("Calling BakedLightmapData.SetCellSubdiv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(cellSubdiv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_cell_subdiv", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmapData) SetEnergy(energy gdnative.Float) {
	log.Println("Calling BakedLightmapData.SetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmapData) SetOctree(octree *PoolByteArray) {
	log.Println("Calling BakedLightmapData.SetOctree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(octree)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_octree", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   BakedLightmapDataImplementer is an interface for BakedLightmapData objects.
*/
type BakedLightmapDataImplementer interface {
	Class
}
