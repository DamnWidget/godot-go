package conetwistjoint

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
The joint can rotate the bodies across an axis defined by the local x-axes of the [Joint]. The twist axis is initiated as the x-axis of the [Joint]. Once the Bodies swing, the twist axis is calculated as the middle of the x-axes of the Joint in the local space of the two Bodies.
*/
type ConeTwistJoint struct {
	Joint
}

func (o *ConeTwistJoint) BaseClass() string {
	return "ConeTwistJoint"
}

/*
   Undocumented
*/
func (o *ConeTwistJoint) X_GetSwingSpan() gdnative.Float {
	log.Println("Calling ConeTwistJoint.X_GetSwingSpan()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_swing_span", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ConeTwistJoint) X_GetTwistSpan() gdnative.Float {
	log.Println("Calling ConeTwistJoint.X_GetTwistSpan()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_twist_span", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ConeTwistJoint) X_SetSwingSpan(swingSpan gdnative.Float) {
	log.Println("Calling ConeTwistJoint.X_SetSwingSpan()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(swingSpan)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_swing_span", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ConeTwistJoint) X_SetTwistSpan(twistSpan gdnative.Float) {
	log.Println("Calling ConeTwistJoint.X_SetTwistSpan()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(twistSpan)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_twist_span", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ConeTwistJoint) GetParam(param gdnative.Int) gdnative.Float {
	log.Println("Calling ConeTwistJoint.GetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ConeTwistJoint) SetParam(param gdnative.Int, value gdnative.Float) {
	log.Println("Calling ConeTwistJoint.SetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ConeTwistJointImplementer is an interface for ConeTwistJoint objects.
*/
type ConeTwistJointImplementer interface {
	Class
}
