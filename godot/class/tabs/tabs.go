package tabs

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interact with children.
*/
type Tabs struct {
	Control
}

func (o *Tabs) BaseClass() string {
	return "Tabs"
}

/*
   Undocumented
*/
func (o *Tabs) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling Tabs.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) AddTab(title gdnative.String, icon *Texture) {
	log.Println("Calling Tabs.AddTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(title)
	goArguments[1] = reflect.ValueOf(icon)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) EnsureTabVisible(idx gdnative.Int) {
	log.Println("Calling Tabs.EnsureTabVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "ensure_tab_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tabs) GetCurrentTab() gdnative.Int {
	log.Println("Calling Tabs.GetCurrentTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_current_tab", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetOffsetButtonsVisible() gdnative.Bool {
	log.Println("Calling Tabs.GetOffsetButtonsVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_offset_buttons_visible", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tabs) GetScrollingEnabled() gdnative.Bool {
	log.Println("Calling Tabs.GetScrollingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scrolling_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tabs) GetTabAlign() gdnative.Int {
	log.Println("Calling Tabs.GetTabAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_align", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tabs) GetTabCloseDisplayPolicy() gdnative.Int {
	log.Println("Calling Tabs.GetTabCloseDisplayPolicy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_close_display_policy", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabCount() gdnative.Int {
	log.Println("Calling Tabs.GetTabCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabDisabled(tabIdx gdnative.Int) gdnative.Bool {
	log.Println("Calling Tabs.GetTabDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_disabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabIcon(tabIdx gdnative.Int) *Texture {
	log.Println("Calling Tabs.GetTabIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_icon", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabOffset() gdnative.Int {
	log.Println("Calling Tabs.GetTabOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_offset", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns tab [Rect2] with local position and size.
*/
func (o *Tabs) GetTabRect(tabIdx gdnative.Int) *Rect2 {
	log.Println("Calling Tabs.GetTabRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_rect", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tabs) GetTabTitle(tabIdx gdnative.Int) gdnative.String {
	log.Println("Calling Tabs.GetTabTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_title", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Rearrange tab.
*/
func (o *Tabs) MoveTab(from gdnative.Int, to gdnative.Int) {
	log.Println("Calling Tabs.MoveTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(to)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "move_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) RemoveTab(tabIdx gdnative.Int) {
	log.Println("Calling Tabs.RemoveTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tabs) SetCurrentTab(tabIdx gdnative.Int) {
	log.Println("Calling Tabs.SetCurrentTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_current_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tabs) SetScrollingEnabled(enabled gdnative.Bool) {
	log.Println("Calling Tabs.SetScrollingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_scrolling_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tabs) SetTabAlign(align gdnative.Int) {
	log.Println("Calling Tabs.SetTabAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tabs) SetTabCloseDisplayPolicy(policy gdnative.Int) {
	log.Println("Calling Tabs.SetTabCloseDisplayPolicy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(policy)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_close_display_policy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) SetTabDisabled(tabIdx gdnative.Int, disabled gdnative.Bool) {
	log.Println("Calling Tabs.SetTabDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) SetTabIcon(tabIdx gdnative.Int, icon *Texture) {
	log.Println("Calling Tabs.SetTabIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(icon)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Tabs) SetTabTitle(tabIdx gdnative.Int, title gdnative.String) {
	log.Println("Calling Tabs.SetTabTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(title)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_title", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TabsImplementer is an interface for Tabs objects.
*/
type TabsImplementer interface {
	Class
}
