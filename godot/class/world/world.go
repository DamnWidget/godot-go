package world

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"

	"github.com/shadowapex/godot-go/godot/class/physics"
	"github.com/shadowapex/godot-go/godot/class/resource"

	"github.com/shadowapex/godot-go/godot/class/environment"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewWorldFromPointer(ptr gdnative.Pointer) *World {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := World{}
	obj.SetOwner(owner)

	return &obj

}

/*
Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world.
*/
type World struct {
	resource.Resource
}

func (o *World) BaseClass() string {
	return "World"
}

/*
        Undocumented
	Args: [], Returns: PhysicsDirectSpaceState
*/

func (o *World) GetDirectSpaceState() physics.PhysicsDirectSpaceState {
	log.Println("Calling World.GetDirectSpaceState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_direct_space_state")

	// Call the parent method.
	// PhysicsDirectSpaceState
	retPtr := physics.NewEmptyPhysicsDirectSpaceState()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := physics.NewPhysicsDirectSpaceStateFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Environment
*/

func (o *World) GetEnvironment() environment.Environment {
	log.Println("Calling World.GetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_environment")

	// Call the parent method.
	// Environment
	retPtr := environment.NewEmptyEnvironment()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := environment.NewEnvironmentFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Environment
*/

func (o *World) GetFallbackEnvironment() environment.Environment {
	log.Println("Calling World.GetFallbackEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_fallback_environment")

	// Call the parent method.
	// Environment
	retPtr := environment.NewEmptyEnvironment()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := environment.NewEnvironmentFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: RID
*/

func (o *World) GetScenario() gdnative.RID {
	log.Println("Calling World.GetScenario()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_scenario")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: RID
*/

func (o *World) GetSpace() gdnative.RID {
	log.Println("Calling World.GetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "get_space")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false env Environment}], Returns: void
*/

func (o *World) SetEnvironment(env environment.Environment) {
	log.Println("Calling World.SetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(env.GetOwner())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "set_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false env Environment}], Returns: void
*/

func (o *World) SetFallbackEnvironment(env environment.Environment) {
	log.Println("Calling World.SetFallbackEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(env.GetOwner())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("World", "set_fallback_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
