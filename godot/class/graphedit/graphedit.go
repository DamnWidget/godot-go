package graphedit

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default. It is greatly advised to enable low processor usage mode (see [method OS.set_low_processor_usage_mode]) when using GraphEdits.
*/
type GraphEdit struct {
	Control
}

func (o *GraphEdit) BaseClass() string {
	return "GraphEdit"
}

/*
   Undocumented
*/
func (o *GraphEdit) X_ConnectionsLayerDraw() {
	log.Println("Calling GraphEdit.X_ConnectionsLayerDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_connections_layer_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_GraphNodeMoved(arg0 *Object) {
	log.Println("Calling GraphEdit.X_GraphNodeMoved()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_graph_node_moved", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_GraphNodeRaised(arg0 *Object) {
	log.Println("Calling GraphEdit.X_GraphNodeRaised()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_graph_node_raised", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling GraphEdit.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_ScrollMoved(arg0 gdnative.Float) {
	log.Println("Calling GraphEdit.X_ScrollMoved()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_scroll_moved", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_SnapToggled() {
	log.Println("Calling GraphEdit.X_SnapToggled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_snap_toggled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_SnapValueChanged(arg0 gdnative.Float) {
	log.Println("Calling GraphEdit.X_SnapValueChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_snap_value_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_TopLayerDraw() {
	log.Println("Calling GraphEdit.X_TopLayerDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_top_layer_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_TopLayerInput(arg0 *InputEvent) {
	log.Println("Calling GraphEdit.X_TopLayerInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_top_layer_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_UpdateScrollOffset() {
	log.Println("Calling GraphEdit.X_UpdateScrollOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_update_scroll_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_ZoomMinus() {
	log.Println("Calling GraphEdit.X_ZoomMinus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_zoom_minus", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_ZoomPlus() {
	log.Println("Calling GraphEdit.X_ZoomPlus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_zoom_plus", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) X_ZoomReset() {
	log.Println("Calling GraphEdit.X_ZoomReset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_zoom_reset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Makes possible the connection between two different slot types. The type is defined with the [method GraphNode.set_slot] method.
*/
func (o *GraphEdit) AddValidConnectionType(fromType gdnative.Int, toType gdnative.Int) {
	log.Println("Calling GraphEdit.AddValidConnectionType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(fromType)
	goArguments[1] = reflect.ValueOf(toType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_valid_connection_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Makes possible to disconnect nodes when dragging from the slot at the left if it has the specified type.
*/
func (o *GraphEdit) AddValidLeftDisconnectType(aType gdnative.Int) {
	log.Println("Calling GraphEdit.AddValidLeftDisconnectType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_valid_left_disconnect_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Makes possible to disconnect nodes when dragging from the slot at the right if it has the specified type.
*/
func (o *GraphEdit) AddValidRightDisconnectType(aType gdnative.Int) {
	log.Println("Calling GraphEdit.AddValidRightDisconnectType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_valid_right_disconnect_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove all connections between nodes.
*/
func (o *GraphEdit) ClearConnections() {
	log.Println("Calling GraphEdit.ClearConnections()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_connections", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.
*/
func (o *GraphEdit) ConnectNode(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int) gdnative.Int {
	log.Println("Calling GraphEdit.ConnectNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(fromPort)
	goArguments[2] = reflect.ValueOf(to)
	goArguments[3] = reflect.ValueOf(toPort)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "connect_node", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.
*/
func (o *GraphEdit) DisconnectNode(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int) {
	log.Println("Calling GraphEdit.DisconnectNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(fromPort)
	goArguments[2] = reflect.ValueOf(to)
	goArguments[3] = reflect.ValueOf(toPort)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "disconnect_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return an Array containing the list of connections. A connection consists in a structure of the form {from_slot: 0, from: "GraphNode name 0", to_slot: 1, to: "GraphNode name 1" }
*/
func (o *GraphEdit) GetConnectionList() *Array {
	log.Println("Calling GraphEdit.GetConnectionList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_list", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphEdit) GetScrollOfs() *Vector2 {
	log.Println("Calling GraphEdit.GetScrollOfs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scroll_ofs", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphEdit) GetSnap() gdnative.Int {
	log.Println("Calling GraphEdit.GetSnap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_snap", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphEdit) GetZoom() gdnative.Float {
	log.Println("Calling GraphEdit.GetZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_zoom", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.
*/
func (o *GraphEdit) IsNodeConnected(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int) gdnative.Bool {
	log.Println("Calling GraphEdit.IsNodeConnected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(fromPort)
	goArguments[2] = reflect.ValueOf(to)
	goArguments[3] = reflect.ValueOf(toPort)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_node_connected", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphEdit) IsRightDisconnectsEnabled() gdnative.Bool {
	log.Println("Calling GraphEdit.IsRightDisconnectsEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_right_disconnects_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphEdit) IsUsingSnap() gdnative.Bool {
	log.Println("Calling GraphEdit.IsUsingSnap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_using_snap", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether it's possible to connect slots of the specified types.
*/
func (o *GraphEdit) IsValidConnectionType(fromType gdnative.Int, toType gdnative.Int) gdnative.Bool {
	log.Println("Calling GraphEdit.IsValidConnectionType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(fromType)
	goArguments[1] = reflect.ValueOf(toType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_valid_connection_type", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Makes it not possible to connect between two different slot types. The type is defined with the [method GraphNode.set_slot] method.
*/
func (o *GraphEdit) RemoveValidConnectionType(fromType gdnative.Int, toType gdnative.Int) {
	log.Println("Calling GraphEdit.RemoveValidConnectionType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(fromType)
	goArguments[1] = reflect.ValueOf(toType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_valid_connection_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes the possibility to disconnect nodes when dragging from the slot at the left if it has the specified type.
*/
func (o *GraphEdit) RemoveValidLeftDisconnectType(aType gdnative.Int) {
	log.Println("Calling GraphEdit.RemoveValidLeftDisconnectType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_valid_left_disconnect_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes the possibility to disconnect nodes when dragging from the slot at the right if it has the specified type.
*/
func (o *GraphEdit) RemoveValidRightDisconnectType(aType gdnative.Int) {
	log.Println("Calling GraphEdit.RemoveValidRightDisconnectType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_valid_right_disconnect_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) SetRightDisconnects(enable gdnative.Bool) {
	log.Println("Calling GraphEdit.SetRightDisconnects()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_right_disconnects", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) SetScrollOfs(ofs *Vector2) {
	log.Println("Calling GraphEdit.SetScrollOfs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_scroll_ofs", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the specified [code]node[/code] as the one selected.
*/
func (o *GraphEdit) SetSelected(node *Object) {
	log.Println("Calling GraphEdit.SetSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) SetSnap(pixels gdnative.Int) {
	log.Println("Calling GraphEdit.SetSnap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pixels)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_snap", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) SetUseSnap(enable gdnative.Bool) {
	log.Println("Calling GraphEdit.SetUseSnap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_use_snap", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphEdit) SetZoom(pZoom gdnative.Float) {
	log.Println("Calling GraphEdit.SetZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pZoom)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_zoom", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GraphEditImplementer is an interface for GraphEdit objects.
*/
type GraphEditImplementer interface {
	Class
}
