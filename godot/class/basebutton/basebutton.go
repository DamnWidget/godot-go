package basebutton

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
BaseButton is the abstract base class for buttons, so it shouldn't be used directly (it doesn't display anything). Other types of buttons inherit from it.
*/
type BaseButton struct {
	Control
}

func (o *BaseButton) BaseClass() string {
	return "BaseButton"
}

/*
   Undocumented
*/
func (o *BaseButton) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling BaseButton.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Called when button is pressed.
*/
func (o *BaseButton) X_Pressed() {
	log.Println("Calling BaseButton.X_Pressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Called when button is toggled (only if toggle_mode is active).
*/
func (o *BaseButton) X_Toggled(buttonPressed gdnative.Bool) {
	log.Println("Calling BaseButton.X_Toggled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(buttonPressed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_toggled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BaseButton) X_UnhandledInput(arg0 *InputEvent) {
	log.Println("Calling BaseButton.X_UnhandledInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_unhandled_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BaseButton) GetActionMode() gdnative.Int {
	log.Println("Calling BaseButton.GetActionMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_action_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BaseButton) GetButtonGroup() *ButtonGroup {
	log.Println("Calling BaseButton.GetButtonGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_button_group", goArguments, "*ButtonGroup")

	returnValue := goRet.Interface().(*ButtonGroup)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to "draw" signal. The visual state of the button is defined by the DRAW_* enum.
*/
func (o *BaseButton) GetDrawMode() gdnative.Int {
	log.Println("Calling BaseButton.GetDrawMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_draw_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BaseButton) GetEnabledFocusMode() gdnative.Int {
	log.Println("Calling BaseButton.GetEnabledFocusMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_enabled_focus_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BaseButton) GetShortcut() *ShortCut {
	log.Println("Calling BaseButton.GetShortcut()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_shortcut", goArguments, "*ShortCut")

	returnValue := goRet.Interface().(*ShortCut)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BaseButton) IsDisabled() gdnative.Bool {
	log.Println("Calling BaseButton.IsDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_disabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if mouse entered the button before it exit.
*/
func (o *BaseButton) IsHovered() gdnative.Bool {
	log.Println("Calling BaseButton.IsHovered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_hovered", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BaseButton) IsPressed() gdnative.Bool {
	log.Println("Calling BaseButton.IsPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_pressed", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BaseButton) IsToggleMode() gdnative.Bool {
	log.Println("Calling BaseButton.IsToggleMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_toggle_mode", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BaseButton) SetActionMode(mode gdnative.Int) {
	log.Println("Calling BaseButton.SetActionMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_action_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BaseButton) SetButtonGroup(buttonGroup *ButtonGroup) {
	log.Println("Calling BaseButton.SetButtonGroup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(buttonGroup)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_button_group", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BaseButton) SetDisabled(disabled gdnative.Bool) {
	log.Println("Calling BaseButton.SetDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BaseButton) SetEnabledFocusMode(mode gdnative.Int) {
	log.Println("Calling BaseButton.SetEnabledFocusMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_enabled_focus_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BaseButton) SetPressed(pressed gdnative.Bool) {
	log.Println("Calling BaseButton.SetPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pressed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BaseButton) SetShortcut(shortcut *ShortCut) {
	log.Println("Calling BaseButton.SetShortcut()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shortcut)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_shortcut", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BaseButton) SetToggleMode(enabled gdnative.Bool) {
	log.Println("Calling BaseButton.SetToggleMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_toggle_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   BaseButtonImplementer is an interface for BaseButton objects.
*/
type BaseButtonImplementer interface {
	Class
}
