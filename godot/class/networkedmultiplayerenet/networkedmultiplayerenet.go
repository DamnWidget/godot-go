package networkedmultiplayerenet

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Undocumented
*/
type NetworkedMultiplayerENet struct {
	NetworkedMultiplayerPeer
}

func (o *NetworkedMultiplayerENet) BaseClass() string {
	return "NetworkedMultiplayerENet"
}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerENet) CloseConnection() {
	log.Println("Calling NetworkedMultiplayerENet.CloseConnection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "close_connection", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerENet) CreateClient(ip gdnative.String, port gdnative.Int, inBandwidth gdnative.Int, outBandwidth gdnative.Int) gdnative.Int {
	log.Println("Calling NetworkedMultiplayerENet.CreateClient()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(ip)
	goArguments[1] = reflect.ValueOf(port)
	goArguments[2] = reflect.ValueOf(inBandwidth)
	goArguments[3] = reflect.ValueOf(outBandwidth)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "create_client", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerENet) CreateServer(port gdnative.Int, maxClients gdnative.Int, inBandwidth gdnative.Int, outBandwidth gdnative.Int) gdnative.Int {
	log.Println("Calling NetworkedMultiplayerENet.CreateServer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(port)
	goArguments[1] = reflect.ValueOf(maxClients)
	goArguments[2] = reflect.ValueOf(inBandwidth)
	goArguments[3] = reflect.ValueOf(outBandwidth)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "create_server", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerENet) GetCompressionMode() gdnative.Int {
	log.Println("Calling NetworkedMultiplayerENet.GetCompressionMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_compression_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerENet) SetBindIp(ip gdnative.String) {
	log.Println("Calling NetworkedMultiplayerENet.SetBindIp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ip)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bind_ip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *NetworkedMultiplayerENet) SetCompressionMode(mode gdnative.Int) {
	log.Println("Calling NetworkedMultiplayerENet.SetCompressionMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_compression_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   NetworkedMultiplayerENetImplementer is an interface for NetworkedMultiplayerENet objects.
*/
type NetworkedMultiplayerENetImplementer interface {
	Class
}
