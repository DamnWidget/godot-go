package arraymesh

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type ArrayMesh struct {
	Mesh
}

func (o *ArrayMesh) BaseClass() string {
	return "ArrayMesh"
}

/*

 */
func (o *ArrayMesh) AddBlendShape(name gdnative.String) {
	log.Println("Calling ArrayMesh.AddBlendShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_blend_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create a new surface ([method get_surface_count] that will become surf_idx for this. Surfaces are created to be rendered using a "primitive", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. (As a note, when using indices, it is recommended to only use just points, lines or triangles).
*/
func (o *ArrayMesh) AddSurfaceFromArrays(primitive gdnative.Int, arrays *Array, blendShapes *Array, compressFlags gdnative.Int) {
	log.Println("Calling ArrayMesh.AddSurfaceFromArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(primitive)
	goArguments[1] = reflect.ValueOf(arrays)
	goArguments[2] = reflect.ValueOf(blendShapes)
	goArguments[3] = reflect.ValueOf(compressFlags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_surface_from_arrays", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) CenterGeometry() {
	log.Println("Calling ArrayMesh.CenterGeometry()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "center_geometry", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) ClearBlendShapes() {
	log.Println("Calling ArrayMesh.ClearBlendShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_blend_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) GetBlendShapeCount() gdnative.Int {
	log.Println("Calling ArrayMesh.GetBlendShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_blend_shape_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ArrayMesh) GetBlendShapeMode() gdnative.Int {
	log.Println("Calling ArrayMesh.GetBlendShapeMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_blend_shape_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) GetBlendShapeName(index gdnative.Int) gdnative.String {
	log.Println("Calling ArrayMesh.GetBlendShapeName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_blend_shape_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ArrayMesh) GetCustomAabb() *AABB {
	log.Println("Calling ArrayMesh.GetCustomAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_custom_aabb", goArguments, "*AABB")

	returnValue := goRet.Interface().(*AABB)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of surfaces that the [code]ArrayMesh[/code] holds.
*/
func (o *ArrayMesh) GetSurfaceCount() gdnative.Int {
	log.Println("Calling ArrayMesh.GetSurfaceCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_surface_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) LightmapUnwrap(arg0 *Transform, arg1 gdnative.Float) gdnative.Int {
	log.Println("Calling ArrayMesh.LightmapUnwrap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(arg0)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "lightmap_unwrap", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) RegenNormalmaps() {
	log.Println("Calling ArrayMesh.RegenNormalmaps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "regen_normalmaps", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ArrayMesh) SetBlendShapeMode(mode gdnative.Int) {
	log.Println("Calling ArrayMesh.SetBlendShapeMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_blend_shape_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ArrayMesh) SetCustomAabb(aabb *AABB) {
	log.Println("Calling ArrayMesh.SetCustomAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aabb)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_custom_aabb", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the length in indices of the index array in the requested surface (see [method add_surface]).
*/
func (o *ArrayMesh) SurfaceGetArrayIndexLen(surfIdx gdnative.Int) gdnative.Int {
	log.Println("Calling ArrayMesh.SurfaceGetArrayIndexLen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "surface_get_array_index_len", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the length in vertices of the vertex array in the requested surface (see [method add_surface]).
*/
func (o *ArrayMesh) SurfaceGetArrayLen(surfIdx gdnative.Int) gdnative.Int {
	log.Println("Calling ArrayMesh.SurfaceGetArrayLen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "surface_get_array_len", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) SurfaceGetArrays(surfIdx gdnative.Int) *Array {
	log.Println("Calling ArrayMesh.SurfaceGetArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "surface_get_arrays", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) SurfaceGetBlendShapeArrays(surfIdx gdnative.Int) *Array {
	log.Println("Calling ArrayMesh.SurfaceGetBlendShapeArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "surface_get_blend_shape_arrays", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the format mask of the requested surface (see [method add_surface]).
*/
func (o *ArrayMesh) SurfaceGetFormat(surfIdx gdnative.Int) gdnative.Int {
	log.Println("Calling ArrayMesh.SurfaceGetFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "surface_get_format", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return a [Material] in a given surface. Surface is rendered using this material.
*/
func (o *ArrayMesh) SurfaceGetMaterial(surfIdx gdnative.Int) *Material {
	log.Println("Calling ArrayMesh.SurfaceGetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "surface_get_material", goArguments, "*Material")

	returnValue := goRet.Interface().(*Material)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *ArrayMesh) SurfaceGetName(surfIdx gdnative.Int) gdnative.String {
	log.Println("Calling ArrayMesh.SurfaceGetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "surface_get_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the primitive type of the requested surface (see [method add_surface]).
*/
func (o *ArrayMesh) SurfaceGetPrimitiveType(surfIdx gdnative.Int) gdnative.Int {
	log.Println("Calling ArrayMesh.SurfaceGetPrimitiveType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "surface_get_primitive_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.
*/
func (o *ArrayMesh) SurfaceRemove(surfIdx gdnative.Int) {
	log.Println("Calling ArrayMesh.SurfaceRemove()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(surfIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "surface_remove", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) SurfaceSetMaterial(surfIdx gdnative.Int, material *Material) {
	log.Println("Calling ArrayMesh.SurfaceSetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(surfIdx)
	goArguments[1] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "surface_set_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set a [Material] for a given surface. Surface will be rendered using this material.
*/
func (o *ArrayMesh) SurfaceSetName(surfIdx gdnative.Int, name gdnative.String) {
	log.Println("Calling ArrayMesh.SurfaceSetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(surfIdx)
	goArguments[1] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "surface_set_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *ArrayMesh) SurfaceUpdateRegion(surfIdx gdnative.Int, offset gdnative.Int, data *PoolByteArray) {
	log.Println("Calling ArrayMesh.SurfaceUpdateRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(surfIdx)
	goArguments[1] = reflect.ValueOf(offset)
	goArguments[2] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "surface_update_region", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ArrayMeshImplementer is an interface for ArrayMesh objects.
*/
type ArrayMeshImplementer interface {
	Class
}
