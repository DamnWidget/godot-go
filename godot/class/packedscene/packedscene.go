package packedscene

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself. TODO: explain ownership, and that node does not need to own itself
*/
type PackedScene struct {
	Resource
}

func (o *PackedScene) BaseClass() string {
	return "PackedScene"
}

/*
   Undocumented
*/
func (o *PackedScene) X_GetBundledScene() *Dictionary {
	log.Println("Calling PackedScene.X_GetBundledScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_bundled_scene", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PackedScene) X_SetBundledScene(arg0 *Dictionary) {
	log.Println("Calling PackedScene.X_SetBundledScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_bundled_scene", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns [code]true[/code] if the scene file has nodes.
*/
func (o *PackedScene) CanInstance() gdnative.Bool {
	log.Println("Calling PackedScene.CanInstance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "can_instance", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [code]SceneState[/code] representing the scene file contents.
*/
func (o *PackedScene) GetState() *SceneState {
	log.Println("Calling PackedScene.GetState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_state", goArguments, "*SceneState")

	returnValue := goRet.Interface().(*SceneState)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers the [enum Object.NOTIFICATION_INSTANCED] notification on the root node.
*/
func (o *PackedScene) Instance(editState gdnative.Int) *Node {
	log.Println("Calling PackedScene.Instance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(editState)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "instance", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Pack will ignore any sub-nodes not owned by given node. See [method Node.set_owner].
*/
func (o *PackedScene) Pack(path *Object) gdnative.Int {
	log.Println("Calling PackedScene.Pack()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "pack", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   PackedSceneImplementer is an interface for PackedScene objects.
*/
type PackedSceneImplementer interface {
	Class
}
