package atlastexture

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
[Texture] resource aimed at managing big textures files that pack multiple smaller textures. Consists of a [Texture], a margin that defines the border width, and a region that defines the actual area of the AtlasTexture.
*/
type AtlasTexture struct {
	Texture
}

func (o *AtlasTexture) BaseClass() string {
	return "AtlasTexture"
}

/*
   Undocumented
*/
func (o *AtlasTexture) GetAtlas() *Texture {
	log.Println("Calling AtlasTexture.GetAtlas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_atlas", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AtlasTexture) GetMargin() *Rect2 {
	log.Println("Calling AtlasTexture.GetMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_margin", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AtlasTexture) GetRegion() *Rect2 {
	log.Println("Calling AtlasTexture.GetRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_region", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AtlasTexture) HasFilterClip() gdnative.Bool {
	log.Println("Calling AtlasTexture.HasFilterClip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_filter_clip", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *AtlasTexture) SetAtlas(atlas *Texture) {
	log.Println("Calling AtlasTexture.SetAtlas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(atlas)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_atlas", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AtlasTexture) SetFilterClip(enable gdnative.Bool) {
	log.Println("Calling AtlasTexture.SetFilterClip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_filter_clip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AtlasTexture) SetMargin(margin *Rect2) {
	log.Println("Calling AtlasTexture.SetMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *AtlasTexture) SetRegion(region *Rect2) {
	log.Println("Calling AtlasTexture.SetRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(region)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_region", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   AtlasTextureImplementer is an interface for AtlasTexture objects.
*/
type AtlasTextureImplementer interface {
	Class
}
