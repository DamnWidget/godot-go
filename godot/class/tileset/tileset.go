package tileset

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A TileSet is a library of tiles for a [TileMap]. It contains a list of tiles, each consisting of a sprite and optional collision shapes. Tiles are referenced by a unique integer ID.
*/
type TileSet struct {
	Resource
}

func (o *TileSet) BaseClass() string {
	return "TileSet"
}

/*

 */
func (o *TileSet) X_ForwardSubtileSelection(autotileId gdnative.Int, bitmask gdnative.Int, tilemap *Object, tileLocation *Vector2) *Vector2 {
	log.Println("Calling TileSet.X_ForwardSubtileSelection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(autotileId)
	goArguments[1] = reflect.ValueOf(bitmask)
	goArguments[2] = reflect.ValueOf(tilemap)
	goArguments[3] = reflect.ValueOf(tileLocation)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_forward_subtile_selection", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TileSet) X_IsTileBound(drawnId gdnative.Int, neighborId gdnative.Int) gdnative.Bool {
	log.Println("Calling TileSet.X_IsTileBound()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(drawnId)
	goArguments[1] = reflect.ValueOf(neighborId)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_is_tile_bound", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TileSet) AutotileGetBitmaskMode(id gdnative.Int) gdnative.Int {
	log.Println("Calling TileSet.AutotileGetBitmaskMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "autotile_get_bitmask_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TileSet) AutotileSetBitmaskMode(id gdnative.Int, mode gdnative.Int) {
	log.Println("Calling TileSet.AutotileSetBitmaskMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "autotile_set_bitmask_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clear all tiles.
*/
func (o *TileSet) Clear() {
	log.Println("Calling TileSet.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create a new tile which will be referenced by the given ID.
*/
func (o *TileSet) CreateTile(id gdnative.Int) {
	log.Println("Calling TileSet.CreateTile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "create_tile", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Find the first tile matching the given name.
*/
func (o *TileSet) FindTileByName(name gdnative.String) gdnative.Int {
	log.Println("Calling TileSet.FindTileByName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "find_tile_by_name", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the ID following the last currently used ID, useful when creating a new tile.
*/
func (o *TileSet) GetLastUnusedTileId() gdnative.Int {
	log.Println("Calling TileSet.GetLastUnusedTileId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_last_unused_tile_id", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return an array of all currently used tile IDs.
*/
func (o *TileSet) GetTilesIds() *Array {
	log.Println("Calling TileSet.GetTilesIds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tiles_ids", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remove the tile referenced by the given ID.
*/
func (o *TileSet) RemoveTile(id gdnative.Int) {
	log.Println("Calling TileSet.RemoveTile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_tile", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TileSet) TileAddShape(id gdnative.Int, shape *Shape2D, shapeTransform *Transform2D, oneWay gdnative.Bool, autotileCoord *Vector2) {
	log.Println("Calling TileSet.TileAddShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(shape)
	goArguments[2] = reflect.ValueOf(shapeTransform)
	goArguments[3] = reflect.ValueOf(oneWay)
	goArguments[4] = reflect.ValueOf(autotileCoord)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_add_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the light occluder of the tile.
*/
func (o *TileSet) TileGetLightOccluder(id gdnative.Int) *OccluderPolygon2D {
	log.Println("Calling TileSet.TileGetLightOccluder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_light_occluder", goArguments, "*OccluderPolygon2D")

	returnValue := goRet.Interface().(*OccluderPolygon2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the material of the tile.
*/
func (o *TileSet) TileGetMaterial(id gdnative.Int) *ShaderMaterial {
	log.Println("Calling TileSet.TileGetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_material", goArguments, "*ShaderMaterial")

	returnValue := goRet.Interface().(*ShaderMaterial)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the name of the tile.
*/
func (o *TileSet) TileGetName(id gdnative.Int) gdnative.String {
	log.Println("Calling TileSet.TileGetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the navigation polygon of the tile.
*/
func (o *TileSet) TileGetNavigationPolygon(id gdnative.Int) *NavigationPolygon {
	log.Println("Calling TileSet.TileGetNavigationPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_navigation_polygon", goArguments, "*NavigationPolygon")

	returnValue := goRet.Interface().(*NavigationPolygon)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the offset of the tile's navigation polygon.
*/
func (o *TileSet) TileGetNavigationPolygonOffset(id gdnative.Int) *Vector2 {
	log.Println("Calling TileSet.TileGetNavigationPolygonOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_navigation_polygon_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TileSet) TileGetNormalMap(id gdnative.Int) *Texture {
	log.Println("Calling TileSet.TileGetNormalMap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_normal_map", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the offset of the tile's light occluder.
*/
func (o *TileSet) TileGetOccluderOffset(id gdnative.Int) *Vector2 {
	log.Println("Calling TileSet.TileGetOccluderOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_occluder_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the tile sub-region in the texture.
*/
func (o *TileSet) TileGetRegion(id gdnative.Int) *Rect2 {
	log.Println("Calling TileSet.TileGetRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_region", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TileSet) TileGetShape(id gdnative.Int, shapeId gdnative.Int) *Shape2D {
	log.Println("Calling TileSet.TileGetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(shapeId)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_shape", goArguments, "*Shape2D")

	returnValue := goRet.Interface().(*Shape2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TileSet) TileGetShapeCount(id gdnative.Int) gdnative.Int {
	log.Println("Calling TileSet.TileGetShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_shape_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TileSet) TileGetShapeOneWay(id gdnative.Int, shapeId gdnative.Int) gdnative.Bool {
	log.Println("Calling TileSet.TileGetShapeOneWay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(shapeId)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_shape_one_way", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *TileSet) TileGetShapeTransform(id gdnative.Int, shapeId gdnative.Int) *Transform2D {
	log.Println("Calling TileSet.TileGetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(shapeId)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_shape_transform", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the array of shapes of the tile.
*/
func (o *TileSet) TileGetShapes(id gdnative.Int) *Array {
	log.Println("Calling TileSet.TileGetShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_shapes", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the texture of the tile.
*/
func (o *TileSet) TileGetTexture(id gdnative.Int) *Texture {
	log.Println("Calling TileSet.TileGetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_texture", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the texture offset of the tile.
*/
func (o *TileSet) TileGetTextureOffset(id gdnative.Int) *Vector2 {
	log.Println("Calling TileSet.TileGetTextureOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "tile_get_texture_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set a light occluder for the tile.
*/
func (o *TileSet) TileSetLightOccluder(id gdnative.Int, lightOccluder *OccluderPolygon2D) {
	log.Println("Calling TileSet.TileSetLightOccluder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(lightOccluder)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_light_occluder", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the material of the tile.
*/
func (o *TileSet) TileSetMaterial(id gdnative.Int, material *ShaderMaterial) {
	log.Println("Calling TileSet.TileSetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the name of the tile, for descriptive purposes.
*/
func (o *TileSet) TileSetName(id gdnative.Int, name gdnative.String) {
	log.Println("Calling TileSet.TileSetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set a navigation polygon for the tile.
*/
func (o *TileSet) TileSetNavigationPolygon(id gdnative.Int, navigationPolygon *NavigationPolygon) {
	log.Println("Calling TileSet.TileSetNavigationPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(navigationPolygon)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_navigation_polygon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set an offset for the tile's navigation polygon.
*/
func (o *TileSet) TileSetNavigationPolygonOffset(id gdnative.Int, navigationPolygonOffset *Vector2) {
	log.Println("Calling TileSet.TileSetNavigationPolygonOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(navigationPolygonOffset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_navigation_polygon_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TileSet) TileSetNormalMap(id gdnative.Int, normalMap *Texture) {
	log.Println("Calling TileSet.TileSetNormalMap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(normalMap)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_normal_map", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set an offset for the tile's light occluder.
*/
func (o *TileSet) TileSetOccluderOffset(id gdnative.Int, occluderOffset *Vector2) {
	log.Println("Calling TileSet.TileSetOccluderOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(occluderOffset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_occluder_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the tile sub-region in the texture. This is common in texture atlases.
*/
func (o *TileSet) TileSetRegion(id gdnative.Int, region *Rect2) {
	log.Println("Calling TileSet.TileSetRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(region)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_region", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TileSet) TileSetShape(id gdnative.Int, shapeId gdnative.Int, shape *Shape2D) {
	log.Println("Calling TileSet.TileSetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(shapeId)
	goArguments[2] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TileSet) TileSetShapeOneWay(id gdnative.Int, shapeId gdnative.Int, oneWay gdnative.Bool) {
	log.Println("Calling TileSet.TileSetShapeOneWay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(shapeId)
	goArguments[2] = reflect.ValueOf(oneWay)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_shape_one_way", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *TileSet) TileSetShapeTransform(id gdnative.Int, shapeId gdnative.Int, shapeTransform *Transform2D) {
	log.Println("Calling TileSet.TileSetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(shapeId)
	goArguments[2] = reflect.ValueOf(shapeTransform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_shape_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set an array of shapes for the tile, enabling physics to collide with it.
*/
func (o *TileSet) TileSetShapes(id gdnative.Int, shapes *Array) {
	log.Println("Calling TileSet.TileSetShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(shapes)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the texture of the tile.
*/
func (o *TileSet) TileSetTexture(id gdnative.Int, texture *Texture) {
	log.Println("Calling TileSet.TileSetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the texture offset of the tile.
*/
func (o *TileSet) TileSetTextureOffset(id gdnative.Int, textureOffset *Vector2) {
	log.Println("Calling TileSet.TileSetTextureOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(textureOffset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "tile_set_texture_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TileSetImplementer is an interface for TileSet objects.
*/
type TileSetImplementer interface {
	Class
}
