package streampeer

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or Unix Sockets). It provides an API for sending and receiving data through streams as raw data or strings.
*/
type StreamPeer struct {
	Reference
}

func (o *StreamPeer) BaseClass() string {
	return "StreamPeer"
}

/*
   Get a signed 16 bit value from the stream.
*/
func (o *StreamPeer) Get16() gdnative.Int {
	log.Println("Calling StreamPeer.Get16()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_16", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a signed 32 bit value from the stream.
*/
func (o *StreamPeer) Get32() gdnative.Int {
	log.Println("Calling StreamPeer.Get32()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_32", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a signed 64 bit value from the stream.
*/
func (o *StreamPeer) Get64() gdnative.Int {
	log.Println("Calling StreamPeer.Get64()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_64", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a signed byte from the stream.
*/
func (o *StreamPeer) Get8() gdnative.Int {
	log.Println("Calling StreamPeer.Get8()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_8", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of bytes this [code]StreamPeer[/code] has available.
*/
func (o *StreamPeer) GetAvailableBytes() gdnative.Int {
	log.Println("Calling StreamPeer.GetAvailableBytes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_available_bytes", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an Error code and a data array.
*/
func (o *StreamPeer) GetData(bytes gdnative.Int) *Array {
	log.Println("Calling StreamPeer.GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bytes)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_data", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a double-precision float from the stream.
*/
func (o *StreamPeer) GetDouble() gdnative.Float {
	log.Println("Calling StreamPeer.GetDouble()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_double", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a single-precision float from the stream.
*/
func (o *StreamPeer) GetFloat() gdnative.Float {
	log.Println("Calling StreamPeer.GetFloat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_float", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an Error code, and a data array.
*/
func (o *StreamPeer) GetPartialData(bytes gdnative.Int) *Array {
	log.Println("Calling StreamPeer.GetPartialData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bytes)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_partial_data", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a string with byte-length "bytes" from the stream.
*/
func (o *StreamPeer) GetString(bytes gdnative.Int) gdnative.String {
	log.Println("Calling StreamPeer.GetString()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bytes)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_string", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get an unsigned 16 bit value from the stream.
*/
func (o *StreamPeer) GetU16() gdnative.Int {
	log.Println("Calling StreamPeer.GetU16()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_u16", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get an unsigned 32 bit value from the stream.
*/
func (o *StreamPeer) GetU32() gdnative.Int {
	log.Println("Calling StreamPeer.GetU32()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_u32", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get an unsigned 64 bit value from the stream.
*/
func (o *StreamPeer) GetU64() gdnative.Int {
	log.Println("Calling StreamPeer.GetU64()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_u64", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get an unsigned byte from the stream.
*/
func (o *StreamPeer) GetU8() gdnative.Int {
	log.Println("Calling StreamPeer.GetU8()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_u8", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a utf8 string with byte-length "bytes" from the stream (this decodes the string sent as utf8).
*/
func (o *StreamPeer) GetUtf8String(bytes gdnative.Int) gdnative.String {
	log.Println("Calling StreamPeer.GetUtf8String()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bytes)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_utf8_string", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get a Variant from the stream.
*/
func (o *StreamPeer) GetVar() *Variant {
	log.Println("Calling StreamPeer.GetVar()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_var", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StreamPeer) IsBigEndianEnabled() gdnative.Bool {
	log.Println("Calling StreamPeer.IsBigEndianEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_big_endian_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Put a signed 16 bit value into the stream.
*/
func (o *StreamPeer) Put16(value gdnative.Int) {
	log.Println("Calling StreamPeer.Put16()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_16", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Put a signed 32 bit value into the stream.
*/
func (o *StreamPeer) Put32(value gdnative.Int) {
	log.Println("Calling StreamPeer.Put32()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_32", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Put a signed 64 bit value into the stream.
*/
func (o *StreamPeer) Put64(value gdnative.Int) {
	log.Println("Calling StreamPeer.Put64()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_64", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Put a signed byte into the stream.
*/
func (o *StreamPeer) Put8(value gdnative.Int) {
	log.Println("Calling StreamPeer.Put8()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_8", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Send a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an Error code.
*/
func (o *StreamPeer) PutData(data *PoolByteArray) gdnative.Int {
	log.Println("Calling StreamPeer.PutData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "put_data", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Put a double-precision float into the stream.
*/
func (o *StreamPeer) PutDouble(value gdnative.Float) {
	log.Println("Calling StreamPeer.PutDouble()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_double", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Put a single-precision float into the stream.
*/
func (o *StreamPeer) PutFloat(value gdnative.Float) {
	log.Println("Calling StreamPeer.PutFloat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_float", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an Error code and an integer, describing how much data was actually sent.
*/
func (o *StreamPeer) PutPartialData(data *PoolByteArray) *Array {
	log.Println("Calling StreamPeer.PutPartialData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "put_partial_data", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Put an unsigned 16 bit value into the stream.
*/
func (o *StreamPeer) PutU16(value gdnative.Int) {
	log.Println("Calling StreamPeer.PutU16()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_u16", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Put an unsigned 32 bit value into the stream.
*/
func (o *StreamPeer) PutU32(value gdnative.Int) {
	log.Println("Calling StreamPeer.PutU32()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_u32", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Put an unsigned 64 bit value into the stream.
*/
func (o *StreamPeer) PutU64(value gdnative.Int) {
	log.Println("Calling StreamPeer.PutU64()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_u64", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Put an unsigned byte into the stream.
*/
func (o *StreamPeer) PutU8(value gdnative.Int) {
	log.Println("Calling StreamPeer.PutU8()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_u8", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Put a zero-terminated utf8 string into the stream.
*/
func (o *StreamPeer) PutUtf8String(value gdnative.String) {
	log.Println("Calling StreamPeer.PutUtf8String()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_utf8_string", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Put a Variant into the stream.
*/
func (o *StreamPeer) PutVar(value *Variant) {
	log.Println("Calling StreamPeer.PutVar()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "put_var", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *StreamPeer) SetBigEndian(enable gdnative.Bool) {
	log.Println("Calling StreamPeer.SetBigEndian()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_big_endian", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   StreamPeerImplementer is an interface for StreamPeer objects.
*/
type StreamPeerImplementer interface {
	Class
}
