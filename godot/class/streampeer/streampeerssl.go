package streampeer

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
SSL Stream peer. This object can be used to connect to SSL servers.
*/
type StreamPeerSSL struct {
	StreamPeer
}

func (o *StreamPeerSSL) BaseClass() string {
	return "StreamPeerSSL"
}

/*

 */
func (o *StreamPeerSSL) AcceptStream(stream *StreamPeer) gdnative.Int {
	log.Println("Calling StreamPeerSSL.AcceptStream()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(stream)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "accept_stream", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Connect to a peer using an underlying [StreamPeer] "stream", when "validate_certs" is true, [code]StreamPeerSSL[/code] will validate that the certificate presented by the peer matches the "for_hostname".
*/
func (o *StreamPeerSSL) ConnectToStream(stream *StreamPeer, validateCerts gdnative.Bool, forHostname gdnative.String) gdnative.Int {
	log.Println("Calling StreamPeerSSL.ConnectToStream()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(stream)
	goArguments[1] = reflect.ValueOf(validateCerts)
	goArguments[2] = reflect.ValueOf(forHostname)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "connect_to_stream", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Disconnect from host.
*/
func (o *StreamPeerSSL) DisconnectFromStream() {
	log.Println("Calling StreamPeerSSL.DisconnectFromStream()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "disconnect_from_stream", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the status of the connection, one of STATUS_* enum.
*/
func (o *StreamPeerSSL) GetStatus() gdnative.Int {
	log.Println("Calling StreamPeerSSL.GetStatus()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_status", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Poll the connection to check for incoming bytes. Call this right before "get_available_bytes()" for it to work properly.
*/
func (o *StreamPeerSSL) Poll() {
	log.Println("Calling StreamPeerSSL.Poll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "poll", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   StreamPeerSSLImplementer is an interface for StreamPeerSSL objects.
*/
type StreamPeerSSLImplementer interface {
	Class
}
