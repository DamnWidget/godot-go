package streampeer

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type StreamPeerBuffer struct {
	StreamPeer
}

func (o *StreamPeerBuffer) BaseClass() string {
	return "StreamPeerBuffer"
}

/*

 */
func (o *StreamPeerBuffer) Clear() {
	log.Println("Calling StreamPeerBuffer.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *StreamPeerBuffer) Duplicate() *StreamPeerBuffer {
	log.Println("Calling StreamPeerBuffer.Duplicate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "duplicate", goArguments, "*StreamPeerBuffer")

	returnValue := goRet.Interface().(*StreamPeerBuffer)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StreamPeerBuffer) GetDataArray() *PoolByteArray {
	log.Println("Calling StreamPeerBuffer.GetDataArray()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_data_array", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *StreamPeerBuffer) GetPosition() gdnative.Int {
	log.Println("Calling StreamPeerBuffer.GetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_position", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *StreamPeerBuffer) GetSize() gdnative.Int {
	log.Println("Calling StreamPeerBuffer.GetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_size", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *StreamPeerBuffer) Resize(size gdnative.Int) {
	log.Println("Calling StreamPeerBuffer.Resize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "resize", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *StreamPeerBuffer) Seek(position gdnative.Int) {
	log.Println("Calling StreamPeerBuffer.Seek()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "seek", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *StreamPeerBuffer) SetDataArray(data *PoolByteArray) {
	log.Println("Calling StreamPeerBuffer.SetDataArray()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_data_array", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   StreamPeerBufferImplementer is an interface for StreamPeerBuffer objects.
*/
type StreamPeerBufferImplementer interface {
	Class
}
