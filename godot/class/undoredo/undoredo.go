package undoredo

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Helper to manage UndoRedo in the editor or custom tools. It works by storing calls to functions in both 'do' an 'undo' lists. Common behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.
*/
type UndoRedo struct {
	Object
}

func (o *UndoRedo) BaseClass() string {
	return "UndoRedo"
}

/*

 */
func (o *UndoRedo) AddDoMethod(object *Object, method gdnative.String) *Variant {
	log.Println("Calling UndoRedo.AddDoMethod()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(object)
	goArguments[1] = reflect.ValueOf(method)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "add_do_method", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set a property with a custom value.
*/
func (o *UndoRedo) AddDoProperty(object *Object, property gdnative.String, value *Variant) {
	log.Println("Calling UndoRedo.AddDoProperty()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(object)
	goArguments[1] = reflect.ValueOf(property)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_do_property", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a 'do' reference that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.
*/
func (o *UndoRedo) AddDoReference(object *Object) {
	log.Println("Calling UndoRedo.AddDoReference()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(object)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_do_reference", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *UndoRedo) AddUndoMethod(object *Object, method gdnative.String) *Variant {
	log.Println("Calling UndoRedo.AddUndoMethod()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(object)
	goArguments[1] = reflect.ValueOf(method)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "add_undo_method", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undo setting of a property with a custom value.
*/
func (o *UndoRedo) AddUndoProperty(object *Object, property gdnative.String, value *Variant) {
	log.Println("Calling UndoRedo.AddUndoProperty()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(object)
	goArguments[1] = reflect.ValueOf(property)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_undo_property", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add an 'undo' reference that will be erased if the 'undo' history is lost. This is useful mostly for nodes removed with the 'do' call (not the 'undo' call!).
*/
func (o *UndoRedo) AddUndoReference(object *Object) {
	log.Println("Calling UndoRedo.AddUndoReference()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(object)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_undo_reference", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clear the undo/redo history and associated references.
*/
func (o *UndoRedo) ClearHistory() {
	log.Println("Calling UndoRedo.ClearHistory()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_history", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Commit the action. All 'do' methods/properties are called/set when this function is called.
*/
func (o *UndoRedo) CommitAction() {
	log.Println("Calling UndoRedo.CommitAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "commit_action", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property] and [method add_undo_property].
*/
func (o *UndoRedo) CreateAction(name gdnative.String, mergeMode gdnative.Int) {
	log.Println("Calling UndoRedo.CreateAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(mergeMode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "create_action", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Get the name of the current action.
*/
func (o *UndoRedo) GetCurrentActionName() gdnative.String {
	log.Println("Calling UndoRedo.GetCurrentActionName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_current_action_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the version, each time a new action is committed, the version number of the UndoRedo is increased automatically. This is useful mostly to check if something changed from a saved version.
*/
func (o *UndoRedo) GetVersion() gdnative.Int {
	log.Println("Calling UndoRedo.GetVersion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_version", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *UndoRedo) Redo() {
	log.Println("Calling UndoRedo.Redo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "redo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *UndoRedo) Undo() {
	log.Println("Calling UndoRedo.Undo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "undo", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   UndoRedoImplementer is an interface for UndoRedo objects.
*/
type UndoRedoImplementer interface {
	Class
}
