package geometryinstance

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Base node for geometry based visual instances. Shares some common functionality like visibility and custom materials.
*/
type GeometryInstance struct {
	VisualInstance
}

func (o *GeometryInstance) BaseClass() string {
	return "GeometryInstance"
}

/*
   Undocumented
*/
func (o *GeometryInstance) GetCastShadowsSetting() gdnative.Int {
	log.Println("Calling GeometryInstance.GetCastShadowsSetting()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_cast_shadows_setting", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GeometryInstance) GetExtraCullMargin() gdnative.Float {
	log.Println("Calling GeometryInstance.GetExtraCullMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_extra_cull_margin", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GeometryInstance) GetFlag(flag gdnative.Int) gdnative.Bool {
	log.Println("Calling GeometryInstance.GetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_flag", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GeometryInstance) GetLodMaxDistance() gdnative.Float {
	log.Println("Calling GeometryInstance.GetLodMaxDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_lod_max_distance", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GeometryInstance) GetLodMaxHysteresis() gdnative.Float {
	log.Println("Calling GeometryInstance.GetLodMaxHysteresis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_lod_max_hysteresis", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GeometryInstance) GetLodMinDistance() gdnative.Float {
	log.Println("Calling GeometryInstance.GetLodMinDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_lod_min_distance", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GeometryInstance) GetLodMinHysteresis() gdnative.Float {
	log.Println("Calling GeometryInstance.GetLodMinHysteresis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_lod_min_hysteresis", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GeometryInstance) GetMaterialOverride() *Material {
	log.Println("Calling GeometryInstance.GetMaterialOverride()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_material_override", goArguments, "*Material")

	returnValue := goRet.Interface().(*Material)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GeometryInstance) SetCastShadowsSetting(shadowCastingSetting gdnative.Int) {
	log.Println("Calling GeometryInstance.SetCastShadowsSetting()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shadowCastingSetting)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_cast_shadows_setting", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GeometryInstance) SetExtraCullMargin(margin gdnative.Float) {
	log.Println("Calling GeometryInstance.SetExtraCullMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_extra_cull_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GeometryInstance) SetFlag(flag gdnative.Int, value gdnative.Bool) {
	log.Println("Calling GeometryInstance.SetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(flag)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_flag", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GeometryInstance) SetLodMaxDistance(mode gdnative.Float) {
	log.Println("Calling GeometryInstance.SetLodMaxDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_lod_max_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GeometryInstance) SetLodMaxHysteresis(mode gdnative.Float) {
	log.Println("Calling GeometryInstance.SetLodMaxHysteresis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_lod_max_hysteresis", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GeometryInstance) SetLodMinDistance(mode gdnative.Float) {
	log.Println("Calling GeometryInstance.SetLodMinDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_lod_min_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GeometryInstance) SetLodMinHysteresis(mode gdnative.Float) {
	log.Println("Calling GeometryInstance.SetLodMinHysteresis()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_lod_min_hysteresis", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GeometryInstance) SetMaterialOverride(material *Material) {
	log.Println("Calling GeometryInstance.SetMaterialOverride()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_material_override", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GeometryInstanceImplementer is an interface for GeometryInstance objects.
*/
type GeometryInstanceImplementer interface {
	Class
}
