package path2d

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Can have [PathFollow2D] child-nodes moving along the [Curve2D]. See [PathFollow2D] for more information on this usage.
*/
type Path2D struct {
	Node2D
}

func (o *Path2D) BaseClass() string {
	return "Path2D"
}

/*
   Undocumented
*/
func (o *Path2D) X_CurveChanged() {
	log.Println("Calling Path2D.X_CurveChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_curve_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Path2D) GetCurve() *Curve2D {
	log.Println("Calling Path2D.GetCurve()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_curve", goArguments, "*Curve2D")

	returnValue := goRet.Interface().(*Curve2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Path2D) SetCurve(curve *Curve2D) {
	log.Println("Calling Path2D.SetCurve()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(curve)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_curve", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Path2DImplementer is an interface for Path2D objects.
*/
type Path2DImplementer interface {
	Class
}
