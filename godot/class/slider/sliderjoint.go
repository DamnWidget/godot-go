package slider

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Slides across the x-axis of the [Pivot] object.
*/
type SliderJoint struct {
	Joint
}

func (o *SliderJoint) BaseClass() string {
	return "SliderJoint"
}

/*
   Undocumented
*/
func (o *SliderJoint) X_GetLowerLimitAngular() gdnative.Float {
	log.Println("Calling SliderJoint.X_GetLowerLimitAngular()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_lower_limit_angular", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SliderJoint) X_GetUpperLimitAngular() gdnative.Float {
	log.Println("Calling SliderJoint.X_GetUpperLimitAngular()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_upper_limit_angular", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SliderJoint) X_SetLowerLimitAngular(lowerLimitAngular gdnative.Float) {
	log.Println("Calling SliderJoint.X_SetLowerLimitAngular()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(lowerLimitAngular)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_lower_limit_angular", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SliderJoint) X_SetUpperLimitAngular(upperLimitAngular gdnative.Float) {
	log.Println("Calling SliderJoint.X_SetUpperLimitAngular()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(upperLimitAngular)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_upper_limit_angular", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SliderJoint) GetParam(param gdnative.Int) gdnative.Float {
	log.Println("Calling SliderJoint.GetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SliderJoint) SetParam(param gdnative.Int, value gdnative.Float) {
	log.Println("Calling SliderJoint.SetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SliderJointImplementer is an interface for SliderJoint objects.
*/
type SliderJointImplementer interface {
	Class
}
