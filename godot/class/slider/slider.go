package slider

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"

	"github.com/shadowapex/godot-go/godot/class/inputevent"
	"github.com/shadowapex/godot-go/godot/class/ranges"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewSliderFromPointer(ptr gdnative.Pointer) *Slider {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Slider{}
	obj.SetOwner(owner)

	return &obj

}

/*
Base class for GUI Sliders.
*/
type Slider struct {
	ranges.Range
}

func (o *Slider) BaseClass() string {
	return "Slider"
}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/

func (o *Slider) X_GuiInput(arg0 inputevent.InputEvent) {
	log.Println("Calling Slider.X_GuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetOwner())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Slider", "_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: int
*/

func (o *Slider) GetTicks() gdnative.Int {
	log.Println("Calling Slider.GetTicks()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Slider", "get_ticks")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/

func (o *Slider) GetTicksOnBorders() gdnative.Bool {
	log.Println("Calling Slider.GetTicksOnBorders()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Slider", "get_ticks_on_borders")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/

func (o *Slider) IsEditable() gdnative.Bool {
	log.Println("Calling Slider.IsEditable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Slider", "is_editable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false editable bool}], Returns: void
*/

func (o *Slider) SetEditable(editable gdnative.Bool) {
	log.Println("Calling Slider.SetEditable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(editable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Slider", "set_editable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false count int}], Returns: void
*/

func (o *Slider) SetTicks(count gdnative.Int) {
	log.Println("Calling Slider.SetTicks()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(count)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Slider", "set_ticks")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ticks_on_border bool}], Returns: void
*/

func (o *Slider) SetTicksOnBorders(ticksOnBorder gdnative.Bool) {
	log.Println("Calling Slider.SetTicksOnBorders()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(ticksOnBorder)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Slider", "set_ticks_on_borders")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
