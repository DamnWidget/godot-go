package slider

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Base class for GUI Sliders.
*/
type Slider struct {
	Range
}

func (o *Slider) BaseClass() string {
	return "Slider"
}

/*
   Undocumented
*/
func (o *Slider) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling Slider.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Slider) GetTicks() gdnative.Int {
	log.Println("Calling Slider.GetTicks()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_ticks", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Slider) GetTicksOnBorders() gdnative.Bool {
	log.Println("Calling Slider.GetTicksOnBorders()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_ticks_on_borders", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Slider) IsEditable() gdnative.Bool {
	log.Println("Calling Slider.IsEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_editable", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Slider) SetEditable(editable gdnative.Bool) {
	log.Println("Calling Slider.SetEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(editable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_editable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Slider) SetTicks(count gdnative.Int) {
	log.Println("Calling Slider.SetTicks()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(count)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_ticks", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Slider) SetTicksOnBorders(ticksOnBorder gdnative.Bool) {
	log.Println("Calling Slider.SetTicksOnBorders()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ticksOnBorder)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_ticks_on_borders", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SliderImplementer is an interface for Slider objects.
*/
type SliderImplementer interface {
	Class
}
