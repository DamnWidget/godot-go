package visualscript

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Undocumented
*/
type VisualScriptNode struct {
	Resource
}

func (o *VisualScriptNode) BaseClass() string {
	return "VisualScriptNode"
}

/*
   Undocumented
*/
func (o *VisualScriptNode) X_GetDefaultInputValues() *Array {
	log.Println("Calling VisualScriptNode.X_GetDefaultInputValues()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_default_input_values", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptNode) X_SetDefaultInputValues(values *Array) {
	log.Println("Calling VisualScriptNode.X_SetDefaultInputValues()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(values)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_default_input_values", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptNode) GetDefaultInputValue(portIdx gdnative.Int) *Variant {
	log.Println("Calling VisualScriptNode.GetDefaultInputValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(portIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_default_input_value", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptNode) GetVisualScript() *VisualScript {
	log.Println("Calling VisualScriptNode.GetVisualScript()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_visual_script", goArguments, "*VisualScript")

	returnValue := goRet.Interface().(*VisualScript)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptNode) PortsChangedNotify() {
	log.Println("Calling VisualScriptNode.PortsChangedNotify()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "ports_changed_notify", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptNode) SetDefaultInputValue(portIdx gdnative.Int, value *Variant) {
	log.Println("Calling VisualScriptNode.SetDefaultInputValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(portIdx)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_default_input_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptNodeImplementer is an interface for VisualScriptNode objects.
*/
type VisualScriptNodeImplementer interface {
	Class
}
