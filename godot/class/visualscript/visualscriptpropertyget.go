package visualscript

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Undocumented
*/
type VisualScriptPropertyGet struct {
	VisualScriptNode
}

func (o *VisualScriptPropertyGet) BaseClass() string {
	return "VisualScriptPropertyGet"
}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) X_GetTypeCache() gdnative.Int {
	log.Println("Calling VisualScriptPropertyGet.X_GetTypeCache()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_type_cache", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) X_SetTypeCache(typeCache gdnative.Int) {
	log.Println("Calling VisualScriptPropertyGet.X_SetTypeCache()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(typeCache)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_type_cache", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) GetBasePath() *NodePath {
	log.Println("Calling VisualScriptPropertyGet.GetBasePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_base_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) GetBaseScript() gdnative.String {
	log.Println("Calling VisualScriptPropertyGet.GetBaseScript()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_base_script", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) GetBaseType() gdnative.String {
	log.Println("Calling VisualScriptPropertyGet.GetBaseType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_base_type", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) GetBasicType() gdnative.Int {
	log.Println("Calling VisualScriptPropertyGet.GetBasicType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_basic_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) GetCallMode() gdnative.Int {
	log.Println("Calling VisualScriptPropertyGet.GetCallMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_call_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) GetIndex() gdnative.String {
	log.Println("Calling VisualScriptPropertyGet.GetIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_index", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) GetProperty() gdnative.String {
	log.Println("Calling VisualScriptPropertyGet.GetProperty()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_property", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) SetBasePath(basePath *NodePath) {
	log.Println("Calling VisualScriptPropertyGet.SetBasePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(basePath)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_base_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) SetBaseScript(baseScript gdnative.String) {
	log.Println("Calling VisualScriptPropertyGet.SetBaseScript()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(baseScript)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_base_script", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) SetBaseType(baseType gdnative.String) {
	log.Println("Calling VisualScriptPropertyGet.SetBaseType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(baseType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_base_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) SetBasicType(basicType gdnative.Int) {
	log.Println("Calling VisualScriptPropertyGet.SetBasicType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(basicType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_basic_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) SetCallMode(mode gdnative.Int) {
	log.Println("Calling VisualScriptPropertyGet.SetCallMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_call_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) SetIndex(index gdnative.String) {
	log.Println("Calling VisualScriptPropertyGet.SetIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_index", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptPropertyGet) SetProperty(property gdnative.String) {
	log.Println("Calling VisualScriptPropertyGet.SetProperty()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(property)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_property", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptPropertyGetImplementer is an interface for VisualScriptPropertyGet objects.
*/
type VisualScriptPropertyGetImplementer interface {
	Class
}
