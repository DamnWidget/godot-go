package visualscript

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Undocumented
*/
type VisualScript struct {
	Script
}

func (o *VisualScript) BaseClass() string {
	return "VisualScript"
}

/*
   Undocumented
*/
func (o *VisualScript) X_GetData() *Dictionary {
	log.Println("Calling VisualScript.X_GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_data", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) X_NodePortsChanged(arg0 gdnative.Int) {
	log.Println("Calling VisualScript.X_NodePortsChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_node_ports_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) X_SetData(data *Dictionary) {
	log.Println("Calling VisualScript.X_SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) AddCustomSignal(name gdnative.String) {
	log.Println("Calling VisualScript.AddCustomSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_custom_signal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) AddFunction(name gdnative.String) {
	log.Println("Calling VisualScript.AddFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_function", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) AddNode(function gdnative.String, id gdnative.Int, node *VisualScriptNode, position *Vector2) {
	log.Println("Calling VisualScript.AddNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)
	goArguments[2] = reflect.ValueOf(node)
	goArguments[3] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) AddVariable(name gdnative.String, defaultValue *Variant, export gdnative.Bool) {
	log.Println("Calling VisualScript.AddVariable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(defaultValue)
	goArguments[2] = reflect.ValueOf(export)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_variable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) CustomSignalAddArgument(name gdnative.String, aType gdnative.Int, argname gdnative.String, index gdnative.Int) {
	log.Println("Calling VisualScript.CustomSignalAddArgument()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(argname)
	goArguments[3] = reflect.ValueOf(index)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "custom_signal_add_argument", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) CustomSignalGetArgumentCount(name gdnative.String) gdnative.Int {
	log.Println("Calling VisualScript.CustomSignalGetArgumentCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "custom_signal_get_argument_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) CustomSignalGetArgumentName(name gdnative.String, argidx gdnative.Int) gdnative.String {
	log.Println("Calling VisualScript.CustomSignalGetArgumentName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "custom_signal_get_argument_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) CustomSignalGetArgumentType(name gdnative.String, argidx gdnative.Int) gdnative.Int {
	log.Println("Calling VisualScript.CustomSignalGetArgumentType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "custom_signal_get_argument_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) CustomSignalRemoveArgument(name gdnative.String, argidx gdnative.Int) {
	log.Println("Calling VisualScript.CustomSignalRemoveArgument()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "custom_signal_remove_argument", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) CustomSignalSetArgumentName(name gdnative.String, argidx gdnative.Int, argname gdnative.String) {
	log.Println("Calling VisualScript.CustomSignalSetArgumentName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)
	goArguments[2] = reflect.ValueOf(argname)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "custom_signal_set_argument_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) CustomSignalSetArgumentType(name gdnative.String, argidx gdnative.Int, aType gdnative.Int) {
	log.Println("Calling VisualScript.CustomSignalSetArgumentType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)
	goArguments[2] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "custom_signal_set_argument_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) CustomSignalSwapArgument(name gdnative.String, argidx gdnative.Int, withidx gdnative.Int) {
	log.Println("Calling VisualScript.CustomSignalSwapArgument()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(argidx)
	goArguments[2] = reflect.ValueOf(withidx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "custom_signal_swap_argument", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) DataConnect(function gdnative.String, fromNode gdnative.Int, fromPort gdnative.Int, toNode gdnative.Int, toPort gdnative.Int) {
	log.Println("Calling VisualScript.DataConnect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromPort)
	goArguments[3] = reflect.ValueOf(toNode)
	goArguments[4] = reflect.ValueOf(toPort)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "data_connect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) DataDisconnect(function gdnative.String, fromNode gdnative.Int, fromPort gdnative.Int, toNode gdnative.Int, toPort gdnative.Int) {
	log.Println("Calling VisualScript.DataDisconnect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromPort)
	goArguments[3] = reflect.ValueOf(toNode)
	goArguments[4] = reflect.ValueOf(toPort)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "data_disconnect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) GetFunctionNodeId(name gdnative.String) gdnative.Int {
	log.Println("Calling VisualScript.GetFunctionNodeId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_function_node_id", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) GetFunctionScroll(name gdnative.String) *Vector2 {
	log.Println("Calling VisualScript.GetFunctionScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_function_scroll", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) GetNode(function gdnative.String, id gdnative.Int) *VisualScriptNode {
	log.Println("Calling VisualScript.GetNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node", goArguments, "*VisualScriptNode")

	returnValue := goRet.Interface().(*VisualScriptNode)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) GetNodePosition(function gdnative.String, id gdnative.Int) *Vector2 {
	log.Println("Calling VisualScript.GetNodePosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_node_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) GetVariableDefaultValue(name gdnative.String) *Variant {
	log.Println("Calling VisualScript.GetVariableDefaultValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_variable_default_value", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) GetVariableExport(name gdnative.String) gdnative.Bool {
	log.Println("Calling VisualScript.GetVariableExport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_variable_export", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) GetVariableInfo(name gdnative.String) *Dictionary {
	log.Println("Calling VisualScript.GetVariableInfo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_variable_info", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) HasCustomSignal(name gdnative.String) gdnative.Bool {
	log.Println("Calling VisualScript.HasCustomSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_custom_signal", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) HasDataConnection(function gdnative.String, fromNode gdnative.Int, fromPort gdnative.Int, toNode gdnative.Int, toPort gdnative.Int) gdnative.Bool {
	log.Println("Calling VisualScript.HasDataConnection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromPort)
	goArguments[3] = reflect.ValueOf(toNode)
	goArguments[4] = reflect.ValueOf(toPort)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_data_connection", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) HasFunction(name gdnative.String) gdnative.Bool {
	log.Println("Calling VisualScript.HasFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_function", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) HasNode(function gdnative.String, id gdnative.Int) gdnative.Bool {
	log.Println("Calling VisualScript.HasNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_node", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) HasSequenceConnection(function gdnative.String, fromNode gdnative.Int, fromOutput gdnative.Int, toNode gdnative.Int) gdnative.Bool {
	log.Println("Calling VisualScript.HasSequenceConnection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromOutput)
	goArguments[3] = reflect.ValueOf(toNode)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_sequence_connection", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) HasVariable(name gdnative.String) gdnative.Bool {
	log.Println("Calling VisualScript.HasVariable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_variable", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScript) RemoveCustomSignal(name gdnative.String) {
	log.Println("Calling VisualScript.RemoveCustomSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_custom_signal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) RemoveFunction(name gdnative.String) {
	log.Println("Calling VisualScript.RemoveFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_function", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) RemoveNode(function gdnative.String, id gdnative.Int) {
	log.Println("Calling VisualScript.RemoveNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) RemoveVariable(name gdnative.String) {
	log.Println("Calling VisualScript.RemoveVariable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_variable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) RenameCustomSignal(name gdnative.String, newName gdnative.String) {
	log.Println("Calling VisualScript.RenameCustomSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(newName)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "rename_custom_signal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) RenameFunction(name gdnative.String, newName gdnative.String) {
	log.Println("Calling VisualScript.RenameFunction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(newName)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "rename_function", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) RenameVariable(name gdnative.String, newName gdnative.String) {
	log.Println("Calling VisualScript.RenameVariable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(newName)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "rename_variable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) SequenceConnect(function gdnative.String, fromNode gdnative.Int, fromOutput gdnative.Int, toNode gdnative.Int) {
	log.Println("Calling VisualScript.SequenceConnect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromOutput)
	goArguments[3] = reflect.ValueOf(toNode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "sequence_connect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) SequenceDisconnect(function gdnative.String, fromNode gdnative.Int, fromOutput gdnative.Int, toNode gdnative.Int) {
	log.Println("Calling VisualScript.SequenceDisconnect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(fromNode)
	goArguments[2] = reflect.ValueOf(fromOutput)
	goArguments[3] = reflect.ValueOf(toNode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "sequence_disconnect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) SetFunctionScroll(name gdnative.String, ofs *Vector2) {
	log.Println("Calling VisualScript.SetFunctionScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_function_scroll", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) SetInstanceBaseType(aType gdnative.String) {
	log.Println("Calling VisualScript.SetInstanceBaseType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_instance_base_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) SetNodePosition(function gdnative.String, id gdnative.Int, position *Vector2) {
	log.Println("Calling VisualScript.SetNodePosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(function)
	goArguments[1] = reflect.ValueOf(id)
	goArguments[2] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_node_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) SetVariableDefaultValue(name gdnative.String, value *Variant) {
	log.Println("Calling VisualScript.SetVariableDefaultValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_variable_default_value", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) SetVariableExport(name gdnative.String, enable gdnative.Bool) {
	log.Println("Calling VisualScript.SetVariableExport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_variable_export", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScript) SetVariableInfo(name gdnative.String, value *Dictionary) {
	log.Println("Calling VisualScript.SetVariableInfo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_variable_info", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptImplementer is an interface for VisualScript objects.
*/
type VisualScriptImplementer interface {
	Class
}
