package visualscript

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Undocumented
*/
type VisualScriptSubCall struct {
	VisualScriptNode
}

func (o *VisualScriptSubCall) BaseClass() string {
	return "VisualScriptSubCall"
}

/*
   Undocumented
*/
func (o *VisualScriptSubCall) X_Subcall(arguments *Variant) *Variant {
	log.Println("Calling VisualScriptSubCall.X_Subcall()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arguments)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_subcall", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   VisualScriptSubCallImplementer is an interface for VisualScriptSubCall objects.
*/
type VisualScriptSubCallImplementer interface {
	Class
}
