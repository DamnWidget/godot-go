package visualscript

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Undocumented
*/
type VisualScriptDeconstruct struct {
	VisualScriptNode
}

func (o *VisualScriptDeconstruct) BaseClass() string {
	return "VisualScriptDeconstruct"
}

/*
   Undocumented
*/
func (o *VisualScriptDeconstruct) X_GetElemCache() *Array {
	log.Println("Calling VisualScriptDeconstruct.X_GetElemCache()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_elem_cache", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptDeconstruct) X_SetElemCache(cache *Array) {
	log.Println("Calling VisualScriptDeconstruct.X_SetElemCache()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(cache)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_elem_cache", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *VisualScriptDeconstruct) GetDeconstructType() gdnative.Int {
	log.Println("Calling VisualScriptDeconstruct.GetDeconstructType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_deconstruct_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *VisualScriptDeconstruct) SetDeconstructType(aType gdnative.Int) {
	log.Println("Calling VisualScriptDeconstruct.SetDeconstructType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_deconstruct_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   VisualScriptDeconstructImplementer is an interface for VisualScriptDeconstruct objects.
*/
type VisualScriptDeconstructImplementer interface {
	Class
}
