package rayshape

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Ray shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.
*/
type RayShape struct {
	Shape
}

func (o *RayShape) BaseClass() string {
	return "RayShape"
}

/*
   Undocumented
*/
func (o *RayShape) GetLength() gdnative.Float {
	log.Println("Calling RayShape.GetLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_length", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *RayShape) SetLength(length gdnative.Float) {
	log.Println("Calling RayShape.SetLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(length)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   RayShapeImplementer is an interface for RayShape objects.
*/
type RayShapeImplementer interface {
	Class
}
