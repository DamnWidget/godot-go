package tree

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structured displays and interactions. Trees are built via code, using [TreeItem] objects to create the structure. They have a single root but multiple roots can be simulated if a dummy hidden root is added. [codeblock] func _ready(): var tree = Tree.new() var root = tree.create_item() tree.set_hide_root(true) var child1 = tree.create_item(root) var child2 = tree.create_item(root) var subchild1 = tree.create_item(child1) subchild1.set_text(0, "Subchild1") [/codeblock]
*/
type Tree struct {
	Control
}

func (o *Tree) BaseClass() string {
	return "Tree"
}

/*
   Undocumented
*/
func (o *Tree) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling Tree.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) X_PopupSelect(arg0 gdnative.Int) {
	log.Println("Calling Tree.X_PopupSelect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_popup_select", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) X_RangeClickTimeout() {
	log.Println("Calling Tree.X_RangeClickTimeout()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_range_click_timeout", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) X_ScrollMoved(arg0 gdnative.Float) {
	log.Println("Calling Tree.X_ScrollMoved()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_scroll_moved", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) X_TextEditorEnter(arg0 gdnative.String) {
	log.Println("Calling Tree.X_TextEditorEnter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_text_editor_enter", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) X_TextEditorModalClose() {
	log.Println("Calling Tree.X_TextEditorModalClose()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_text_editor_modal_close", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) X_ValueEditorChanged(arg0 gdnative.Float) {
	log.Println("Calling Tree.X_ValueEditorChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_value_editor_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns [code]true[/code] if the column titles are being shown.
*/
func (o *Tree) AreColumnTitlesVisible() gdnative.Bool {
	log.Println("Calling Tree.AreColumnTitlesVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "are_column_titles_visible", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Clears the tree. This removes all items.
*/
func (o *Tree) Clear() {
	log.Println("Calling Tree.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create an item in the tree and add it as the last child of [code]parent[/code]. If parent is not given, it will be added as the root's last child, or it'll the be the root itself if the tree is empty.
*/
func (o *Tree) CreateItem(parent *Object, idx gdnative.Int) *Object {
	log.Println("Calling Tree.CreateItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(parent)
	goArguments[1] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "create_item", goArguments, "*Object")

	returnValue := goRet.Interface().(*Object)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Makes the currently selected item visible. This will scroll the tree to make sure the selected item is visible.
*/
func (o *Tree) EnsureCursorIsVisible() {
	log.Println("Calling Tree.EnsureCursorIsVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "ensure_cursor_is_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) GetAllowReselect() gdnative.Bool {
	log.Println("Calling Tree.GetAllowReselect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_allow_reselect", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tree) GetAllowRmbSelect() gdnative.Bool {
	log.Println("Calling Tree.GetAllowRmbSelect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_allow_rmb_select", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the column index under the given point.
*/
func (o *Tree) GetColumnAtPosition(position *Vector2) gdnative.Int {
	log.Println("Calling Tree.GetColumnAtPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_column_at_position", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the column's title.
*/
func (o *Tree) GetColumnTitle(column gdnative.Int) gdnative.String {
	log.Println("Calling Tree.GetColumnTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(column)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_column_title", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the column's width in pixels.
*/
func (o *Tree) GetColumnWidth(column gdnative.Int) gdnative.Int {
	log.Println("Calling Tree.GetColumnWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(column)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_column_width", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tree) GetColumns() gdnative.Int {
	log.Println("Calling Tree.GetColumns()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_columns", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See [method TreeItem.set_cell_mode].
*/
func (o *Tree) GetCustomPopupRect() *Rect2 {
	log.Println("Calling Tree.GetCustomPopupRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_custom_popup_rect", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tree) GetDropModeFlags() gdnative.Int {
	log.Println("Calling Tree.GetDropModeFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_drop_mode_flags", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Tree) GetDropSectionAtPosition(position *Vector2) gdnative.Int {
	log.Println("Calling Tree.GetDropSectionAtPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_drop_section_at_position", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the currently edited item. This is only available for custom cell mode.
*/
func (o *Tree) GetEdited() *TreeItem {
	log.Println("Calling Tree.GetEdited()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_edited", goArguments, "*TreeItem")

	returnValue := goRet.Interface().(*TreeItem)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the column for the currently edited item. This is only available for custom cell mode.
*/
func (o *Tree) GetEditedColumn() gdnative.Int {
	log.Println("Calling Tree.GetEditedColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_edited_column", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the rectangle area for the specified item. If column is specified, only get the position and size of that column, otherwise get the rectangle containing all columns.
*/
func (o *Tree) GetItemAreaRect(item *Object, column gdnative.Int) *Rect2 {
	log.Println("Calling Tree.GetItemAreaRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(column)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_item_area_rect", goArguments, "*Rect2")

	returnValue := goRet.Interface().(*Rect2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the tree item at the specified position (relative to the tree origin position).
*/
func (o *Tree) GetItemAtPosition(position *Vector2) *TreeItem {
	log.Println("Calling Tree.GetItemAtPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_item_at_position", goArguments, "*TreeItem")

	returnValue := goRet.Interface().(*TreeItem)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the next selected item after the given one.
*/
func (o *Tree) GetNextSelected(from *Object) *TreeItem {
	log.Println("Calling Tree.GetNextSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(from)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_next_selected", goArguments, "*TreeItem")

	returnValue := goRet.Interface().(*TreeItem)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the last pressed button's index.
*/
func (o *Tree) GetPressedButton() gdnative.Int {
	log.Println("Calling Tree.GetPressedButton()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_pressed_button", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the tree's root item.
*/
func (o *Tree) GetRoot() *TreeItem {
	log.Println("Calling Tree.GetRoot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_root", goArguments, "*TreeItem")

	returnValue := goRet.Interface().(*TreeItem)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the current scrolling position.
*/
func (o *Tree) GetScroll() *Vector2 {
	log.Println("Calling Tree.GetScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scroll", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tree) GetSelectMode() gdnative.Int {
	log.Println("Calling Tree.GetSelectMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_select_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the currently selected item.
*/
func (o *Tree) GetSelected() *TreeItem {
	log.Println("Calling Tree.GetSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_selected", goArguments, "*TreeItem")

	returnValue := goRet.Interface().(*TreeItem)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the current selection's column.
*/
func (o *Tree) GetSelectedColumn() gdnative.Int {
	log.Println("Calling Tree.GetSelectedColumn()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_selected_column", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tree) IsFoldingHidden() gdnative.Bool {
	log.Println("Calling Tree.IsFoldingHidden()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_folding_hidden", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tree) IsRootHidden() gdnative.Bool {
	log.Println("Calling Tree.IsRootHidden()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_root_hidden", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Tree) SetAllowReselect(allow gdnative.Bool) {
	log.Println("Calling Tree.SetAllowReselect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(allow)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_allow_reselect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) SetAllowRmbSelect(allow gdnative.Bool) {
	log.Println("Calling Tree.SetAllowRmbSelect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(allow)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_allow_rmb_select", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the column will have the "Expand" flag of [Control].
*/
func (o *Tree) SetColumnExpand(column gdnative.Int, expand gdnative.Bool) {
	log.Println("Calling Tree.SetColumnExpand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(column)
	goArguments[1] = reflect.ValueOf(expand)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_column_expand", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the minimum width of a column.
*/
func (o *Tree) SetColumnMinWidth(column gdnative.Int, minWidth gdnative.Int) {
	log.Println("Calling Tree.SetColumnMinWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(column)
	goArguments[1] = reflect.ValueOf(minWidth)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_column_min_width", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the title of a column.
*/
func (o *Tree) SetColumnTitle(column gdnative.Int, title gdnative.String) {
	log.Println("Calling Tree.SetColumnTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(column)
	goArguments[1] = reflect.ValueOf(title)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_column_title", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] column titles are visible.
*/
func (o *Tree) SetColumnTitlesVisible(visible gdnative.Bool) {
	log.Println("Calling Tree.SetColumnTitlesVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(visible)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_column_titles_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) SetColumns(amount gdnative.Int) {
	log.Println("Calling Tree.SetColumns()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_columns", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) SetDropModeFlags(flags gdnative.Int) {
	log.Println("Calling Tree.SetDropModeFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_drop_mode_flags", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) SetHideFolding(hide gdnative.Bool) {
	log.Println("Calling Tree.SetHideFolding()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hide)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_hide_folding", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) SetHideRoot(enable gdnative.Bool) {
	log.Println("Calling Tree.SetHideRoot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_hide_root", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Tree) SetSelectMode(mode gdnative.Int) {
	log.Println("Calling Tree.SetSelectMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_select_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TreeImplementer is an interface for Tree objects.
*/
type TreeImplementer interface {
	Class
}
