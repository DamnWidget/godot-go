package shader

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
To be changed, ignore.
*/
type Shader struct {
	Resource
}

func (o *Shader) BaseClass() string {
	return "Shader"
}

/*
   Undocumented
*/
func (o *Shader) GetCode() gdnative.String {
	log.Println("Calling Shader.GetCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_code", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Shader) GetDefaultTextureParam(param gdnative.String) *Texture {
	log.Println("Calling Shader.GetDefaultTextureParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_default_texture_param", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Shader) GetMode() gdnative.Int {
	log.Println("Calling Shader.GetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Shader) HasParam(name gdnative.String) gdnative.Bool {
	log.Println("Calling Shader.HasParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_param", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Shader) SetCode(code gdnative.String) {
	log.Println("Calling Shader.SetCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(code)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_code", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Shader) SetDefaultTextureParam(param gdnative.String, texture *Texture) {
	log.Println("Calling Shader.SetDefaultTextureParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_default_texture_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ShaderImplementer is an interface for Shader objects.
*/
type ShaderImplementer interface {
	Class
}
