package cubemap

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A 6-sided 3D texture typically used for faking reflections. It can be used to make an object look as if it's reflecting its surroundings. This usually delivers much better performance than other reflection methods.
*/
type CubeMap struct {
	Resource
}

func (o *CubeMap) BaseClass() string {
	return "CubeMap"
}

/*
   Undocumented
*/
func (o *CubeMap) GetFlags() gdnative.Int {
	log.Println("Calling CubeMap.GetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_flags", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [code]CubeMap[/code]'s height.
*/
func (o *CubeMap) GetHeight() gdnative.Int {
	log.Println("Calling CubeMap.GetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_height", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CubeMap) GetLossyStorageQuality() gdnative.Float {
	log.Println("Calling CubeMap.GetLossyStorageQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_lossy_storage_quality", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.
*/
func (o *CubeMap) GetSide(side gdnative.Int) *Image {
	log.Println("Calling CubeMap.GetSide()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(side)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_side", goArguments, "*Image")

	returnValue := goRet.Interface().(*Image)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CubeMap) GetStorage() gdnative.Int {
	log.Println("Calling CubeMap.GetStorage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_storage", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [code]CubeMap[/code]'s width.
*/
func (o *CubeMap) GetWidth() gdnative.Int {
	log.Println("Calling CubeMap.GetWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_width", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CubeMap) SetFlags(flags gdnative.Int) {
	log.Println("Calling CubeMap.SetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_flags", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *CubeMap) SetLossyStorageQuality(quality gdnative.Float) {
	log.Println("Calling CubeMap.SetLossyStorageQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(quality)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_lossy_storage_quality", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.
*/
func (o *CubeMap) SetSide(side gdnative.Int, image *Image) {
	log.Println("Calling CubeMap.SetSide()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(side)
	goArguments[1] = reflect.ValueOf(image)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_side", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *CubeMap) SetStorage(mode gdnative.Int) {
	log.Println("Calling CubeMap.SetStorage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_storage", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CubeMapImplementer is an interface for CubeMap objects.
*/
type CubeMapImplementer interface {
	Class
}
