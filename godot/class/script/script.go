package script

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A class stored as a resource. The script exends the functionality of all objects that instance it. The 'new' method of a script subclass creates a new instance. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.
*/
type Script struct {
	Resource
}

func (o *Script) BaseClass() string {
	return "Script"
}

/*
   Returns true if the script can be instanced.
*/
func (o *Script) CanInstance() gdnative.Bool {
	log.Println("Calling Script.CanInstance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "can_instance", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Script) GetBaseScript() *Script {
	log.Println("Calling Script.GetBaseScript()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_base_script", goArguments, "*Script")

	returnValue := goRet.Interface().(*Script)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Script) GetInstanceBaseType() gdnative.String {
	log.Println("Calling Script.GetInstanceBaseType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_instance_base_type", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Script) GetSourceCode() gdnative.String {
	log.Println("Calling Script.GetSourceCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_source_code", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the script, or a base class, defines a signal with the given name.
*/
func (o *Script) HasScriptSignal(signalName gdnative.String) gdnative.Bool {
	log.Println("Calling Script.HasScriptSignal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(signalName)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_script_signal", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the script contains non-empty source code.
*/
func (o *Script) HasSourceCode() gdnative.Bool {
	log.Println("Calling Script.HasSourceCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_source_code", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if 'base_object' is an instance of this script.
*/
func (o *Script) InstanceHas(baseObject *Object) gdnative.Bool {
	log.Println("Calling Script.InstanceHas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(baseObject)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "instance_has", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the script is a tool script. A tool script can run in the editor.
*/
func (o *Script) IsTool() gdnative.Bool {
	log.Println("Calling Script.IsTool()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_tool", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Reloads the script's class implementation. Returns an error code.
*/
func (o *Script) Reload(keepState gdnative.Bool) gdnative.Int {
	log.Println("Calling Script.Reload()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(keepState)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "reload", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Script) SetSourceCode(source gdnative.String) {
	log.Println("Calling Script.SetSourceCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(source)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_source_code", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ScriptImplementer is an interface for Script objects.
*/
type ScriptImplementer interface {
	Class
}
