package meshlibrary

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Library of meshes. Contains a list of [Mesh] resources, each with name and ID. Useful for GridMap or painting Terrain.
*/
type MeshLibrary struct {
	Resource
}

func (o *MeshLibrary) BaseClass() string {
	return "MeshLibrary"
}

/*
   Clear the library.
*/
func (o *MeshLibrary) Clear() {
	log.Println("Calling MeshLibrary.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create a new item in the library, supplied an id.
*/
func (o *MeshLibrary) CreateItem(id gdnative.Int) {
	log.Println("Calling MeshLibrary.CreateItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "create_item", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshLibrary) FindItemByName(name gdnative.String) gdnative.Int {
	log.Println("Calling MeshLibrary.FindItemByName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "find_item_by_name", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the list of items.
*/
func (o *MeshLibrary) GetItemList() *PoolIntArray {
	log.Println("Calling MeshLibrary.GetItemList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_item_list", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the mesh of the item.
*/
func (o *MeshLibrary) GetItemMesh(id gdnative.Int) *Mesh {
	log.Println("Calling MeshLibrary.GetItemMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_item_mesh", goArguments, "*Mesh")

	returnValue := goRet.Interface().(*Mesh)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the name of the item.
*/
func (o *MeshLibrary) GetItemName(id gdnative.Int) gdnative.String {
	log.Println("Calling MeshLibrary.GetItemName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_item_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshLibrary) GetItemNavmesh(id gdnative.Int) *NavigationMesh {
	log.Println("Calling MeshLibrary.GetItemNavmesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_item_navmesh", goArguments, "*NavigationMesh")

	returnValue := goRet.Interface().(*NavigationMesh)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshLibrary) GetItemPreview(id gdnative.Int) *Texture {
	log.Println("Calling MeshLibrary.GetItemPreview()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_item_preview", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *MeshLibrary) GetItemShapes(id gdnative.Int) *Array {
	log.Println("Calling MeshLibrary.GetItemShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_item_shapes", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get an unused id for a new item.
*/
func (o *MeshLibrary) GetLastUnusedItemId() gdnative.Int {
	log.Println("Calling MeshLibrary.GetLastUnusedItemId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_last_unused_item_id", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Remove the item.
*/
func (o *MeshLibrary) RemoveItem(id gdnative.Int) {
	log.Println("Calling MeshLibrary.RemoveItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_item", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the mesh of the item.
*/
func (o *MeshLibrary) SetItemMesh(id gdnative.Int, mesh *Mesh) {
	log.Println("Calling MeshLibrary.SetItemMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(mesh)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_item_mesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the name of the item.
*/
func (o *MeshLibrary) SetItemName(id gdnative.Int, name gdnative.String) {
	log.Println("Calling MeshLibrary.SetItemName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_item_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshLibrary) SetItemNavmesh(id gdnative.Int, navmesh *NavigationMesh) {
	log.Println("Calling MeshLibrary.SetItemNavmesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(navmesh)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_item_navmesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshLibrary) SetItemPreview(id gdnative.Int, texture *Texture) {
	log.Println("Calling MeshLibrary.SetItemPreview()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_item_preview", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *MeshLibrary) SetItemShapes(id gdnative.Int, shapes *Array) {
	log.Println("Calling MeshLibrary.SetItemShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(id)
	goArguments[1] = reflect.ValueOf(shapes)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_item_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   MeshLibraryImplementer is an interface for MeshLibrary objects.
*/
type MeshLibraryImplementer interface {
	Class
}
