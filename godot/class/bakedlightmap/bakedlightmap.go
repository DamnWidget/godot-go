package bakedlightmap

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type BakedLightmap struct {
	VisualInstance
}

func (o *BakedLightmap) BaseClass() string {
	return "BakedLightmap"
}

/*

 */
func (o *BakedLightmap) Bake(fromNode *Object, createVisualDebug gdnative.Bool) gdnative.Int {
	log.Println("Calling BakedLightmap.Bake()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(fromNode)
	goArguments[1] = reflect.ValueOf(createVisualDebug)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "bake", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *BakedLightmap) DebugBake() {
	log.Println("Calling BakedLightmap.DebugBake()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "debug_bake", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) GetBakeCellSize() gdnative.Float {
	log.Println("Calling BakedLightmap.GetBakeCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bake_cell_size", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) GetBakeMode() gdnative.Int {
	log.Println("Calling BakedLightmap.GetBakeMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bake_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) GetBakeQuality() gdnative.Int {
	log.Println("Calling BakedLightmap.GetBakeQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bake_quality", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) GetCaptureCellSize() gdnative.Float {
	log.Println("Calling BakedLightmap.GetCaptureCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_capture_cell_size", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) GetEnergy() gdnative.Float {
	log.Println("Calling BakedLightmap.GetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_energy", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) GetExtents() *Vector3 {
	log.Println("Calling BakedLightmap.GetExtents()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_extents", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) GetImagePath() gdnative.String {
	log.Println("Calling BakedLightmap.GetImagePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_image_path", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) GetLightData() *BakedLightmapData {
	log.Println("Calling BakedLightmap.GetLightData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_light_data", goArguments, "*BakedLightmapData")

	returnValue := goRet.Interface().(*BakedLightmapData)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) GetPropagation() gdnative.Float {
	log.Println("Calling BakedLightmap.GetPropagation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_propagation", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) IsHdr() gdnative.Bool {
	log.Println("Calling BakedLightmap.IsHdr()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_hdr", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetBakeCellSize(bakeCellSize gdnative.Float) {
	log.Println("Calling BakedLightmap.SetBakeCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bakeCellSize)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bake_cell_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetBakeMode(bakeMode gdnative.Int) {
	log.Println("Calling BakedLightmap.SetBakeMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bakeMode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bake_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetBakeQuality(bakeQuality gdnative.Int) {
	log.Println("Calling BakedLightmap.SetBakeQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bakeQuality)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bake_quality", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetCaptureCellSize(captureCellSize gdnative.Float) {
	log.Println("Calling BakedLightmap.SetCaptureCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(captureCellSize)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_capture_cell_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetEnergy(energy gdnative.Float) {
	log.Println("Calling BakedLightmap.SetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetExtents(extents *Vector3) {
	log.Println("Calling BakedLightmap.SetExtents()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(extents)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_extents", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetHdr(hdr gdnative.Bool) {
	log.Println("Calling BakedLightmap.SetHdr()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hdr)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_hdr", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetImagePath(imagePath gdnative.String) {
	log.Println("Calling BakedLightmap.SetImagePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(imagePath)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_image_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetLightData(data *BakedLightmapData) {
	log.Println("Calling BakedLightmap.SetLightData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_light_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *BakedLightmap) SetPropagation(propagation gdnative.Float) {
	log.Println("Calling BakedLightmap.SetPropagation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(propagation)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_propagation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   BakedLightmapImplementer is an interface for BakedLightmap objects.
*/
type BakedLightmapImplementer interface {
	Class
}
