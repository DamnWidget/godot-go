package primitivemesh

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.
*/
type PrimitiveMesh struct {
	Mesh
}

func (o *PrimitiveMesh) BaseClass() string {
	return "PrimitiveMesh"
}

/*
   Undocumented
*/
func (o *PrimitiveMesh) X_Update() {
	log.Println("Calling PrimitiveMesh.X_Update()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_update", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *PrimitiveMesh) GetMaterial() *Material {
	log.Println("Calling PrimitiveMesh.GetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_material", goArguments, "*Material")

	returnValue := goRet.Interface().(*Material)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *PrimitiveMesh) GetMeshArrays() *Array {
	log.Println("Calling PrimitiveMesh.GetMeshArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_mesh_arrays", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PrimitiveMesh) SetMaterial(material *Material) {
	log.Println("Calling PrimitiveMesh.SetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PrimitiveMeshImplementer is an interface for PrimitiveMesh objects.
*/
type PrimitiveMeshImplementer interface {
	Class
}
