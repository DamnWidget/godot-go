package directionallight

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
	"github.com/shadowapex/godot-go/godot/class/light"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewDirectionalLightFromPointer(ptr gdnative.Pointer) *DirectionalLight {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := DirectionalLight{}
	obj.SetOwner(owner)

	return &obj

}

/*
A DirectionalLight is a type of [Light] node that emits light constantly in one direction (the negative z axis of the node). It is used lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored, only the basis is used do determine light direction.
*/
type DirectionalLight struct {
	light.Light
}

func (o *DirectionalLight) BaseClass() string {
	return "DirectionalLight"
}

/*
        Undocumented
	Args: [], Returns: enum.DirectionalLight::ShadowDepthRange
*/

/*
        Undocumented
	Args: [], Returns: enum.DirectionalLight::ShadowMode
*/

/*
        Undocumented
	Args: [], Returns: bool
*/

func (o *DirectionalLight) IsBlendSplitsEnabled() gdnative.Bool {
	log.Println("Calling DirectionalLight.IsBlendSplitsEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("DirectionalLight", "is_blend_splits_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/

func (o *DirectionalLight) SetBlendSplits(enabled gdnative.Bool) {
	log.Println("Calling DirectionalLight.SetBlendSplits()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("DirectionalLight", "set_blend_splits")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/

func (o *DirectionalLight) SetShadowDepthRange(mode gdnative.Int) {
	log.Println("Calling DirectionalLight.SetShadowDepthRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("DirectionalLight", "set_shadow_depth_range")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/

func (o *DirectionalLight) SetShadowMode(mode gdnative.Int) {
	log.Println("Calling DirectionalLight.SetShadowMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("DirectionalLight", "set_shadow_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
