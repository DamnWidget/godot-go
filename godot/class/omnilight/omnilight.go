package omnilight

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
An OmniDirectional light is a type of [Light] node that emits lights in all directions. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light].
*/
type OmniLight struct {
	Light
}

func (o *OmniLight) BaseClass() string {
	return "OmniLight"
}

/*
   Undocumented
*/
func (o *OmniLight) GetShadowDetail() gdnative.Int {
	log.Println("Calling OmniLight.GetShadowDetail()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_shadow_detail", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *OmniLight) GetShadowMode() gdnative.Int {
	log.Println("Calling OmniLight.GetShadowMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_shadow_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *OmniLight) SetShadowDetail(detail gdnative.Int) {
	log.Println("Calling OmniLight.SetShadowDetail()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(detail)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_shadow_detail", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *OmniLight) SetShadowMode(mode gdnative.Int) {
	log.Println("Calling OmniLight.SetShadowMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_shadow_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   OmniLightImplementer is an interface for OmniLight objects.
*/
type OmniLightImplementer interface {
	Class
}
