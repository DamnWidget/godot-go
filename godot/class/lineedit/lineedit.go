package lineedit

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
LineEdit provides a single line string editor, used for text fields.
*/
type LineEdit struct {
	Control
}

func (o *LineEdit) BaseClass() string {
	return "LineEdit"
}

/*
   Undocumented
*/
func (o *LineEdit) X_EditorSettingsChanged() {
	log.Println("Calling LineEdit.X_EditorSettingsChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_editor_settings_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling LineEdit.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) X_TextChanged() {
	log.Println("Calling LineEdit.X_TextChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_text_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) X_ToggleDrawCaret() {
	log.Println("Calling LineEdit.X_ToggleDrawCaret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_toggle_draw_caret", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds [code]text[/code] after the cursor. If the resulting value is longer than [member max_length], nothing happens.
*/
func (o *LineEdit) AppendAtCursor(text gdnative.String) {
	log.Println("Calling LineEdit.AppendAtCursor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "append_at_cursor", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Erases the [LineEdit] text.
*/
func (o *LineEdit) Clear() {
	log.Println("Calling LineEdit.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) CursorGetBlinkEnabled() gdnative.Bool {
	log.Println("Calling LineEdit.CursorGetBlinkEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "cursor_get_blink_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) CursorGetBlinkSpeed() gdnative.Float {
	log.Println("Calling LineEdit.CursorGetBlinkSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "cursor_get_blink_speed", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) CursorSetBlinkEnabled(enabled gdnative.Bool) {
	log.Println("Calling LineEdit.CursorSetBlinkEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "cursor_set_blink_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) CursorSetBlinkSpeed(blinkSpeed gdnative.Float) {
	log.Println("Calling LineEdit.CursorSetBlinkSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(blinkSpeed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "cursor_set_blink_speed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears the current selection.
*/
func (o *LineEdit) Deselect() {
	log.Println("Calling LineEdit.Deselect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "deselect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) GetAlign() gdnative.Int {
	log.Println("Calling LineEdit.GetAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_align", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) GetCursorPosition() gdnative.Int {
	log.Println("Calling LineEdit.GetCursorPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_cursor_position", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) GetExpandToTextLength() gdnative.Bool {
	log.Println("Calling LineEdit.GetExpandToTextLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_expand_to_text_length", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) GetMaxLength() gdnative.Int {
	log.Println("Calling LineEdit.GetMaxLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_max_length", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [PopupMenu] of this [code]LineEdit[/code]. By default, this menu is displayed when right-clicking on the [LineEdit].
*/
func (o *LineEdit) GetMenu() *PopupMenu {
	log.Println("Calling LineEdit.GetMenu()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_menu", goArguments, "*PopupMenu")

	returnValue := goRet.Interface().(*PopupMenu)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) GetPlaceholder() gdnative.String {
	log.Println("Calling LineEdit.GetPlaceholder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_placeholder", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) GetPlaceholderAlpha() gdnative.Float {
	log.Println("Calling LineEdit.GetPlaceholderAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_placeholder_alpha", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) GetText() gdnative.String {
	log.Println("Calling LineEdit.GetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_text", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) IsContextMenuEnabled() gdnative.Bool {
	log.Println("Calling LineEdit.IsContextMenuEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_context_menu_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) IsEditable() gdnative.Bool {
	log.Println("Calling LineEdit.IsEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_editable", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *LineEdit) IsSecret() gdnative.Bool {
	log.Println("Calling LineEdit.IsSecret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_secret", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Executes a given action as defined in the MENU_* enum.
*/
func (o *LineEdit) MenuOption(option gdnative.Int) {
	log.Println("Calling LineEdit.MenuOption()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(option)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "menu_option", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Selects characters inside [LineEdit] between [code]from[/code] and [code]to[/code]. By default [code]from[/code] is at the beginning and [code]to[/code] at the end. [codeblock] text = "Welcome" select() # Welcome select(4) # ome select(2, 5) # lco [/codeblock]
*/
func (o *LineEdit) Select(from gdnative.Int, to gdnative.Int) {
	log.Println("Calling LineEdit.Select()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(to)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "select", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Selects the whole [String].
*/
func (o *LineEdit) SelectAll() {
	log.Println("Calling LineEdit.SelectAll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "select_all", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetAlign(align gdnative.Int) {
	log.Println("Calling LineEdit.SetAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetContextMenuEnabled(enable gdnative.Bool) {
	log.Println("Calling LineEdit.SetContextMenuEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_context_menu_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetCursorPosition(position gdnative.Int) {
	log.Println("Calling LineEdit.SetCursorPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_cursor_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetEditable(enabled gdnative.Bool) {
	log.Println("Calling LineEdit.SetEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_editable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetExpandToTextLength(enabled gdnative.Bool) {
	log.Println("Calling LineEdit.SetExpandToTextLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_expand_to_text_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetMaxLength(chars gdnative.Int) {
	log.Println("Calling LineEdit.SetMaxLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(chars)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_max_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetPlaceholder(text gdnative.String) {
	log.Println("Calling LineEdit.SetPlaceholder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_placeholder", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetPlaceholderAlpha(alpha gdnative.Float) {
	log.Println("Calling LineEdit.SetPlaceholderAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(alpha)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_placeholder_alpha", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetSecret(enabled gdnative.Bool) {
	log.Println("Calling LineEdit.SetSecret()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_secret", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *LineEdit) SetText(text gdnative.String) {
	log.Println("Calling LineEdit.SetText()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(text)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_text", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   LineEditImplementer is an interface for LineEdit objects.
*/
type LineEditImplementer interface {
	Class
}
