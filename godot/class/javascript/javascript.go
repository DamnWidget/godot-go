package javascript

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func newSingletonJavaScript() *javaScript {
	obj := &javaScript{}
	ptr := C.godot_global_get_singleton(C.CString("JavaScript"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*
   The JavaScript singleton is implemented only in HTML5 export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs.
*/
var JavaScript = newSingletonJavaScript()

/*
The JavaScript singleton is implemented only in HTML5 export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs.
*/
type javaScript struct {
	Object
}

func (o *javaScript) BaseClass() string {
	return "JavaScript"
}

/*
   Execute the string [code]code[/code] as JavaScript code within the browser window. This is a call to the actual global JavaScript function [code]eval()[/code]. If [code]use_global_execution_context[/code] is [code]true[/code], the code will be evaluated in the global execution context. Otherwise, it is evaluated in the execution context of a function within the engine's runtime environment.
*/
func (o *javaScript) Eval(code gdnative.String, useGlobalExecutionContext gdnative.Bool) *Variant {
	log.Println("Calling JavaScript.Eval()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(code)
	goArguments[1] = reflect.ValueOf(useGlobalExecutionContext)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "eval", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}
