package pathfollow2d

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
This node takes its parent [Path2D], and returns the coordinates of a point within it, given a distance from the first vertex. It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.
*/
type PathFollow2D struct {
	Node2D
}

func (o *PathFollow2D) BaseClass() string {
	return "PathFollow2D"
}

/*
   Undocumented
*/
func (o *PathFollow2D) GetCubicInterpolation() gdnative.Bool {
	log.Println("Calling PathFollow2D.GetCubicInterpolation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_cubic_interpolation", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PathFollow2D) GetHOffset() gdnative.Float {
	log.Println("Calling PathFollow2D.GetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_h_offset", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PathFollow2D) GetLookahead() gdnative.Float {
	log.Println("Calling PathFollow2D.GetLookahead()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_lookahead", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PathFollow2D) GetOffset() gdnative.Float {
	log.Println("Calling PathFollow2D.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_offset", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PathFollow2D) GetUnitOffset() gdnative.Float {
	log.Println("Calling PathFollow2D.GetUnitOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_unit_offset", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PathFollow2D) GetVOffset() gdnative.Float {
	log.Println("Calling PathFollow2D.GetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_v_offset", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PathFollow2D) HasLoop() gdnative.Bool {
	log.Println("Calling PathFollow2D.HasLoop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_loop", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PathFollow2D) IsRotating() gdnative.Bool {
	log.Println("Calling PathFollow2D.IsRotating()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_rotating", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PathFollow2D) SetCubicInterpolation(enable gdnative.Bool) {
	log.Println("Calling PathFollow2D.SetCubicInterpolation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_cubic_interpolation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *PathFollow2D) SetHOffset(hOffset gdnative.Float) {
	log.Println("Calling PathFollow2D.SetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(hOffset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_h_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *PathFollow2D) SetLookahead(lookahead gdnative.Float) {
	log.Println("Calling PathFollow2D.SetLookahead()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(lookahead)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_lookahead", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *PathFollow2D) SetLoop(loop gdnative.Bool) {
	log.Println("Calling PathFollow2D.SetLoop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(loop)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_loop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *PathFollow2D) SetOffset(offset gdnative.Float) {
	log.Println("Calling PathFollow2D.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *PathFollow2D) SetRotate(enable gdnative.Bool) {
	log.Println("Calling PathFollow2D.SetRotate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_rotate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *PathFollow2D) SetUnitOffset(unitOffset gdnative.Float) {
	log.Println("Calling PathFollow2D.SetUnitOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(unitOffset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_unit_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *PathFollow2D) SetVOffset(vOffset gdnative.Float) {
	log.Println("Calling PathFollow2D.SetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vOffset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_v_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PathFollow2DImplementer is an interface for PathFollow2D objects.
*/
type PathFollow2DImplementer interface {
	Class
}
