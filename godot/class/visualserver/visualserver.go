package visualserver

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func newSingletonVisualServer() *visualServer {
	obj := &visualServer{}
	ptr := C.godot_global_get_singleton(C.CString("VisualServer"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*
   Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display. The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.
*/
var VisualServer = newSingletonVisualServer()

/*
Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display. The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.
*/
type visualServer struct {
	Object
}

func (o *visualServer) BaseClass() string {
	return "VisualServer"
}

/*
   Sets images to be rendered in the window margin.
*/
func (o *visualServer) BlackBarsSetImages(left *RID, top *RID, right *RID, bottom *RID) {
	log.Println("Calling VisualServer.BlackBarsSetImages()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(left)
	goArguments[1] = reflect.ValueOf(top)
	goArguments[2] = reflect.ValueOf(right)
	goArguments[3] = reflect.ValueOf(bottom)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "black_bars_set_images", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets margin size, where black bars (or images, if [method black_bars_set_images] was used) are rendered.
*/
func (o *visualServer) BlackBarsSetMargins(left gdnative.Int, top gdnative.Int, right gdnative.Int, bottom gdnative.Int) {
	log.Println("Calling VisualServer.BlackBarsSetMargins()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(left)
	goArguments[1] = reflect.ValueOf(top)
	goArguments[2] = reflect.ValueOf(right)
	goArguments[3] = reflect.ValueOf(bottom)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "black_bars_set_margins", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CameraCreate() *RID {
	log.Println("Calling VisualServer.CameraCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "camera_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) CameraSetCullMask(camera *RID, layers gdnative.Int) {
	log.Println("Calling VisualServer.CameraSetCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(camera)
	goArguments[1] = reflect.ValueOf(layers)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "camera_set_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CameraSetEnvironment(camera *RID, env *RID) {
	log.Println("Calling VisualServer.CameraSetEnvironment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(camera)
	goArguments[1] = reflect.ValueOf(env)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "camera_set_environment", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CameraSetOrthogonal(camera *RID, size gdnative.Float, zNear gdnative.Float, zFar gdnative.Float) {
	log.Println("Calling VisualServer.CameraSetOrthogonal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(camera)
	goArguments[1] = reflect.ValueOf(size)
	goArguments[2] = reflect.ValueOf(zNear)
	goArguments[3] = reflect.ValueOf(zFar)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "camera_set_orthogonal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CameraSetPerspective(camera *RID, fovyDegrees gdnative.Float, zNear gdnative.Float, zFar gdnative.Float) {
	log.Println("Calling VisualServer.CameraSetPerspective()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(camera)
	goArguments[1] = reflect.ValueOf(fovyDegrees)
	goArguments[2] = reflect.ValueOf(zNear)
	goArguments[3] = reflect.ValueOf(zFar)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "camera_set_perspective", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CameraSetTransform(camera *RID, transform *Transform) {
	log.Println("Calling VisualServer.CameraSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(camera)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "camera_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CameraSetUseVerticalAspect(camera *RID, enable gdnative.Bool) {
	log.Println("Calling VisualServer.CameraSetUseVerticalAspect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(camera)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "camera_set_use_vertical_aspect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a canvas and returns the assigned [RID].
*/
func (o *visualServer) CanvasCreate() *RID {
	log.Println("Calling VisualServer.CanvasCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "canvas_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Adds a circle command to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddCircle(item *RID, pos *Vector2, radius gdnative.Float, color *Color) {
	log.Println("Calling VisualServer.CanvasItemAddCircle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(pos)
	goArguments[2] = reflect.ValueOf(radius)
	goArguments[3] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_circle", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If ignore is [code]true[/code], the VisualServer does not perform clipping.
*/
func (o *visualServer) CanvasItemAddClipIgnore(item *RID, ignore gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemAddClipIgnore()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(ignore)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_clip_ignore", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a line command to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddLine(item *RID, from *Vector2, to *Vector2, color *Color, width gdnative.Float, antialiased gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemAddLine()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 6, 6)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(from)
	goArguments[2] = reflect.ValueOf(to)
	goArguments[3] = reflect.ValueOf(color)
	goArguments[4] = reflect.ValueOf(width)
	goArguments[5] = reflect.ValueOf(antialiased)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_line", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a [Mesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.
*/
func (o *visualServer) CanvasItemAddMesh(item *RID, mesh *RID, skeleton *RID) {
	log.Println("Calling VisualServer.CanvasItemAddMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(mesh)
	goArguments[2] = reflect.ValueOf(skeleton)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_mesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a [MultiMesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.
*/
func (o *visualServer) CanvasItemAddMultimesh(item *RID, mesh *RID, skeleton *RID) {
	log.Println("Calling VisualServer.CanvasItemAddMultimesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(mesh)
	goArguments[2] = reflect.ValueOf(skeleton)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_multimesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a nine patch image to the [CanvasItem]'s draw commands. See [NinePatchRect] for more explanation.
*/
func (o *visualServer) CanvasItemAddNinePatch(item *RID, rect *Rect2, source *Rect2, texture *RID, topleft *Vector2, bottomright *Vector2, xAxisMode gdnative.Int, yAxisMode gdnative.Int, drawCenter gdnative.Bool, modulate *Color, normalMap *RID) {
	log.Println("Calling VisualServer.CanvasItemAddNinePatch()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 11, 11)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(rect)
	goArguments[2] = reflect.ValueOf(source)
	goArguments[3] = reflect.ValueOf(texture)
	goArguments[4] = reflect.ValueOf(topleft)
	goArguments[5] = reflect.ValueOf(bottomright)
	goArguments[6] = reflect.ValueOf(xAxisMode)
	goArguments[7] = reflect.ValueOf(yAxisMode)
	goArguments[8] = reflect.ValueOf(drawCenter)
	goArguments[9] = reflect.ValueOf(modulate)
	goArguments[10] = reflect.ValueOf(normalMap)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_nine_patch", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a particles system to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddParticles(item *RID, particles *RID, texture *RID, normalMap *RID, hFrames gdnative.Int, vFrames gdnative.Int) {
	log.Println("Calling VisualServer.CanvasItemAddParticles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 6, 6)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(particles)
	goArguments[2] = reflect.ValueOf(texture)
	goArguments[3] = reflect.ValueOf(normalMap)
	goArguments[4] = reflect.ValueOf(hFrames)
	goArguments[5] = reflect.ValueOf(vFrames)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_particles", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a polygon to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddPolygon(item *RID, points *PoolVector2Array, colors *PoolColorArray, uvs *PoolVector2Array, texture *RID, normalMap *RID, antialiased gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemAddPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 7, 7)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(points)
	goArguments[2] = reflect.ValueOf(colors)
	goArguments[3] = reflect.ValueOf(uvs)
	goArguments[4] = reflect.ValueOf(texture)
	goArguments[5] = reflect.ValueOf(normalMap)
	goArguments[6] = reflect.ValueOf(antialiased)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_polygon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a polyline, which is a line from multiple points with a width, to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddPolyline(item *RID, points *PoolVector2Array, colors *PoolColorArray, width gdnative.Float, antialiased gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemAddPolyline()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(points)
	goArguments[2] = reflect.ValueOf(colors)
	goArguments[3] = reflect.ValueOf(width)
	goArguments[4] = reflect.ValueOf(antialiased)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_polyline", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a primitive to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddPrimitive(item *RID, points *PoolVector2Array, colors *PoolColorArray, uvs *PoolVector2Array, texture *RID, width gdnative.Float, normalMap *RID) {
	log.Println("Calling VisualServer.CanvasItemAddPrimitive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 7, 7)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(points)
	goArguments[2] = reflect.ValueOf(colors)
	goArguments[3] = reflect.ValueOf(uvs)
	goArguments[4] = reflect.ValueOf(texture)
	goArguments[5] = reflect.ValueOf(width)
	goArguments[6] = reflect.ValueOf(normalMap)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_primitive", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a rectangle to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddRect(item *RID, rect *Rect2, color *Color) {
	log.Println("Calling VisualServer.CanvasItemAddRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(rect)
	goArguments[2] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a [Transform2D] command to the [CanvasItem]'s draw commands. This sets the extra_matrix uniform when executed. This affects the later command's of the canvas item.
*/
func (o *visualServer) CanvasItemAddSetTransform(item *RID, transform *Transform2D) {
	log.Println("Calling VisualServer.CanvasItemAddSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a textured rect to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddTextureRect(item *RID, rect *Rect2, texture *RID, tile gdnative.Bool, modulate *Color, transpose gdnative.Bool, normalMap *RID) {
	log.Println("Calling VisualServer.CanvasItemAddTextureRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 7, 7)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(rect)
	goArguments[2] = reflect.ValueOf(texture)
	goArguments[3] = reflect.ValueOf(tile)
	goArguments[4] = reflect.ValueOf(modulate)
	goArguments[5] = reflect.ValueOf(transpose)
	goArguments[6] = reflect.ValueOf(normalMap)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_texture_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a texture rect with region setting to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddTextureRectRegion(item *RID, rect *Rect2, texture *RID, srcRect *Rect2, modulate *Color, transpose gdnative.Bool, normalMap *RID, clipUv gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemAddTextureRectRegion()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 8, 8)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(rect)
	goArguments[2] = reflect.ValueOf(texture)
	goArguments[3] = reflect.ValueOf(srcRect)
	goArguments[4] = reflect.ValueOf(modulate)
	goArguments[5] = reflect.ValueOf(transpose)
	goArguments[6] = reflect.ValueOf(normalMap)
	goArguments[7] = reflect.ValueOf(clipUv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_texture_rect_region", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a triangle array to the [CanvasItem]'s draw commands.
*/
func (o *visualServer) CanvasItemAddTriangleArray(item *RID, indices *PoolIntArray, points *PoolVector2Array, colors *PoolColorArray, uvs *PoolVector2Array, texture *RID, count gdnative.Int, normalMap *RID) {
	log.Println("Calling VisualServer.CanvasItemAddTriangleArray()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 8, 8)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(indices)
	goArguments[2] = reflect.ValueOf(points)
	goArguments[3] = reflect.ValueOf(colors)
	goArguments[4] = reflect.ValueOf(uvs)
	goArguments[5] = reflect.ValueOf(texture)
	goArguments[6] = reflect.ValueOf(count)
	goArguments[7] = reflect.ValueOf(normalMap)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_add_triangle_array", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears the [CanvasItem] and removes all commands in it.
*/
func (o *visualServer) CanvasItemClear(item *RID) {
	log.Println("Calling VisualServer.CanvasItemClear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(item)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a new [CanvasItem] and returns its [RID].
*/
func (o *visualServer) CanvasItemCreate() *RID {
	log.Println("Calling VisualServer.CanvasItemCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "canvas_item_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets clipping for the [CanvasItem].
*/
func (o *visualServer) CanvasItemSetClip(item *RID, clip gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemSetClip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(clip)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_clip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the [CanvasItem] to copy a rect to the backbuffer.
*/
func (o *visualServer) CanvasItemSetCopyToBackbuffer(item *RID, enabled gdnative.Bool, rect *Rect2) {
	log.Println("Calling VisualServer.CanvasItemSetCopyToBackbuffer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(enabled)
	goArguments[2] = reflect.ValueOf(rect)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_copy_to_backbuffer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Defines a custom drawing rectangle for the [CanvasItem].
*/
func (o *visualServer) CanvasItemSetCustomRect(item *RID, useCustomRect gdnative.Bool, rect *Rect2) {
	log.Println("Calling VisualServer.CanvasItemSetCustomRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(useCustomRect)
	goArguments[2] = reflect.ValueOf(rect)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_custom_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CanvasItemSetDistanceFieldMode(item *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemSetDistanceFieldMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_distance_field_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets [CanvasItem] to be drawn behind its parent.
*/
func (o *visualServer) CanvasItemSetDrawBehindParent(item *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemSetDrawBehindParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_draw_behind_parent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the index for the [CanvasItem].
*/
func (o *visualServer) CanvasItemSetDrawIndex(item *RID, index gdnative.Int) {
	log.Println("Calling VisualServer.CanvasItemSetDrawIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(index)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_draw_index", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The light mask. See [LightOccluder2D] for more information on light masks.
*/
func (o *visualServer) CanvasItemSetLightMask(item *RID, mask gdnative.Int) {
	log.Println("Calling VisualServer.CanvasItemSetLightMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_light_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a new material to the [CanvasItem].
*/
func (o *visualServer) CanvasItemSetMaterial(item *RID, material *RID) {
	log.Println("Calling VisualServer.CanvasItemSetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the color that modulates the [CanvasItem] and its children.
*/
func (o *visualServer) CanvasItemSetModulate(item *RID, color *Color) {
	log.Println("Calling VisualServer.CanvasItemSetModulate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_modulate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the parent for the [CanvasItem].
*/
func (o *visualServer) CanvasItemSetParent(item *RID, parent *RID) {
	log.Println("Calling VisualServer.CanvasItemSetParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(parent)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_parent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the color that modulates the [CanvasItem] without children.
*/
func (o *visualServer) CanvasItemSetSelfModulate(item *RID, color *Color) {
	log.Println("Calling VisualServer.CanvasItemSetSelfModulate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_self_modulate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets if [CanvasItem]'s children should be sorted by y-position.
*/
func (o *visualServer) CanvasItemSetSortChildrenByY(item *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemSetSortChildrenByY()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_sort_children_by_y", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the [CanvasItem]'s [Transform2D].
*/
func (o *visualServer) CanvasItemSetTransform(item *RID, transform *Transform2D) {
	log.Println("Calling VisualServer.CanvasItemSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets if the [CanvasItem] uses its parent's material.
*/
func (o *visualServer) CanvasItemSetUseParentMaterial(item *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemSetUseParentMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_use_parent_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets if the canvas item (including its children) is visible.
*/
func (o *visualServer) CanvasItemSetVisible(item *RID, visible gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemSetVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(visible)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If this is enabled, the z-index of the parent will be added to the children's z-index.
*/
func (o *visualServer) CanvasItemSetZAsRelativeToParent(item *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasItemSetZAsRelativeToParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_z_as_relative_to_parent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the [CanvasItem]'s z-index, i.e. its draw order (lower indexes are drawn first).
*/
func (o *visualServer) CanvasItemSetZIndex(item *RID, zIndex gdnative.Int) {
	log.Println("Calling VisualServer.CanvasItemSetZIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(item)
	goArguments[1] = reflect.ValueOf(zIndex)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_item_set_z_index", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Attaches the canvas light to the canvas. Removes it from its previous canvas.
*/
func (o *visualServer) CanvasLightAttachToCanvas(light *RID, canvas *RID) {
	log.Println("Calling VisualServer.CanvasLightAttachToCanvas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(canvas)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_attach_to_canvas", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a canvas light.
*/
func (o *visualServer) CanvasLightCreate() *RID {
	log.Println("Calling VisualServer.CanvasLightCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "canvas_light_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Attaches a light occluder to the canvas. Removes it from its previous canvas.
*/
func (o *visualServer) CanvasLightOccluderAttachToCanvas(occluder *RID, canvas *RID) {
	log.Println("Calling VisualServer.CanvasLightOccluderAttachToCanvas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(occluder)
	goArguments[1] = reflect.ValueOf(canvas)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_occluder_attach_to_canvas", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a light occluder.
*/
func (o *visualServer) CanvasLightOccluderCreate() *RID {
	log.Println("Calling VisualServer.CanvasLightOccluderCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "canvas_light_occluder_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Enables or disables light occluder.
*/
func (o *visualServer) CanvasLightOccluderSetEnabled(occluder *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasLightOccluderSetEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(occluder)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_occluder_set_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The light mask. See [LightOccluder2D] for more information on light masks
*/
func (o *visualServer) CanvasLightOccluderSetLightMask(occluder *RID, mask gdnative.Int) {
	log.Println("Calling VisualServer.CanvasLightOccluderSetLightMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(occluder)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_occluder_set_light_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a light occluder's polygon.
*/
func (o *visualServer) CanvasLightOccluderSetPolygon(occluder *RID, polygon *RID) {
	log.Println("Calling VisualServer.CanvasLightOccluderSetPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(occluder)
	goArguments[1] = reflect.ValueOf(polygon)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_occluder_set_polygon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a light occluder's [Transform2D].
*/
func (o *visualServer) CanvasLightOccluderSetTransform(occluder *RID, transform *Transform2D) {
	log.Println("Calling VisualServer.CanvasLightOccluderSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(occluder)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_occluder_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the color for a light.
*/
func (o *visualServer) CanvasLightSetColor(light *RID, color *Color) {
	log.Println("Calling VisualServer.CanvasLightSetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Enables or disables a canvas light.
*/
func (o *visualServer) CanvasLightSetEnabled(light *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasLightSetEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a canvas light's energy.
*/
func (o *visualServer) CanvasLightSetEnergy(light *RID, energy gdnative.Float) {
	log.Println("Calling VisualServer.CanvasLightSetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a canvas light's height.
*/
func (o *visualServer) CanvasLightSetHeight(light *RID, height gdnative.Float) {
	log.Println("Calling VisualServer.CanvasLightSetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(height)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_height", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The light mask. See [LightOccluder2D] for more information on light masks
*/
func (o *visualServer) CanvasLightSetItemCullMask(light *RID, mask gdnative.Int) {
	log.Println("Calling VisualServer.CanvasLightSetItemCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_item_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The shadow mask. binary about which layers this canvas light affects which canvas item's shadows. See [LightOccluder2D] for more information on light masks.
*/
func (o *visualServer) CanvasLightSetItemShadowCullMask(light *RID, mask gdnative.Int) {
	log.Println("Calling VisualServer.CanvasLightSetItemShadowCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_item_shadow_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The layer range that gets rendered with this light.
*/
func (o *visualServer) CanvasLightSetLayerRange(light *RID, minLayer gdnative.Int, maxLayer gdnative.Int) {
	log.Println("Calling VisualServer.CanvasLightSetLayerRange()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(minLayer)
	goArguments[2] = reflect.ValueOf(maxLayer)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_layer_range", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   The mode of the light, see CANVAS_LIGHT_MODE_* constants.
*/
func (o *visualServer) CanvasLightSetMode(light *RID, mode gdnative.Int) {
	log.Println("Calling VisualServer.CanvasLightSetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CanvasLightSetScale(light *RID, scale gdnative.Float) {
	log.Println("Calling VisualServer.CanvasLightSetScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the width of the shadow buffer, size gets scaled to the next power of two for this.
*/
func (o *visualServer) CanvasLightSetShadowBufferSize(light *RID, size gdnative.Int) {
	log.Println("Calling VisualServer.CanvasLightSetShadowBufferSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_shadow_buffer_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the color of the canvas light's shadow.
*/
func (o *visualServer) CanvasLightSetShadowColor(light *RID, color *Color) {
	log.Println("Calling VisualServer.CanvasLightSetShadowColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_shadow_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Enables or disables the canvas light's shadow.
*/
func (o *visualServer) CanvasLightSetShadowEnabled(light *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasLightSetShadowEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_shadow_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the canvas light's shadow's filter, see CANVAS_LIGHT_SHADOW_FILTER_* constants.
*/
func (o *visualServer) CanvasLightSetShadowFilter(light *RID, filter gdnative.Int) {
	log.Println("Calling VisualServer.CanvasLightSetShadowFilter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(filter)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_shadow_filter", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the length of the shadow's gradient.
*/
func (o *visualServer) CanvasLightSetShadowGradientLength(light *RID, length gdnative.Float) {
	log.Println("Calling VisualServer.CanvasLightSetShadowGradientLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(length)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_shadow_gradient_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Smoothens the shadow. The lower, the more smooth.
*/
func (o *visualServer) CanvasLightSetShadowSmooth(light *RID, smooth gdnative.Float) {
	log.Println("Calling VisualServer.CanvasLightSetShadowSmooth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(smooth)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_shadow_smooth", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CanvasLightSetTexture(light *RID, texture *RID) {
	log.Println("Calling VisualServer.CanvasLightSetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CanvasLightSetTextureOffset(light *RID, offset *Vector2) {
	log.Println("Calling VisualServer.CanvasLightSetTextureOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_texture_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the canvas light's [Transform2D].
*/
func (o *visualServer) CanvasLightSetTransform(light *RID, transform *Transform2D) {
	log.Println("Calling VisualServer.CanvasLightSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) CanvasLightSetZRange(light *RID, minZ gdnative.Int, maxZ gdnative.Int) {
	log.Println("Calling VisualServer.CanvasLightSetZRange()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(minZ)
	goArguments[2] = reflect.ValueOf(maxZ)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_light_set_z_range", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a new light occluder polygon.
*/
func (o *visualServer) CanvasOccluderPolygonCreate() *RID {
	log.Println("Calling VisualServer.CanvasOccluderPolygonCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "canvas_occluder_polygon_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets an occluder polygons cull mode. See CANVAS_OCCLUDER_POLYGON_CULL_MODE_* constants.
*/
func (o *visualServer) CanvasOccluderPolygonSetCullMode(occluderPolygon *RID, mode gdnative.Int) {
	log.Println("Calling VisualServer.CanvasOccluderPolygonSetCullMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(occluderPolygon)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_occluder_polygon_set_cull_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the shape of the occluder polygon.
*/
func (o *visualServer) CanvasOccluderPolygonSetShape(occluderPolygon *RID, shape *PoolVector2Array, closed gdnative.Bool) {
	log.Println("Calling VisualServer.CanvasOccluderPolygonSetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(occluderPolygon)
	goArguments[1] = reflect.ValueOf(shape)
	goArguments[2] = reflect.ValueOf(closed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_occluder_polygon_set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the shape of the occluder polygon as lines.
*/
func (o *visualServer) CanvasOccluderPolygonSetShapeAsLines(occluderPolygon *RID, shape *PoolVector2Array) {
	log.Println("Calling VisualServer.CanvasOccluderPolygonSetShapeAsLines()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(occluderPolygon)
	goArguments[1] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_occluder_polygon_set_shape_as_lines", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   A copy of the canvas item will be drawn with a local offset of the mirroring [Vector2].
*/
func (o *visualServer) CanvasSetItemMirroring(canvas *RID, item *RID, mirroring *Vector2) {
	log.Println("Calling VisualServer.CanvasSetItemMirroring()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(canvas)
	goArguments[1] = reflect.ValueOf(item)
	goArguments[2] = reflect.ValueOf(mirroring)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_set_item_mirroring", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Modulates all colors in the given canvas.
*/
func (o *visualServer) CanvasSetModulate(canvas *RID, color *Color) {
	log.Println("Calling VisualServer.CanvasSetModulate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(canvas)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "canvas_set_modulate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) DirectionalLightCreate() *RID {
	log.Println("Calling VisualServer.DirectionalLightCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "directional_light_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) EnvironmentCreate() *RID {
	log.Println("Calling VisualServer.EnvironmentCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "environment_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) EnvironmentSetAdjustment(env *RID, enable gdnative.Bool, brightness gdnative.Float, contrast gdnative.Float, saturation gdnative.Float, ramp *RID) {
	log.Println("Calling VisualServer.EnvironmentSetAdjustment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 6, 6)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(enable)
	goArguments[2] = reflect.ValueOf(brightness)
	goArguments[3] = reflect.ValueOf(contrast)
	goArguments[4] = reflect.ValueOf(saturation)
	goArguments[5] = reflect.ValueOf(ramp)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_adjustment", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetAmbientLight(env *RID, color *Color, energy gdnative.Float, skyContibution gdnative.Float) {
	log.Println("Calling VisualServer.EnvironmentSetAmbientLight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(color)
	goArguments[2] = reflect.ValueOf(energy)
	goArguments[3] = reflect.ValueOf(skyContibution)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_ambient_light", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetBackground(env *RID, bg gdnative.Int) {
	log.Println("Calling VisualServer.EnvironmentSetBackground()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(bg)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_background", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetBgColor(env *RID, color *Color) {
	log.Println("Calling VisualServer.EnvironmentSetBgColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_bg_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetBgEnergy(env *RID, energy gdnative.Float) {
	log.Println("Calling VisualServer.EnvironmentSetBgEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_bg_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetCanvasMaxLayer(env *RID, maxLayer gdnative.Int) {
	log.Println("Calling VisualServer.EnvironmentSetCanvasMaxLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(maxLayer)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_canvas_max_layer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetDofBlurFar(env *RID, enable gdnative.Bool, distance gdnative.Float, transition gdnative.Float, farAmount gdnative.Float, quality gdnative.Int) {
	log.Println("Calling VisualServer.EnvironmentSetDofBlurFar()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 6, 6)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(enable)
	goArguments[2] = reflect.ValueOf(distance)
	goArguments[3] = reflect.ValueOf(transition)
	goArguments[4] = reflect.ValueOf(farAmount)
	goArguments[5] = reflect.ValueOf(quality)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_dof_blur_far", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetDofBlurNear(env *RID, enable gdnative.Bool, distance gdnative.Float, transition gdnative.Float, farAmount gdnative.Float, quality gdnative.Int) {
	log.Println("Calling VisualServer.EnvironmentSetDofBlurNear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 6, 6)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(enable)
	goArguments[2] = reflect.ValueOf(distance)
	goArguments[3] = reflect.ValueOf(transition)
	goArguments[4] = reflect.ValueOf(farAmount)
	goArguments[5] = reflect.ValueOf(quality)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_dof_blur_near", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetFog(env *RID, enable gdnative.Bool, color *Color, sunColor *Color, sunAmount gdnative.Float) {
	log.Println("Calling VisualServer.EnvironmentSetFog()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(enable)
	goArguments[2] = reflect.ValueOf(color)
	goArguments[3] = reflect.ValueOf(sunColor)
	goArguments[4] = reflect.ValueOf(sunAmount)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_fog", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetFogDepth(env *RID, enable gdnative.Bool, depthBegin gdnative.Float, depthCurve gdnative.Float, transmit gdnative.Bool, transmitCurve gdnative.Float) {
	log.Println("Calling VisualServer.EnvironmentSetFogDepth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 6, 6)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(enable)
	goArguments[2] = reflect.ValueOf(depthBegin)
	goArguments[3] = reflect.ValueOf(depthCurve)
	goArguments[4] = reflect.ValueOf(transmit)
	goArguments[5] = reflect.ValueOf(transmitCurve)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_fog_depth", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetFogHeight(env *RID, enable gdnative.Bool, minHeight gdnative.Float, maxHeight gdnative.Float, heightCurve gdnative.Float) {
	log.Println("Calling VisualServer.EnvironmentSetFogHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(enable)
	goArguments[2] = reflect.ValueOf(minHeight)
	goArguments[3] = reflect.ValueOf(maxHeight)
	goArguments[4] = reflect.ValueOf(heightCurve)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_fog_height", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetGlow(env *RID, enable gdnative.Bool, levelFlags gdnative.Int, intensity gdnative.Float, strength gdnative.Float, bloomThreshold gdnative.Float, blendMode gdnative.Int, hdrBleedThreshold gdnative.Float, hdrBleedScale gdnative.Float, bicubicUpscale gdnative.Bool) {
	log.Println("Calling VisualServer.EnvironmentSetGlow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 10, 10)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(enable)
	goArguments[2] = reflect.ValueOf(levelFlags)
	goArguments[3] = reflect.ValueOf(intensity)
	goArguments[4] = reflect.ValueOf(strength)
	goArguments[5] = reflect.ValueOf(bloomThreshold)
	goArguments[6] = reflect.ValueOf(blendMode)
	goArguments[7] = reflect.ValueOf(hdrBleedThreshold)
	goArguments[8] = reflect.ValueOf(hdrBleedScale)
	goArguments[9] = reflect.ValueOf(bicubicUpscale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_glow", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetSky(env *RID, sky *RID) {
	log.Println("Calling VisualServer.EnvironmentSetSky()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(sky)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_sky", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetSkyCustomFov(env *RID, scale gdnative.Float) {
	log.Println("Calling VisualServer.EnvironmentSetSkyCustomFov()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_sky_custom_fov", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetSsao(env *RID, enable gdnative.Bool, radius gdnative.Float, intensity gdnative.Float, radius2 gdnative.Float, intensity2 gdnative.Float, bias gdnative.Float, lightAffect gdnative.Float, color *Color, quality gdnative.Int, blur gdnative.Int, bilateralSharpness gdnative.Float) {
	log.Println("Calling VisualServer.EnvironmentSetSsao()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 12, 12)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(enable)
	goArguments[2] = reflect.ValueOf(radius)
	goArguments[3] = reflect.ValueOf(intensity)
	goArguments[4] = reflect.ValueOf(radius2)
	goArguments[5] = reflect.ValueOf(intensity2)
	goArguments[6] = reflect.ValueOf(bias)
	goArguments[7] = reflect.ValueOf(lightAffect)
	goArguments[8] = reflect.ValueOf(color)
	goArguments[9] = reflect.ValueOf(quality)
	goArguments[10] = reflect.ValueOf(blur)
	goArguments[11] = reflect.ValueOf(bilateralSharpness)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_ssao", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetSsr(env *RID, enable gdnative.Bool, maxSteps gdnative.Int, fadeIn gdnative.Float, fadeOut gdnative.Float, depthTolerance gdnative.Float, roughness gdnative.Bool) {
	log.Println("Calling VisualServer.EnvironmentSetSsr()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 7, 7)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(enable)
	goArguments[2] = reflect.ValueOf(maxSteps)
	goArguments[3] = reflect.ValueOf(fadeIn)
	goArguments[4] = reflect.ValueOf(fadeOut)
	goArguments[5] = reflect.ValueOf(depthTolerance)
	goArguments[6] = reflect.ValueOf(roughness)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_ssr", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) EnvironmentSetTonemap(env *RID, toneMapper gdnative.Int, exposure gdnative.Float, white gdnative.Float, autoExposure gdnative.Bool, minLuminance gdnative.Float, maxLuminance gdnative.Float, autoExpSpeed gdnative.Float, autoExpGrey gdnative.Float) {
	log.Println("Calling VisualServer.EnvironmentSetTonemap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 9, 9)
	goArguments[0] = reflect.ValueOf(env)
	goArguments[1] = reflect.ValueOf(toneMapper)
	goArguments[2] = reflect.ValueOf(exposure)
	goArguments[3] = reflect.ValueOf(white)
	goArguments[4] = reflect.ValueOf(autoExposure)
	goArguments[5] = reflect.ValueOf(minLuminance)
	goArguments[6] = reflect.ValueOf(maxLuminance)
	goArguments[7] = reflect.ValueOf(autoExpSpeed)
	goArguments[8] = reflect.ValueOf(autoExpGrey)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "environment_set_tonemap", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes buffers and clears testcubes.
*/
func (o *visualServer) Finish() {
	log.Println("Calling VisualServer.Finish()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "finish", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Draws a frame. Same as [method draw].
*/
func (o *visualServer) ForceDraw(swapBuffers gdnative.Bool) {
	log.Println("Calling VisualServer.ForceDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(swapBuffers)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "force_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Synchronizes threads.
*/
func (o *visualServer) ForceSync() {
	log.Println("Calling VisualServer.ForceSync()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "force_sync", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Tries to free an object in the VisualServer.
*/
func (o *visualServer) FreeRid(rid *RID) {
	log.Println("Calling VisualServer.FreeRid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rid)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "free_rid", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns a certain information, see RENDER_INFO_* for options.
*/
func (o *visualServer) GetRenderInfo(info gdnative.Int) gdnative.Int {
	log.Println("Calling VisualServer.GetRenderInfo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(info)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_render_info", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the id of the test cube. Creates one if none exists.
*/
func (o *visualServer) GetTestCube() *RID {
	log.Println("Calling VisualServer.GetTestCube()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_test_cube", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the id of the test texture. Creates one if none exists.
*/
func (o *visualServer) GetTestTexture() *RID {
	log.Println("Calling VisualServer.GetTestTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_test_texture", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the id of a white texture. Creates one if none exists.
*/
func (o *visualServer) GetWhiteTexture() *RID {
	log.Println("Calling VisualServer.GetWhiteTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_white_texture", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeCreate() *RID {
	log.Println("Calling VisualServer.GiProbeCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeGetBias(arg0 *RID) gdnative.Float {
	log.Println("Calling VisualServer.GiProbeGetBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_get_bias", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeGetBounds(probe *RID) *AABB {
	log.Println("Calling VisualServer.GiProbeGetBounds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(probe)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_get_bounds", goArguments, "*AABB")

	returnValue := goRet.Interface().(*AABB)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeGetCellSize(probe *RID) gdnative.Float {
	log.Println("Calling VisualServer.GiProbeGetCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(probe)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_get_cell_size", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeGetDynamicData(arg0 *RID) *PoolIntArray {
	log.Println("Calling VisualServer.GiProbeGetDynamicData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_get_dynamic_data", goArguments, "*PoolIntArray")

	returnValue := goRet.Interface().(*PoolIntArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeGetDynamicRange(arg0 *RID) gdnative.Int {
	log.Println("Calling VisualServer.GiProbeGetDynamicRange()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_get_dynamic_range", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeGetEnergy(arg0 *RID) gdnative.Float {
	log.Println("Calling VisualServer.GiProbeGetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_get_energy", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeGetNormalBias(arg0 *RID) gdnative.Float {
	log.Println("Calling VisualServer.GiProbeGetNormalBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_get_normal_bias", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeGetPropagation(arg0 *RID) gdnative.Float {
	log.Println("Calling VisualServer.GiProbeGetPropagation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_get_propagation", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeGetToCellXform(arg0 *RID) *Transform {
	log.Println("Calling VisualServer.GiProbeGetToCellXform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_get_to_cell_xform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeIsCompressed(arg0 *RID) gdnative.Bool {
	log.Println("Calling VisualServer.GiProbeIsCompressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_is_compressed", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeIsInterior(arg0 *RID) gdnative.Bool {
	log.Println("Calling VisualServer.GiProbeIsInterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "gi_probe_is_interior", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) GiProbeSetBias(bias *RID, arg1 gdnative.Float) {
	log.Println("Calling VisualServer.GiProbeSetBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(bias)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_bias", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetBounds(probe *RID, bounds *AABB) {
	log.Println("Calling VisualServer.GiProbeSetBounds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(bounds)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_bounds", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetCellSize(probe *RID, rng gdnative.Float) {
	log.Println("Calling VisualServer.GiProbeSetCellSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(rng)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_cell_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetCompress(enable *RID, arg1 gdnative.Bool) {
	log.Println("Calling VisualServer.GiProbeSetCompress()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(enable)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_compress", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetDynamicData(data *RID, arg1 *PoolIntArray) {
	log.Println("Calling VisualServer.GiProbeSetDynamicData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(data)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_dynamic_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetDynamicRange(rng *RID, arg1 gdnative.Int) {
	log.Println("Calling VisualServer.GiProbeSetDynamicRange()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(rng)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_dynamic_range", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetEnergy(energy *RID, arg1 gdnative.Float) {
	log.Println("Calling VisualServer.GiProbeSetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(energy)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetInterior(enable *RID, arg1 gdnative.Bool) {
	log.Println("Calling VisualServer.GiProbeSetInterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(enable)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_interior", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetNormalBias(bias *RID, arg1 gdnative.Float) {
	log.Println("Calling VisualServer.GiProbeSetNormalBias()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(bias)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_normal_bias", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetPropagation(propagation *RID, arg1 gdnative.Float) {
	log.Println("Calling VisualServer.GiProbeSetPropagation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(propagation)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_propagation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) GiProbeSetToCellXform(xform *RID, arg1 *Transform) {
	log.Println("Calling VisualServer.GiProbeSetToCellXform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(xform)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "gi_probe_set_to_cell_xform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns [code]true[/code] if changes have been made to the VisualServer's data. [method draw] is usually called if this happens.
*/
func (o *visualServer) HasChanged() gdnative.Bool {
	log.Println("Calling VisualServer.HasChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_changed", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) HasFeature(feature gdnative.Int) gdnative.Bool {
	log.Println("Calling VisualServer.HasFeature()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(feature)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_feature", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true, if the OS supports a certain feature. Features might be s3tc, etc, etc2 and pvrtc,
*/
func (o *visualServer) HasOsFeature(feature gdnative.String) gdnative.Bool {
	log.Println("Calling VisualServer.HasOsFeature()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(feature)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_os_feature", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) ImmediateBegin(immediate *RID, primitive gdnative.Int, texture *RID) {
	log.Println("Calling VisualServer.ImmediateBegin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(immediate)
	goArguments[1] = reflect.ValueOf(primitive)
	goArguments[2] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_begin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateClear(immediate *RID) {
	log.Println("Calling VisualServer.ImmediateClear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(immediate)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateColor(immediate *RID, color *Color) {
	log.Println("Calling VisualServer.ImmediateColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(immediate)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateCreate() *RID {
	log.Println("Calling VisualServer.ImmediateCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "immediate_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) ImmediateEnd(immediate *RID) {
	log.Println("Calling VisualServer.ImmediateEnd()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(immediate)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_end", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateGetMaterial(immediate *RID) *RID {
	log.Println("Calling VisualServer.ImmediateGetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(immediate)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "immediate_get_material", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) ImmediateNormal(immediate *RID, normal *Vector3) {
	log.Println("Calling VisualServer.ImmediateNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(immediate)
	goArguments[1] = reflect.ValueOf(normal)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_normal", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateSetMaterial(immediate *RID, material *RID) {
	log.Println("Calling VisualServer.ImmediateSetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(immediate)
	goArguments[1] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_set_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateTangent(immediate *RID, tangent *Plane) {
	log.Println("Calling VisualServer.ImmediateTangent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(immediate)
	goArguments[1] = reflect.ValueOf(tangent)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_tangent", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateUv(immediate *RID, texUv *Vector2) {
	log.Println("Calling VisualServer.ImmediateUv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(immediate)
	goArguments[1] = reflect.ValueOf(texUv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_uv", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateUv2(immediate *RID, texUv *Vector2) {
	log.Println("Calling VisualServer.ImmediateUv2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(immediate)
	goArguments[1] = reflect.ValueOf(texUv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_uv2", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateVertex(immediate *RID, vertex *Vector3) {
	log.Println("Calling VisualServer.ImmediateVertex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(immediate)
	goArguments[1] = reflect.ValueOf(vertex)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_vertex", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ImmediateVertex2D(immediate *RID, vertex *Vector2) {
	log.Println("Calling VisualServer.ImmediateVertex2D()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(immediate)
	goArguments[1] = reflect.ValueOf(vertex)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "immediate_vertex_2d", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Initializes the visual server.
*/
func (o *visualServer) Init() {
	log.Println("Calling VisualServer.Init()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "init", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceAttachObjectInstanceId(instance *RID, id gdnative.Int) {
	log.Println("Calling VisualServer.InstanceAttachObjectInstanceId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_attach_object_instance_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceAttachSkeleton(instance *RID, skeleton *RID) {
	log.Println("Calling VisualServer.InstanceAttachSkeleton()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(skeleton)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_attach_skeleton", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceCreate() *RID {
	log.Println("Calling VisualServer.InstanceCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "instance_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) InstanceCreate2(base *RID, scenario *RID) *RID {
	log.Println("Calling VisualServer.InstanceCreate2()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(base)
	goArguments[1] = reflect.ValueOf(scenario)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "instance_create2", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) InstanceGeometrySetAsInstanceLod(instance *RID, asLodOfInstance *RID) {
	log.Println("Calling VisualServer.InstanceGeometrySetAsInstanceLod()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(asLodOfInstance)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_geometry_set_as_instance_lod", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceGeometrySetCastShadowsSetting(instance *RID, shadowCastingSetting gdnative.Int) {
	log.Println("Calling VisualServer.InstanceGeometrySetCastShadowsSetting()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(shadowCastingSetting)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_geometry_set_cast_shadows_setting", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceGeometrySetDrawRange(instance *RID, min gdnative.Float, max gdnative.Float, minMargin gdnative.Float, maxMargin gdnative.Float) {
	log.Println("Calling VisualServer.InstanceGeometrySetDrawRange()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(min)
	goArguments[2] = reflect.ValueOf(max)
	goArguments[3] = reflect.ValueOf(minMargin)
	goArguments[4] = reflect.ValueOf(maxMargin)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_geometry_set_draw_range", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceGeometrySetFlag(instance *RID, flag gdnative.Int, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.InstanceGeometrySetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(flag)
	goArguments[2] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_geometry_set_flag", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceGeometrySetMaterialOverride(instance *RID, material *RID) {
	log.Println("Calling VisualServer.InstanceGeometrySetMaterialOverride()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_geometry_set_material_override", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetBase(instance *RID, base *RID) {
	log.Println("Calling VisualServer.InstanceSetBase()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(base)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_base", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetBlendShapeWeight(instance *RID, shape gdnative.Int, weight gdnative.Float) {
	log.Println("Calling VisualServer.InstanceSetBlendShapeWeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(shape)
	goArguments[2] = reflect.ValueOf(weight)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_blend_shape_weight", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetCustomAabb(instance *RID, aabb *AABB) {
	log.Println("Calling VisualServer.InstanceSetCustomAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(aabb)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_custom_aabb", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetExterior(instance *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.InstanceSetExterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_exterior", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetExtraVisibilityMargin(instance *RID, margin gdnative.Float) {
	log.Println("Calling VisualServer.InstanceSetExtraVisibilityMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(margin)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_extra_visibility_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetLayerMask(instance *RID, mask gdnative.Int) {
	log.Println("Calling VisualServer.InstanceSetLayerMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_layer_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetScenario(instance *RID, scenario *RID) {
	log.Println("Calling VisualServer.InstanceSetScenario()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(scenario)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_scenario", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetSurfaceMaterial(instance *RID, surface gdnative.Int, material *RID) {
	log.Println("Calling VisualServer.InstanceSetSurfaceMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(surface)
	goArguments[2] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_surface_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetTransform(instance *RID, transform *Transform) {
	log.Println("Calling VisualServer.InstanceSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetUseLightmap(instance *RID, lightmapInstance *RID, lightmap *RID) {
	log.Println("Calling VisualServer.InstanceSetUseLightmap()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(lightmapInstance)
	goArguments[2] = reflect.ValueOf(lightmap)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_use_lightmap", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstanceSetVisible(instance *RID, visible gdnative.Bool) {
	log.Println("Calling VisualServer.InstanceSetVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(instance)
	goArguments[1] = reflect.ValueOf(visible)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "instance_set_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) InstancesCullAabb(aabb *AABB, scenario *RID) *Array {
	log.Println("Calling VisualServer.InstancesCullAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(aabb)
	goArguments[1] = reflect.ValueOf(scenario)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "instances_cull_aabb", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) InstancesCullConvex(convex *Array, scenario *RID) *Array {
	log.Println("Calling VisualServer.InstancesCullConvex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(convex)
	goArguments[1] = reflect.ValueOf(scenario)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "instances_cull_convex", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) InstancesCullRay(from *Vector3, to *Vector3, scenario *RID) *Array {
	log.Println("Calling VisualServer.InstancesCullRay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(from)
	goArguments[1] = reflect.ValueOf(to)
	goArguments[2] = reflect.ValueOf(scenario)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "instances_cull_ray", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) LightDirectionalSetBlendSplits(light *RID, enable gdnative.Bool) {
	log.Println("Calling VisualServer.LightDirectionalSetBlendSplits()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_directional_set_blend_splits", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightDirectionalSetShadowDepthRangeMode(light *RID, rangeMode gdnative.Int) {
	log.Println("Calling VisualServer.LightDirectionalSetShadowDepthRangeMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(rangeMode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_directional_set_shadow_depth_range_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightDirectionalSetShadowMode(light *RID, mode gdnative.Int) {
	log.Println("Calling VisualServer.LightDirectionalSetShadowMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_directional_set_shadow_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightOmniSetShadowDetail(light *RID, detail gdnative.Int) {
	log.Println("Calling VisualServer.LightOmniSetShadowDetail()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(detail)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_omni_set_shadow_detail", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightOmniSetShadowMode(light *RID, mode gdnative.Int) {
	log.Println("Calling VisualServer.LightOmniSetShadowMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_omni_set_shadow_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightSetColor(light *RID, color *Color) {
	log.Println("Calling VisualServer.LightSetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightSetCullMask(light *RID, mask gdnative.Int) {
	log.Println("Calling VisualServer.LightSetCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_set_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightSetNegative(light *RID, enable gdnative.Bool) {
	log.Println("Calling VisualServer.LightSetNegative()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_set_negative", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightSetParam(light *RID, param gdnative.Int, value gdnative.Float) {
	log.Println("Calling VisualServer.LightSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightSetProjector(light *RID, texture *RID) {
	log.Println("Calling VisualServer.LightSetProjector()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_set_projector", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightSetReverseCullFaceMode(light *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.LightSetReverseCullFaceMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_set_reverse_cull_face_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightSetShadow(light *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.LightSetShadow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_set_shadow", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightSetShadowColor(light *RID, color *Color) {
	log.Println("Calling VisualServer.LightSetShadowColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(light)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "light_set_shadow_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightmapCaptureCreate() *RID {
	log.Println("Calling VisualServer.LightmapCaptureCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "lightmap_capture_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) LightmapCaptureGetBounds(capture *RID) *AABB {
	log.Println("Calling VisualServer.LightmapCaptureGetBounds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(capture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "lightmap_capture_get_bounds", goArguments, "*AABB")

	returnValue := goRet.Interface().(*AABB)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) LightmapCaptureGetEnergy(capture *RID) gdnative.Float {
	log.Println("Calling VisualServer.LightmapCaptureGetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(capture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "lightmap_capture_get_energy", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) LightmapCaptureGetOctree(capture *RID) *PoolByteArray {
	log.Println("Calling VisualServer.LightmapCaptureGetOctree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(capture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "lightmap_capture_get_octree", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) LightmapCaptureGetOctreeCellSubdiv(capture *RID) gdnative.Int {
	log.Println("Calling VisualServer.LightmapCaptureGetOctreeCellSubdiv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(capture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "lightmap_capture_get_octree_cell_subdiv", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) LightmapCaptureGetOctreeCellTransform(capture *RID) *Transform {
	log.Println("Calling VisualServer.LightmapCaptureGetOctreeCellTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(capture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "lightmap_capture_get_octree_cell_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) LightmapCaptureSetBounds(capture *RID, bounds *AABB) {
	log.Println("Calling VisualServer.LightmapCaptureSetBounds()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(capture)
	goArguments[1] = reflect.ValueOf(bounds)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "lightmap_capture_set_bounds", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightmapCaptureSetEnergy(capture *RID, energy gdnative.Float) {
	log.Println("Calling VisualServer.LightmapCaptureSetEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(capture)
	goArguments[1] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "lightmap_capture_set_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightmapCaptureSetOctree(capture *RID, octree *PoolByteArray) {
	log.Println("Calling VisualServer.LightmapCaptureSetOctree()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(capture)
	goArguments[1] = reflect.ValueOf(octree)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "lightmap_capture_set_octree", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightmapCaptureSetOctreeCellSubdiv(capture *RID, subdiv gdnative.Int) {
	log.Println("Calling VisualServer.LightmapCaptureSetOctreeCellSubdiv()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(capture)
	goArguments[1] = reflect.ValueOf(subdiv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "lightmap_capture_set_octree_cell_subdiv", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) LightmapCaptureSetOctreeCellTransform(capture *RID, xform *Transform) {
	log.Println("Calling VisualServer.LightmapCaptureSetOctreeCellTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(capture)
	goArguments[1] = reflect.ValueOf(xform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "lightmap_capture_set_octree_cell_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions.
*/
func (o *visualServer) MakeSphereMesh(latitudes gdnative.Int, longitudes gdnative.Int, radius gdnative.Float) *RID {
	log.Println("Calling VisualServer.MakeSphereMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(latitudes)
	goArguments[1] = reflect.ValueOf(longitudes)
	goArguments[2] = reflect.ValueOf(radius)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "make_sphere_mesh", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns an empty material.
*/
func (o *visualServer) MaterialCreate() *RID {
	log.Println("Calling VisualServer.MaterialCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "material_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the value of a certain material's parameter.
*/
func (o *visualServer) MaterialGetParam(material *RID, parameter gdnative.String) *Variant {
	log.Println("Calling VisualServer.MaterialGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(material)
	goArguments[1] = reflect.ValueOf(parameter)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "material_get_param", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the shader of a certain material's shader. Returns an empty RID if the material doesn't have a shader.
*/
func (o *visualServer) MaterialGetShader(shaderMaterial *RID) *RID {
	log.Println("Calling VisualServer.MaterialGetShader()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shaderMaterial)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "material_get_shader", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets a materials line width.
*/
func (o *visualServer) MaterialSetLineWidth(material *RID, width gdnative.Float) {
	log.Println("Calling VisualServer.MaterialSetLineWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(material)
	goArguments[1] = reflect.ValueOf(width)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "material_set_line_width", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets an objects next material.
*/
func (o *visualServer) MaterialSetNextPass(material *RID, nextMaterial *RID) {
	log.Println("Calling VisualServer.MaterialSetNextPass()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(material)
	goArguments[1] = reflect.ValueOf(nextMaterial)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "material_set_next_pass", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a materials parameter.
*/
func (o *visualServer) MaterialSetParam(material *RID, parameter gdnative.String, value *Variant) {
	log.Println("Calling VisualServer.MaterialSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(material)
	goArguments[1] = reflect.ValueOf(parameter)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "material_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a material's render priority.
*/
func (o *visualServer) MaterialSetRenderPriority(material *RID, priority gdnative.Int) {
	log.Println("Calling VisualServer.MaterialSetRenderPriority()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(material)
	goArguments[1] = reflect.ValueOf(priority)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "material_set_render_priority", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a shader material's shader.
*/
func (o *visualServer) MaterialSetShader(shaderMaterial *RID, shader *RID) {
	log.Println("Calling VisualServer.MaterialSetShader()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(shaderMaterial)
	goArguments[1] = reflect.ValueOf(shader)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "material_set_shader", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a surface generated from the Arrays to a mesh. See PRIMITIVE_TYPE_* constants for types.
*/
func (o *visualServer) MeshAddSurfaceFromArrays(mesh *RID, primtive gdnative.Int, arrays *Array, blendShapes *Array, compressFormat gdnative.Int) {
	log.Println("Calling VisualServer.MeshAddSurfaceFromArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(primtive)
	goArguments[2] = reflect.ValueOf(arrays)
	goArguments[3] = reflect.ValueOf(blendShapes)
	goArguments[4] = reflect.ValueOf(compressFormat)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "mesh_add_surface_from_arrays", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes all surfaces from a mesh.
*/
func (o *visualServer) MeshClear(mesh *RID) {
	log.Println("Calling VisualServer.MeshClear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mesh)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "mesh_clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a new mesh.
*/
func (o *visualServer) MeshCreate() *RID {
	log.Println("Calling VisualServer.MeshCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's blend shape count.
*/
func (o *visualServer) MeshGetBlendShapeCount(mesh *RID) gdnative.Int {
	log.Println("Calling VisualServer.MeshGetBlendShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mesh)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_get_blend_shape_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's blend shape mode.
*/
func (o *visualServer) MeshGetBlendShapeMode(mesh *RID) gdnative.Int {
	log.Println("Calling VisualServer.MeshGetBlendShapeMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mesh)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_get_blend_shape_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's custom aabb.
*/
func (o *visualServer) MeshGetCustomAabb(mesh *RID) *AABB {
	log.Println("Calling VisualServer.MeshGetCustomAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mesh)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_get_custom_aabb", goArguments, "*AABB")

	returnValue := goRet.Interface().(*AABB)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's number of surfaces.
*/
func (o *visualServer) MeshGetSurfaceCount(mesh *RID) gdnative.Int {
	log.Println("Calling VisualServer.MeshGetSurfaceCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mesh)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_get_surface_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes a mesh's surface.
*/
func (o *visualServer) MeshRemoveSurface(mesh *RID, index gdnative.Int) {
	log.Println("Calling VisualServer.MeshRemoveSurface()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(index)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "mesh_remove_surface", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a mesh's blend shape count.
*/
func (o *visualServer) MeshSetBlendShapeCount(mesh *RID, amount gdnative.Int) {
	log.Println("Calling VisualServer.MeshSetBlendShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "mesh_set_blend_shape_count", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a mesh's blend shape mode.
*/
func (o *visualServer) MeshSetBlendShapeMode(mesh *RID, mode gdnative.Int) {
	log.Println("Calling VisualServer.MeshSetBlendShapeMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "mesh_set_blend_shape_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a mesh's custom aabb.
*/
func (o *visualServer) MeshSetCustomAabb(mesh *RID, aabb *AABB) {
	log.Println("Calling VisualServer.MeshSetCustomAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(aabb)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "mesh_set_custom_aabb", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns a mesh's surface's aabb.
*/
func (o *visualServer) MeshSurfaceGetAabb(mesh *RID, surface gdnative.Int) *AABB {
	log.Println("Calling VisualServer.MeshSurfaceGetAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_aabb", goArguments, "*AABB")

	returnValue := goRet.Interface().(*AABB)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's surface's vertex buffer.
*/
func (o *visualServer) MeshSurfaceGetArray(mesh *RID, surface gdnative.Int) *PoolByteArray {
	log.Println("Calling VisualServer.MeshSurfaceGetArray()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_array", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's surface's amount of indices.
*/
func (o *visualServer) MeshSurfaceGetArrayIndexLen(mesh *RID, surface gdnative.Int) gdnative.Int {
	log.Println("Calling VisualServer.MeshSurfaceGetArrayIndexLen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_array_index_len", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's surface's amount of vertices.
*/
func (o *visualServer) MeshSurfaceGetArrayLen(mesh *RID, surface gdnative.Int) gdnative.Int {
	log.Println("Calling VisualServer.MeshSurfaceGetArrayLen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_array_len", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's surface's buffer arrays.
*/
func (o *visualServer) MeshSurfaceGetArrays(mesh *RID, surface gdnative.Int) *Array {
	log.Println("Calling VisualServer.MeshSurfaceGetArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_arrays", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's surface's arrays for blend shapes
*/
func (o *visualServer) MeshSurfaceGetBlendShapeArrays(mesh *RID, surface gdnative.Int) *Array {
	log.Println("Calling VisualServer.MeshSurfaceGetBlendShapeArrays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_blend_shape_arrays", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the format of a mesh's surface.
*/
func (o *visualServer) MeshSurfaceGetFormat(mesh *RID, surface gdnative.Int) gdnative.Int {
	log.Println("Calling VisualServer.MeshSurfaceGetFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_format", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's surface's index buffer.
*/
func (o *visualServer) MeshSurfaceGetIndexArray(mesh *RID, surface gdnative.Int) *PoolByteArray {
	log.Println("Calling VisualServer.MeshSurfaceGetIndexArray()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_index_array", goArguments, "*PoolByteArray")

	returnValue := goRet.Interface().(*PoolByteArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a mesh's surface's material.
*/
func (o *visualServer) MeshSurfaceGetMaterial(mesh *RID, surface gdnative.Int) *RID {
	log.Println("Calling VisualServer.MeshSurfaceGetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_material", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the primitive type of a mesh's surface.
*/
func (o *visualServer) MeshSurfaceGetPrimitiveType(mesh *RID, surface gdnative.Int) gdnative.Int {
	log.Println("Calling VisualServer.MeshSurfaceGetPrimitiveType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_primitive_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the aabb of a mesh's surface's skeleton.
*/
func (o *visualServer) MeshSurfaceGetSkeletonAabb(mesh *RID, surface gdnative.Int) *Array {
	log.Println("Calling VisualServer.MeshSurfaceGetSkeletonAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "mesh_surface_get_skeleton_aabb", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets a mesh's surface's material.
*/
func (o *visualServer) MeshSurfaceSetMaterial(mesh *RID, surface gdnative.Int, material *RID) {
	log.Println("Calling VisualServer.MeshSurfaceSetMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(surface)
	goArguments[2] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "mesh_surface_set_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) MultimeshAllocate(multimesh *RID, instances gdnative.Int, transformFormat gdnative.Int, colorFormat gdnative.Int) {
	log.Println("Calling VisualServer.MultimeshAllocate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(multimesh)
	goArguments[1] = reflect.ValueOf(instances)
	goArguments[2] = reflect.ValueOf(transformFormat)
	goArguments[3] = reflect.ValueOf(colorFormat)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "multimesh_allocate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) MultimeshGetAabb(multimesh *RID) *AABB {
	log.Println("Calling VisualServer.MultimeshGetAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(multimesh)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "multimesh_get_aabb", goArguments, "*AABB")

	returnValue := goRet.Interface().(*AABB)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) MultimeshGetInstanceCount(multimesh *RID) gdnative.Int {
	log.Println("Calling VisualServer.MultimeshGetInstanceCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(multimesh)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "multimesh_get_instance_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) MultimeshGetMesh(multimesh *RID) *RID {
	log.Println("Calling VisualServer.MultimeshGetMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(multimesh)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "multimesh_get_mesh", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) MultimeshGetVisibleInstances(multimesh *RID) gdnative.Int {
	log.Println("Calling VisualServer.MultimeshGetVisibleInstances()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(multimesh)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "multimesh_get_visible_instances", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) MultimeshInstanceGetColor(multimesh *RID, index gdnative.Int) *Color {
	log.Println("Calling VisualServer.MultimeshInstanceGetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(multimesh)
	goArguments[1] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "multimesh_instance_get_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) MultimeshInstanceGetTransform(multimesh *RID, index gdnative.Int) *Transform {
	log.Println("Calling VisualServer.MultimeshInstanceGetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(multimesh)
	goArguments[1] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "multimesh_instance_get_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) MultimeshInstanceGetTransform2D(multimesh *RID, index gdnative.Int) *Transform2D {
	log.Println("Calling VisualServer.MultimeshInstanceGetTransform2D()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(multimesh)
	goArguments[1] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "multimesh_instance_get_transform_2d", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) MultimeshInstanceSetColor(multimesh *RID, index gdnative.Int, color *Color) {
	log.Println("Calling VisualServer.MultimeshInstanceSetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(multimesh)
	goArguments[1] = reflect.ValueOf(index)
	goArguments[2] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "multimesh_instance_set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) MultimeshInstanceSetTransform(multimesh *RID, index gdnative.Int, transform *Transform) {
	log.Println("Calling VisualServer.MultimeshInstanceSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(multimesh)
	goArguments[1] = reflect.ValueOf(index)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "multimesh_instance_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) MultimeshInstanceSetTransform2D(multimesh *RID, index gdnative.Int, transform *Transform2D) {
	log.Println("Calling VisualServer.MultimeshInstanceSetTransform2D()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(multimesh)
	goArguments[1] = reflect.ValueOf(index)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "multimesh_instance_set_transform_2d", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) MultimeshSetMesh(multimesh *RID, mesh *RID) {
	log.Println("Calling VisualServer.MultimeshSetMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(multimesh)
	goArguments[1] = reflect.ValueOf(mesh)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "multimesh_set_mesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) MultimeshSetVisibleInstances(multimesh *RID, visible gdnative.Int) {
	log.Println("Calling VisualServer.MultimeshSetVisibleInstances()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(multimesh)
	goArguments[1] = reflect.ValueOf(visible)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "multimesh_set_visible_instances", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) OmniLightCreate() *RID {
	log.Println("Calling VisualServer.OmniLightCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "omni_light_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) ParticlesCreate() *RID {
	log.Println("Calling VisualServer.ParticlesCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "particles_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) ParticlesGetCurrentAabb(particles *RID) *AABB {
	log.Println("Calling VisualServer.ParticlesGetCurrentAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(particles)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "particles_get_current_aabb", goArguments, "*AABB")

	returnValue := goRet.Interface().(*AABB)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) ParticlesGetEmitting(particles *RID) gdnative.Bool {
	log.Println("Calling VisualServer.ParticlesGetEmitting()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(particles)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "particles_get_emitting", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) ParticlesRestart(particles *RID) {
	log.Println("Calling VisualServer.ParticlesRestart()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(particles)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_restart", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetAmount(particles *RID, amount gdnative.Int) {
	log.Println("Calling VisualServer.ParticlesSetAmount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_amount", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetCustomAabb(particles *RID, aabb *AABB) {
	log.Println("Calling VisualServer.ParticlesSetCustomAabb()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(aabb)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_custom_aabb", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetDrawOrder(particles *RID, order gdnative.Int) {
	log.Println("Calling VisualServer.ParticlesSetDrawOrder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(order)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_draw_order", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetDrawPassMesh(particles *RID, pass gdnative.Int, mesh *RID) {
	log.Println("Calling VisualServer.ParticlesSetDrawPassMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(pass)
	goArguments[2] = reflect.ValueOf(mesh)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_draw_pass_mesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetDrawPasses(particles *RID, count gdnative.Int) {
	log.Println("Calling VisualServer.ParticlesSetDrawPasses()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(count)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_draw_passes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetEmissionTransform(particles *RID, transform *Transform) {
	log.Println("Calling VisualServer.ParticlesSetEmissionTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_emission_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetEmitting(particles *RID, emitting gdnative.Bool) {
	log.Println("Calling VisualServer.ParticlesSetEmitting()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(emitting)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_emitting", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetExplosivenessRatio(particles *RID, ratio gdnative.Float) {
	log.Println("Calling VisualServer.ParticlesSetExplosivenessRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_explosiveness_ratio", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetFixedFps(particles *RID, fps gdnative.Int) {
	log.Println("Calling VisualServer.ParticlesSetFixedFps()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(fps)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_fixed_fps", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetFractionalDelta(particles *RID, enable gdnative.Bool) {
	log.Println("Calling VisualServer.ParticlesSetFractionalDelta()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_fractional_delta", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetLifetime(particles *RID, lifetime gdnative.Float) {
	log.Println("Calling VisualServer.ParticlesSetLifetime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(lifetime)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_lifetime", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetOneShot(particles *RID, oneShot gdnative.Bool) {
	log.Println("Calling VisualServer.ParticlesSetOneShot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(oneShot)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_one_shot", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetPreProcessTime(particles *RID, time gdnative.Float) {
	log.Println("Calling VisualServer.ParticlesSetPreProcessTime()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(time)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_pre_process_time", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetProcessMaterial(particles *RID, material *RID) {
	log.Println("Calling VisualServer.ParticlesSetProcessMaterial()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(material)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_process_material", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetRandomnessRatio(particles *RID, ratio gdnative.Float) {
	log.Println("Calling VisualServer.ParticlesSetRandomnessRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_randomness_ratio", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetSpeedScale(particles *RID, scale gdnative.Float) {
	log.Println("Calling VisualServer.ParticlesSetSpeedScale()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_speed_scale", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ParticlesSetUseLocalCoordinates(particles *RID, enable gdnative.Bool) {
	log.Println("Calling VisualServer.ParticlesSetUseLocalCoordinates()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(particles)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "particles_set_use_local_coordinates", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeCreate() *RID {
	log.Println("Calling VisualServer.ReflectionProbeCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "reflection_probe_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) ReflectionProbeSetAsInterior(probe *RID, enable gdnative.Bool) {
	log.Println("Calling VisualServer.ReflectionProbeSetAsInterior()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_as_interior", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetCullMask(probe *RID, layers gdnative.Int) {
	log.Println("Calling VisualServer.ReflectionProbeSetCullMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(layers)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_cull_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetEnableBoxProjection(probe *RID, enable gdnative.Bool) {
	log.Println("Calling VisualServer.ReflectionProbeSetEnableBoxProjection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_enable_box_projection", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetEnableShadows(probe *RID, enable gdnative.Bool) {
	log.Println("Calling VisualServer.ReflectionProbeSetEnableShadows()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_enable_shadows", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetExtents(probe *RID, extents *Vector3) {
	log.Println("Calling VisualServer.ReflectionProbeSetExtents()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(extents)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_extents", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetIntensity(probe *RID, intensity gdnative.Float) {
	log.Println("Calling VisualServer.ReflectionProbeSetIntensity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(intensity)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_intensity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetInteriorAmbient(probe *RID, color *Color) {
	log.Println("Calling VisualServer.ReflectionProbeSetInteriorAmbient()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_interior_ambient", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetInteriorAmbientEnergy(probe *RID, energy gdnative.Float) {
	log.Println("Calling VisualServer.ReflectionProbeSetInteriorAmbientEnergy()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(energy)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_interior_ambient_energy", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetInteriorAmbientProbeContribution(probe *RID, contrib gdnative.Float) {
	log.Println("Calling VisualServer.ReflectionProbeSetInteriorAmbientProbeContribution()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(contrib)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_interior_ambient_probe_contribution", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetMaxDistance(probe *RID, distance gdnative.Float) {
	log.Println("Calling VisualServer.ReflectionProbeSetMaxDistance()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(distance)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_max_distance", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetOriginOffset(probe *RID, offset *Vector3) {
	log.Println("Calling VisualServer.ReflectionProbeSetOriginOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_origin_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ReflectionProbeSetUpdateMode(probe *RID, mode gdnative.Int) {
	log.Println("Calling VisualServer.ReflectionProbeSetUpdateMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(probe)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reflection_probe_set_update_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Schedules a callback to the corresponding named 'method' on 'where' after a frame has been drawn. The callback method must use only 1 argument which will be called with 'userdata'.
*/
func (o *visualServer) RequestFrameDrawnCallback(where *Object, method gdnative.String, userdata *Variant) {
	log.Println("Calling VisualServer.RequestFrameDrawnCallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(where)
	goArguments[1] = reflect.ValueOf(method)
	goArguments[2] = reflect.ValueOf(userdata)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "request_frame_drawn_callback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ScenarioCreate() *RID {
	log.Println("Calling VisualServer.ScenarioCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "scenario_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) ScenarioSetDebug(scenario *RID, debugMode gdnative.Int) {
	log.Println("Calling VisualServer.ScenarioSetDebug()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(scenario)
	goArguments[1] = reflect.ValueOf(debugMode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "scenario_set_debug", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ScenarioSetEnvironment(scenario *RID, environment *RID) {
	log.Println("Calling VisualServer.ScenarioSetEnvironment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(scenario)
	goArguments[1] = reflect.ValueOf(environment)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "scenario_set_environment", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ScenarioSetFallbackEnvironment(scenario *RID, environment *RID) {
	log.Println("Calling VisualServer.ScenarioSetFallbackEnvironment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(scenario)
	goArguments[1] = reflect.ValueOf(environment)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "scenario_set_fallback_environment", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ScenarioSetReflectionAtlasSize(scenario *RID, pSize gdnative.Int, subdiv gdnative.Int) {
	log.Println("Calling VisualServer.ScenarioSetReflectionAtlasSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(scenario)
	goArguments[1] = reflect.ValueOf(pSize)
	goArguments[2] = reflect.ValueOf(subdiv)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "scenario_set_reflection_atlas_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a boot image. The color defines the background color and if scale is [code]true[/code], the image will be scaled to fit the screen size.
*/
func (o *visualServer) SetBootImage(image *Image, color *Color, scale gdnative.Bool) {
	log.Println("Calling VisualServer.SetBootImage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(image)
	goArguments[1] = reflect.ValueOf(color)
	goArguments[2] = reflect.ValueOf(scale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_boot_image", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) SetDebugGenerateWireframes(generate gdnative.Bool) {
	log.Println("Calling VisualServer.SetDebugGenerateWireframes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(generate)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_debug_generate_wireframes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) SetDefaultClearColor(color *Color) {
	log.Println("Calling VisualServer.SetDefaultClearColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_default_clear_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates an empty shader.
*/
func (o *visualServer) ShaderCreate() *RID {
	log.Println("Calling VisualServer.ShaderCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "shader_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a shader's code.
*/
func (o *visualServer) ShaderGetCode(shader *RID) gdnative.String {
	log.Println("Calling VisualServer.ShaderGetCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shader)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "shader_get_code", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a default texture from a shader searched by name.
*/
func (o *visualServer) ShaderGetDefaultTextureParam(shader *RID, name gdnative.String) *RID {
	log.Println("Calling VisualServer.ShaderGetDefaultTextureParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(shader)
	goArguments[1] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "shader_get_default_texture_param", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the parameters of a shader.
*/
func (o *visualServer) ShaderGetParamList(shader *RID) *Array {
	log.Println("Calling VisualServer.ShaderGetParamList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shader)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "shader_get_param_list", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets a shader's code.
*/
func (o *visualServer) ShaderSetCode(shader *RID, code gdnative.String) {
	log.Println("Calling VisualServer.ShaderSetCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(shader)
	goArguments[1] = reflect.ValueOf(code)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "shader_set_code", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a shader's default texture. Overwrites the texture given by name.
*/
func (o *visualServer) ShaderSetDefaultTextureParam(shader *RID, name gdnative.String, texture *RID) {
	log.Println("Calling VisualServer.ShaderSetDefaultTextureParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(shader)
	goArguments[1] = reflect.ValueOf(name)
	goArguments[2] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "shader_set_default_texture_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) SkeletonAllocate(skeleton *RID, bones gdnative.Int, is2DSkeleton gdnative.Bool) {
	log.Println("Calling VisualServer.SkeletonAllocate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(skeleton)
	goArguments[1] = reflect.ValueOf(bones)
	goArguments[2] = reflect.ValueOf(is2DSkeleton)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "skeleton_allocate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) SkeletonBoneGetTransform(skeleton *RID, bone gdnative.Int) *Transform {
	log.Println("Calling VisualServer.SkeletonBoneGetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(skeleton)
	goArguments[1] = reflect.ValueOf(bone)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "skeleton_bone_get_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) SkeletonBoneGetTransform2D(skeleton *RID, bone gdnative.Int) *Transform2D {
	log.Println("Calling VisualServer.SkeletonBoneGetTransform2D()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(skeleton)
	goArguments[1] = reflect.ValueOf(bone)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "skeleton_bone_get_transform_2d", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) SkeletonBoneSetTransform(skeleton *RID, bone gdnative.Int, transform *Transform) {
	log.Println("Calling VisualServer.SkeletonBoneSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(skeleton)
	goArguments[1] = reflect.ValueOf(bone)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "skeleton_bone_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) SkeletonBoneSetTransform2D(skeleton *RID, bone gdnative.Int, transform *Transform2D) {
	log.Println("Calling VisualServer.SkeletonBoneSetTransform2D()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(skeleton)
	goArguments[1] = reflect.ValueOf(bone)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "skeleton_bone_set_transform_2d", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) SkeletonCreate() *RID {
	log.Println("Calling VisualServer.SkeletonCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "skeleton_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *visualServer) SkeletonGetBoneCount(skeleton *RID) gdnative.Int {
	log.Println("Calling VisualServer.SkeletonGetBoneCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(skeleton)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "skeleton_get_bone_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Creates an empty sky.
*/
func (o *visualServer) SkyCreate() *RID {
	log.Println("Calling VisualServer.SkyCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "sky_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets a sky's texture.
*/
func (o *visualServer) SkySetTexture(sky *RID, cubeMap *RID, radianceSize gdnative.Int) {
	log.Println("Calling VisualServer.SkySetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(sky)
	goArguments[1] = reflect.ValueOf(cubeMap)
	goArguments[2] = reflect.ValueOf(radianceSize)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "sky_set_texture", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) SpotLightCreate() *RID {
	log.Println("Calling VisualServer.SpotLightCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "spot_light_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Allocates space for a texture's image or video.
*/
func (o *visualServer) TextureAllocate(texture *RID, width gdnative.Int, height gdnative.Int, format gdnative.Int, flags gdnative.Int) {
	log.Println("Calling VisualServer.TextureAllocate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(texture)
	goArguments[1] = reflect.ValueOf(width)
	goArguments[2] = reflect.ValueOf(height)
	goArguments[3] = reflect.ValueOf(format)
	goArguments[4] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "texture_allocate", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates an empty texture.
*/
func (o *visualServer) TextureCreate() *RID {
	log.Println("Calling VisualServer.TextureCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Creates a texture, allocates the space for an image, and fills in the image.
*/
func (o *visualServer) TextureCreateFromImage(image *Image, flags gdnative.Int) *RID {
	log.Println("Calling VisualServer.TextureCreateFromImage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(image)
	goArguments[1] = reflect.ValueOf(flags)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_create_from_image", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a list of all the textures and their information.
*/
func (o *visualServer) TextureDebugUsage() *Array {
	log.Println("Calling VisualServer.TextureDebugUsage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_debug_usage", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a copy of a texture's image unless it's a CubeMap, in which case it returns the [RID] of the image at one of the cubes sides.
*/
func (o *visualServer) TextureGetData(texture *RID, cubeSide gdnative.Int) *Image {
	log.Println("Calling VisualServer.TextureGetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(texture)
	goArguments[1] = reflect.ValueOf(cubeSide)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_get_data", goArguments, "*Image")

	returnValue := goRet.Interface().(*Image)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the flags of a texture.
*/
func (o *visualServer) TextureGetFlags(texture *RID) gdnative.Int {
	log.Println("Calling VisualServer.TextureGetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_get_flags", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the format of the texture's image.
*/
func (o *visualServer) TextureGetFormat(texture *RID) gdnative.Int {
	log.Println("Calling VisualServer.TextureGetFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_get_format", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the texture's height.
*/
func (o *visualServer) TextureGetHeight(texture *RID) gdnative.Int {
	log.Println("Calling VisualServer.TextureGetHeight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_get_height", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the texture's path.
*/
func (o *visualServer) TextureGetPath(texture *RID) gdnative.String {
	log.Println("Calling VisualServer.TextureGetPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_get_path", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the opengl id of the texture's image.
*/
func (o *visualServer) TextureGetTexid(texture *RID) gdnative.Int {
	log.Println("Calling VisualServer.TextureGetTexid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_get_texid", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the texture's width.
*/
func (o *visualServer) TextureGetWidth(texture *RID) gdnative.Int {
	log.Println("Calling VisualServer.TextureGetWidth()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "texture_get_width", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the texture's image data. If it's a CubeMap, it sets the image data at a cube side.
*/
func (o *visualServer) TextureSetData(texture *RID, image *Image, cubeSide gdnative.Int) {
	log.Println("Calling VisualServer.TextureSetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(texture)
	goArguments[1] = reflect.ValueOf(image)
	goArguments[2] = reflect.ValueOf(cubeSide)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "texture_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the texture's flags. See [enum TextureFlags] for options
*/
func (o *visualServer) TextureSetFlags(texture *RID, flags gdnative.Int) {
	log.Println("Calling VisualServer.TextureSetFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(texture)
	goArguments[1] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "texture_set_flags", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the texture's path.
*/
func (o *visualServer) TextureSetPath(texture *RID, path gdnative.String) {
	log.Println("Calling VisualServer.TextureSetPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(texture)
	goArguments[1] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "texture_set_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code], sets internal processes to shrink all image data to half the size.
*/
func (o *visualServer) TextureSetShrinkAllX2OnSetData(shrink gdnative.Bool) {
	log.Println("Calling VisualServer.TextureSetShrinkAllX2OnSetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shrink)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "texture_set_shrink_all_x2_on_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Overwrites the texture's width and height.
*/
func (o *visualServer) TextureSetSizeOverride(texture *RID, width gdnative.Int, height gdnative.Int) {
	log.Println("Calling VisualServer.TextureSetSizeOverride()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(texture)
	goArguments[1] = reflect.ValueOf(width)
	goArguments[2] = reflect.ValueOf(height)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "texture_set_size_override", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code], the image will be stored in the texture's images array if overwritten.
*/
func (o *visualServer) TexturesKeepOriginal(enable gdnative.Bool) {
	log.Println("Calling VisualServer.TexturesKeepOriginal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "textures_keep_original", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a viewport's camera.
*/
func (o *visualServer) ViewportAttachCamera(viewport *RID, camera *RID) {
	log.Println("Calling VisualServer.ViewportAttachCamera()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(camera)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_attach_camera", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a viewport's canvas.
*/
func (o *visualServer) ViewportAttachCanvas(viewport *RID, canvas *RID) {
	log.Println("Calling VisualServer.ViewportAttachCanvas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(canvas)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_attach_canvas", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Attaches a viewport to a screen.
*/
func (o *visualServer) ViewportAttachToScreen(viewport *RID, rect *Rect2, screen gdnative.Int) {
	log.Println("Calling VisualServer.ViewportAttachToScreen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(rect)
	goArguments[2] = reflect.ValueOf(screen)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_attach_to_screen", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates an empty viewport.
*/
func (o *visualServer) ViewportCreate() *RID {
	log.Println("Calling VisualServer.ViewportCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "viewport_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Detaches the viewport from the screen.
*/
func (o *visualServer) ViewportDetach(viewport *RID) {
	log.Println("Calling VisualServer.ViewportDetach()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(viewport)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_detach", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns a viewport's render info. for options see VIEWPORT_RENDER_INFO* constants.
*/
func (o *visualServer) ViewportGetRenderInfo(viewport *RID, info gdnative.Int) gdnative.Int {
	log.Println("Calling VisualServer.ViewportGetRenderInfo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(info)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "viewport_get_render_info", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the viewport's last rendered frame.
*/
func (o *visualServer) ViewportGetTexture(viewport *RID) *RID {
	log.Println("Calling VisualServer.ViewportGetTexture()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(viewport)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "viewport_get_texture", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Detaches a viewport from a canvas and vice versa.
*/
func (o *visualServer) ViewportRemoveCanvas(viewport *RID, canvas *RID) {
	log.Println("Calling VisualServer.ViewportRemoveCanvas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(canvas)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_remove_canvas", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code], sets the viewport active, else sets it inactive.
*/
func (o *visualServer) ViewportSetActive(viewport *RID, active gdnative.Bool) {
	log.Println("Calling VisualServer.ViewportSetActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(active)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the renderlayer for a viewport's canvas.
*/
func (o *visualServer) ViewportSetCanvasLayer(viewport *RID, canvas *RID, layer gdnative.Int) {
	log.Println("Calling VisualServer.ViewportSetCanvasLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(canvas)
	goArguments[2] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_canvas_layer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the transformation of a viewport's canvas.
*/
func (o *visualServer) ViewportSetCanvasTransform(viewport *RID, canvas *RID, offset *Transform2D) {
	log.Println("Calling VisualServer.ViewportSetCanvasTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(canvas)
	goArguments[2] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_canvas_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the clear mode of a viewport. See VIEWPORT_CLEAR_MODE_* constants for options.
*/
func (o *visualServer) ViewportSetClearMode(viewport *RID, clearMode gdnative.Int) {
	log.Println("Calling VisualServer.ViewportSetClearMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(clearMode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_clear_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the debug draw mode of a viewport. See VIEWPORT_DEBUG_DRAW_* constants for options.
*/
func (o *visualServer) ViewportSetDebugDraw(viewport *RID, draw gdnative.Int) {
	log.Println("Calling VisualServer.ViewportSetDebugDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(draw)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_debug_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] a viewport's 3D rendering should be disabled.
*/
func (o *visualServer) ViewportSetDisable3D(viewport *RID, disabled gdnative.Bool) {
	log.Println("Calling VisualServer.ViewportSetDisable3D()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_disable_3d", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] rendering of a viewport's environment should be disabled.
*/
func (o *visualServer) ViewportSetDisableEnvironment(viewport *RID, disabled gdnative.Bool) {
	log.Println("Calling VisualServer.ViewportSetDisableEnvironment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_disable_environment", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the viewport's global transformation matrix.
*/
func (o *visualServer) ViewportSetGlobalCanvasTransform(viewport *RID, transform *Transform2D) {
	log.Println("Calling VisualServer.ViewportSetGlobalCanvasTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_global_canvas_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the viewport should render to hdr.
*/
func (o *visualServer) ViewportSetHdr(viewport *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.ViewportSetHdr()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_hdr", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the viewport's canvas should not be rendered.
*/
func (o *visualServer) ViewportSetHideCanvas(viewport *RID, hidden gdnative.Bool) {
	log.Println("Calling VisualServer.ViewportSetHideCanvas()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(hidden)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_hide_canvas", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *visualServer) ViewportSetHideScenario(viewport *RID, hidden gdnative.Bool) {
	log.Println("Calling VisualServer.ViewportSetHideScenario()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(hidden)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_hide_scenario", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the anti-aliasing mode. see [enum ViewportMSAA] for options.
*/
func (o *visualServer) ViewportSetMsaa(viewport *RID, msaa gdnative.Int) {
	log.Println("Calling VisualServer.ViewportSetMsaa()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(msaa)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_msaa", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the viewport's parent to another viewport.
*/
func (o *visualServer) ViewportSetParentViewport(viewport *RID, parentViewport *RID) {
	log.Println("Calling VisualServer.ViewportSetParentViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(parentViewport)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_parent_viewport", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a viewport's scenario. The scenario contains information about the [enum ScenarioDebugMode], environment information, reflection atlas etc.
*/
func (o *visualServer) ViewportSetScenario(viewport *RID, scenario *RID) {
	log.Println("Calling VisualServer.ViewportSetScenario()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(scenario)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_scenario", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the shadow atlas quadrant's subdivision.
*/
func (o *visualServer) ViewportSetShadowAtlasQuadrantSubdivision(viewport *RID, quadrant gdnative.Int, subdivision gdnative.Int) {
	log.Println("Calling VisualServer.ViewportSetShadowAtlasQuadrantSubdivision()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(quadrant)
	goArguments[2] = reflect.ValueOf(subdivision)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_shadow_atlas_quadrant_subdivision", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the size of the shadow atlas's images.
*/
func (o *visualServer) ViewportSetShadowAtlasSize(viewport *RID, size gdnative.Int) {
	log.Println("Calling VisualServer.ViewportSetShadowAtlasSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_shadow_atlas_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the viewport's width and height.
*/
func (o *visualServer) ViewportSetSize(viewport *RID, width gdnative.Int, height gdnative.Int) {
	log.Println("Calling VisualServer.ViewportSetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(width)
	goArguments[2] = reflect.ValueOf(height)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the viewport should render its background as transparent.
*/
func (o *visualServer) ViewportSetTransparentBackground(viewport *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.ViewportSetTransparentBackground()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_transparent_background", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets when the viewport should be updated. See VIEWPORT_UPDATE_MODE_* constants for options.
*/
func (o *visualServer) ViewportSetUpdateMode(viewport *RID, updateMode gdnative.Int) {
	log.Println("Calling VisualServer.ViewportSetUpdateMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(updateMode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_update_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets what should be rendered in the viewport. See VIEWPORT_USAGE_* constants for options.
*/
func (o *visualServer) ViewportSetUsage(viewport *RID, usage gdnative.Int) {
	log.Println("Calling VisualServer.ViewportSetUsage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(usage)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_usage", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the viewport should use augmented or virtual reality technologies. See [ARVRInterface].
*/
func (o *visualServer) ViewportSetUseArvr(viewport *RID, useArvr gdnative.Bool) {
	log.Println("Calling VisualServer.ViewportSetUseArvr()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(useArvr)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_use_arvr", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the viewport's rendering should be flipped vertically.
*/
func (o *visualServer) ViewportSetVflip(viewport *RID, enabled gdnative.Bool) {
	log.Println("Calling VisualServer.ViewportSetVflip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(viewport)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "viewport_set_vflip", goArguments, "")

	log.Println("  Function successfully completed.")

}
