package inputmap

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func newSingletonInputMap() *inputMap {
	obj := &inputMap{}
	ptr := C.godot_global_get_singleton(C.CString("InputMap"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*
   Manages all [InputEventAction] which can be created/modified from the project settings menu [code]Project > Project Settings > Input Map[/code] or in code with [method add_action] and [method action_add_event]. See [method Node._input].
*/
var InputMap = newSingletonInputMap()

/*
Manages all [InputEventAction] which can be created/modified from the project settings menu [code]Project > Project Settings > Input Map[/code] or in code with [method add_action] and [method action_add_event]. See [method Node._input].
*/
type inputMap struct {
	Object
}

func (o *inputMap) BaseClass() string {
	return "InputMap"
}

/*
   Adds an [InputEvent] to an action. This [InputEvent] will trigger the action.
*/
func (o *inputMap) ActionAddEvent(action gdnative.String, event *InputEvent) {
	log.Println("Calling InputMap.ActionAddEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(action)
	goArguments[1] = reflect.ValueOf(event)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "action_add_event", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes an [InputEvent] from an action.
*/
func (o *inputMap) ActionEraseEvent(action gdnative.String, event *InputEvent) {
	log.Println("Calling InputMap.ActionEraseEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(action)
	goArguments[1] = reflect.ValueOf(event)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "action_erase_event", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns [true] if an action has an [InputEvent] associated with it.
*/
func (o *inputMap) ActionHasEvent(action gdnative.String, event *InputEvent) gdnative.Bool {
	log.Println("Calling InputMap.ActionHasEvent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(action)
	goArguments[1] = reflect.ValueOf(event)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "action_has_event", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Adds an (empty) action to the [code]InputMap[/code]. An [InputEvent] can then be added to this action with [method action_add_event].
*/
func (o *inputMap) AddAction(action gdnative.String) {
	log.Println("Calling InputMap.AddAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_action", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes an action from the [code]InputMap[/code].
*/
func (o *inputMap) EraseAction(action gdnative.String) {
	log.Println("Calling InputMap.EraseAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "erase_action", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns [true] if the given event is part of an existing action. This method ignores keyboard modifiers if the given [InputEvent] is not pressed (for proper release detection). See [method action_has_event] if you don't want this behavior.
*/
func (o *inputMap) EventIsAction(event *InputEvent, action gdnative.String) gdnative.Bool {
	log.Println("Calling InputMap.EventIsAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(event)
	goArguments[1] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "event_is_action", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns an array of [InputEvent]s associated with a given action.
*/
func (o *inputMap) GetActionList(action gdnative.String) *Array {
	log.Println("Calling InputMap.GetActionList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_action_list", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns an array of all actions in the [code]InputMap[/code].
*/
func (o *inputMap) GetActions() *Array {
	log.Println("Calling InputMap.GetActions()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_actions", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the [code]InputMap[/code] has a registered action with the given name.
*/
func (o *inputMap) HasAction(action gdnative.String) gdnative.Bool {
	log.Println("Calling InputMap.HasAction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(action)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_action", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Clears all [InputEventAction] in the [code]InputMap[/code] and load it anew from [ProjectSettings].
*/
func (o *inputMap) LoadFromGlobals() {
	log.Println("Calling InputMap.LoadFromGlobals()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "load_from_globals", goArguments, "")

	log.Println("  Function successfully completed.")

}
