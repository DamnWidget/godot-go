package interpolatedcamera

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type InterpolatedCamera struct {
	Camera
}

func (o *InterpolatedCamera) BaseClass() string {
	return "InterpolatedCamera"
}

/*
   Undocumented
*/
func (o *InterpolatedCamera) GetSpeed() gdnative.Float {
	log.Println("Calling InterpolatedCamera.GetSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_speed", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InterpolatedCamera) GetTargetPath() *NodePath {
	log.Println("Calling InterpolatedCamera.GetTargetPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_target_path", goArguments, "*NodePath")

	returnValue := goRet.Interface().(*NodePath)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InterpolatedCamera) IsInterpolationEnabled() gdnative.Bool {
	log.Println("Calling InterpolatedCamera.IsInterpolationEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_interpolation_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *InterpolatedCamera) SetInterpolationEnabled(targetPath gdnative.Bool) {
	log.Println("Calling InterpolatedCamera.SetInterpolationEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(targetPath)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_interpolation_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *InterpolatedCamera) SetSpeed(speed gdnative.Float) {
	log.Println("Calling InterpolatedCamera.SetSpeed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(speed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_speed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *InterpolatedCamera) SetTarget(target *Object) {
	log.Println("Calling InterpolatedCamera.SetTarget()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(target)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_target", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *InterpolatedCamera) SetTargetPath(targetPath *NodePath) {
	log.Println("Calling InterpolatedCamera.SetTargetPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(targetPath)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_target_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   InterpolatedCameraImplementer is an interface for InterpolatedCamera objects.
*/
type InterpolatedCameraImplementer interface {
	Class
}
