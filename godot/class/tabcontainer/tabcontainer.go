package tabcontainer

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Sets the active tab's [code]visible[/code] property to the value [code]true[/code]. Sets all other children's to [code]false[/code]. Ignores non-[Control] children. Individual tabs are always visible unless you use [method set_tab_disabled] and [method set_tab_title] to hide it. To hide only a tab's content, nest the content inside a child [Control], so it receives the [code]TabContainer[/code]'s visibility setting instead.
*/
type TabContainer struct {
	Control
}

func (o *TabContainer) BaseClass() string {
	return "TabContainer"
}

/*
   Undocumented
*/
func (o *TabContainer) X_ChildRenamedCallback() {
	log.Println("Calling TabContainer.X_ChildRenamedCallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_child_renamed_callback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TabContainer) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling TabContainer.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TabContainer) X_OnThemeChanged() {
	log.Println("Calling TabContainer.X_OnThemeChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_on_theme_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TabContainer) AreTabsVisible() gdnative.Bool {
	log.Println("Calling TabContainer.AreTabsVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "are_tabs_visible", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TabContainer) GetCurrentTab() gdnative.Int {
	log.Println("Calling TabContainer.GetCurrentTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_current_tab", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the child [Control] node located at the active tab index.
*/
func (o *TabContainer) GetCurrentTabControl() *Control {
	log.Println("Calling TabContainer.GetCurrentTabControl()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_current_tab_control", goArguments, "*Control")

	returnValue := goRet.Interface().(*Control)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Popup] node instance if one has been set already with [method set_popup].
*/
func (o *TabContainer) GetPopup() *Popup {
	log.Println("Calling TabContainer.GetPopup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_popup", goArguments, "*Popup")

	returnValue := goRet.Interface().(*Popup)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the previously active tab index.
*/
func (o *TabContainer) GetPreviousTab() gdnative.Int {
	log.Println("Calling TabContainer.GetPreviousTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_previous_tab", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TabContainer) GetTabAlign() gdnative.Int {
	log.Println("Calling TabContainer.GetTabAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_align", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the currently visible tab's [Control] node.
*/
func (o *TabContainer) GetTabControl(idx gdnative.Int) *Control {
	log.Println("Calling TabContainer.GetTabControl()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_control", goArguments, "*Control")

	returnValue := goRet.Interface().(*Control)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of tabs.
*/
func (o *TabContainer) GetTabCount() gdnative.Int {
	log.Println("Calling TabContainer.GetTabCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled.
*/
func (o *TabContainer) GetTabDisabled(tabIdx gdnative.Int) gdnative.Bool {
	log.Println("Calling TabContainer.GetTabDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_disabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Texture] for the tab at index [code]tab_idx[/code] or null if the tab has no [Texture].
*/
func (o *TabContainer) GetTabIcon(tabIdx gdnative.Int) *Texture {
	log.Println("Calling TabContainer.GetTabIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_icon", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the title of the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].
*/
func (o *TabContainer) GetTabTitle(tabIdx gdnative.Int) gdnative.String {
	log.Println("Calling TabContainer.GetTabTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tab_title", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *TabContainer) SetCurrentTab(tabIdx gdnative.Int) {
	log.Println("Calling TabContainer.SetCurrentTab()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(tabIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_current_tab", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If set on a [Popup] node instance, a popup menu icon appears in the top-right corner of the [code]TabContainer[/code]. Clicking it will expand the [Popup] node.
*/
func (o *TabContainer) SetPopup(popup *Object) {
	log.Println("Calling TabContainer.SetPopup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(popup)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_popup", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TabContainer) SetTabAlign(align gdnative.Int) {
	log.Println("Calling TabContainer.SetTabAlign()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(align)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]disabled[/code] is false, hides the tab at index [code]tab_idx[/code]. Note that its title text will remain, unless also removed with [method set_tab_title].
*/
func (o *TabContainer) SetTabDisabled(tabIdx gdnative.Int, disabled gdnative.Bool) {
	log.Println("Calling TabContainer.SetTabDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets an icon for the tab at index [code]tab_idx[/code].
*/
func (o *TabContainer) SetTabIcon(tabIdx gdnative.Int, icon *Texture) {
	log.Println("Calling TabContainer.SetTabIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(icon)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a title for the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].
*/
func (o *TabContainer) SetTabTitle(tabIdx gdnative.Int, title gdnative.String) {
	log.Println("Calling TabContainer.SetTabTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(tabIdx)
	goArguments[1] = reflect.ValueOf(title)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tab_title", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *TabContainer) SetTabsVisible(visible gdnative.Bool) {
	log.Println("Calling TabContainer.SetTabsVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(visible)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_tabs_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   TabContainerImplementer is an interface for TabContainer objects.
*/
type TabContainerImplementer interface {
	Class
}
