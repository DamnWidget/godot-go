package sky

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
The base class for [PanoramaSky] and [ProceduralSky].
*/
type Sky struct {
	Resource
}

func (o *Sky) BaseClass() string {
	return "Sky"
}

/*
   Undocumented
*/
func (o *Sky) GetRadianceSize() gdnative.Int {
	log.Println("Calling Sky.GetRadianceSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_radiance_size", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Sky) SetRadianceSize(size gdnative.Int) {
	log.Println("Calling Sky.SetRadianceSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_radiance_size", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SkyImplementer is an interface for Sky objects.
*/
type SkyImplementer interface {
	Class
}
