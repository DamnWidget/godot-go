package class

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewWorldEnvironmentFromPointer(ptr gdnative.Pointer) WorldEnvironment {
func NewWorldEnvironmentFromPointer(ptr gdnative.Pointer) WorldEnvironment {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := WorldEnvironment{}
	obj.SetBaseObject(owner)

	return obj
}

/*
The [code]WorldEnvironment[/code] node is used to configure the default [Environment] for the scene. The parameters defined in the [code]WorldEnvironment[/code] can be overridden by an [Environment] node set on the current [Camera]. Additionally, only one [code]WorldEnvironment[/code] may be instanced in a given scene at a time. The [code]WorldEnvironment[/code] allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene.
*/
type WorldEnvironment struct {
	Node
	owner gdnative.Object
}

func (o *WorldEnvironment) BaseClass() string {
	return "WorldEnvironment"
}

/*
        Undocumented
	Args: [], Returns: Environment
*/
func (o *WorldEnvironment) GetEnvironment() Environment {
	//log.Println("Calling WorldEnvironment.GetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WorldEnvironment", "get_environment")

	// Call the parent method.
	// Environment
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewEnvironmentFromPointer(retPtr)
	//log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false env Environment}], Returns: void
*/
func (o *WorldEnvironment) SetEnvironment(env Environment) {
	//log.Println("Calling WorldEnvironment.SetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(env.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WorldEnvironment", "set_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}
