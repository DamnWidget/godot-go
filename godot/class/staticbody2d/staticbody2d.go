package staticbody2d

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Static body for 2D Physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms. Additionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt).
*/
type StaticBody2D struct {
	PhysicsBody2D
}

func (o *StaticBody2D) BaseClass() string {
	return "StaticBody2D"
}

/*
   Undocumented
*/
func (o *StaticBody2D) GetBounce() gdnative.Float {
	log.Println("Calling StaticBody2D.GetBounce()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bounce", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StaticBody2D) GetConstantAngularVelocity() gdnative.Float {
	log.Println("Calling StaticBody2D.GetConstantAngularVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_constant_angular_velocity", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StaticBody2D) GetConstantLinearVelocity() *Vector2 {
	log.Println("Calling StaticBody2D.GetConstantLinearVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_constant_linear_velocity", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StaticBody2D) GetFriction() gdnative.Float {
	log.Println("Calling StaticBody2D.GetFriction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_friction", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StaticBody2D) SetBounce(bounce gdnative.Float) {
	log.Println("Calling StaticBody2D.SetBounce()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bounce)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bounce", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *StaticBody2D) SetConstantAngularVelocity(vel gdnative.Float) {
	log.Println("Calling StaticBody2D.SetConstantAngularVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vel)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_constant_angular_velocity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *StaticBody2D) SetConstantLinearVelocity(vel *Vector2) {
	log.Println("Calling StaticBody2D.SetConstantLinearVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vel)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_constant_linear_velocity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *StaticBody2D) SetFriction(friction gdnative.Float) {
	log.Println("Calling StaticBody2D.SetFriction()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(friction)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_friction", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   StaticBody2DImplementer is an interface for StaticBody2D objects.
*/
type StaticBody2DImplementer interface {
	Class
}
