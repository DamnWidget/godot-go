package stylebox

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type StyleBoxLine struct {
	StyleBox
}

func (o *StyleBoxLine) BaseClass() string {
	return "StyleBoxLine"
}

/*
   Undocumented
*/
func (o *StyleBoxLine) GetColor() *Color {
	log.Println("Calling StyleBoxLine.GetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StyleBoxLine) GetGrow() gdnative.Float {
	log.Println("Calling StyleBoxLine.GetGrow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_grow", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StyleBoxLine) GetThickness() gdnative.Int {
	log.Println("Calling StyleBoxLine.GetThickness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_thickness", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StyleBoxLine) IsVertical() gdnative.Bool {
	log.Println("Calling StyleBoxLine.IsVertical()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_vertical", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *StyleBoxLine) SetColor(color *Color) {
	log.Println("Calling StyleBoxLine.SetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *StyleBoxLine) SetGrow(grow gdnative.Float) {
	log.Println("Calling StyleBoxLine.SetGrow()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(grow)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_grow", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *StyleBoxLine) SetThickness(thickness gdnative.Int) {
	log.Println("Calling StyleBoxLine.SetThickness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(thickness)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_thickness", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *StyleBoxLine) SetVertical(vertical gdnative.Bool) {
	log.Println("Calling StyleBoxLine.SetVertical()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(vertical)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_vertical", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   StyleBoxLineImplementer is an interface for StyleBoxLine objects.
*/
type StyleBoxLineImplementer interface {
	Class
}
