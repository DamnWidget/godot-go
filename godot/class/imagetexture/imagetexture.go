package imagetexture

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A [Texture] based on an [Image]. Can be created from an [Image] with [method create_from_image].
*/
type ImageTexture struct {
	Texture
}

func (o *ImageTexture) BaseClass() string {
	return "ImageTexture"
}

/*
   Undocumented
*/
func (o *ImageTexture) X_ReloadHook(rid *RID) {
	log.Println("Calling ImageTexture.X_ReloadHook()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rid)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_reload_hook", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create a new [code]ImageTexture[/code] with "width" and "height". "format" one of [Image].FORMAT_*. "flags" one or more of [Texture].FLAG_*.
*/
func (o *ImageTexture) Create(width gdnative.Int, height gdnative.Int, format gdnative.Int, flags gdnative.Int) {
	log.Println("Calling ImageTexture.Create()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(width)
	goArguments[1] = reflect.ValueOf(height)
	goArguments[2] = reflect.ValueOf(format)
	goArguments[3] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "create", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Create a new [code]ImageTexture[/code] from an [Image] with "flags" from [Texture].FLAG_*.
*/
func (o *ImageTexture) CreateFromImage(image *Image, flags gdnative.Int) {
	log.Println("Calling ImageTexture.CreateFromImage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(image)
	goArguments[1] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "create_from_image", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the format of the [code]ImageTexture[/code], one of [Image].FORMAT_*.
*/
func (o *ImageTexture) GetFormat() gdnative.Int {
	log.Println("Calling ImageTexture.GetFormat()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_format", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ImageTexture) GetLossyStorageQuality() gdnative.Float {
	log.Println("Calling ImageTexture.GetLossyStorageQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_lossy_storage_quality", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ImageTexture) GetStorage() gdnative.Int {
	log.Println("Calling ImageTexture.GetStorage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_storage", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Load an [code]ImageTexture[/code].
*/
func (o *ImageTexture) Load(path gdnative.String) {
	log.Println("Calling ImageTexture.Load()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "load", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the [Image] of this [code]ImageTexture[/code].
*/
func (o *ImageTexture) SetData(image *Image) {
	log.Println("Calling ImageTexture.SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(image)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ImageTexture) SetLossyStorageQuality(quality gdnative.Float) {
	log.Println("Calling ImageTexture.SetLossyStorageQuality()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(quality)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_lossy_storage_quality", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Resizes the [code]ImageTexture[/code] to the specified dimensions.
*/
func (o *ImageTexture) SetSizeOverride(size *Vector2) {
	log.Println("Calling ImageTexture.SetSizeOverride()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_size_override", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ImageTexture) SetStorage(mode gdnative.Int) {
	log.Println("Calling ImageTexture.SetStorage()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_storage", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ImageTextureImplementer is an interface for ImageTexture objects.
*/
type ImageTextureImplementer interface {
	Class
}
