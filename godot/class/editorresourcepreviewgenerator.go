package class

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewEditorResourcePreviewGeneratorFromPointer(ptr gdnative.Pointer) EditorResourcePreviewGenerator {
func NewEditorResourcePreviewGeneratorFromPointer(ptr gdnative.Pointer) EditorResourcePreviewGenerator {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorResourcePreviewGenerator{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Custom code to generate previews. Please check "file_dialog/thumbnail_size" in EditorSettings to find out the right size to do previews at.
*/
type EditorResourcePreviewGenerator struct {
	Reference
	owner gdnative.Object
}

func (o *EditorResourcePreviewGenerator) BaseClass() string {
	return "EditorResourcePreviewGenerator"
}

// SetBaseObject will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *EditorResourcePreviewGenerator) SetBaseObject(object gdnative.Object) {
	o.owner = object
}

func (o *EditorResourcePreviewGenerator) GetBaseObject() gdnative.Object {
	return o.owner
}

/*
        Generate a preview from a given resource. This must be always implemented. Returning an empty texture is an OK way to fail and let another generator take care. Care must be taken because this function is always called from a thread (not the main thread).
	Args: [{ false from Resource}], Returns: Texture
*/
func (o *EditorResourcePreviewGenerator) Generate(from Resource) Texture {
	log.Println("Calling EditorResourcePreviewGenerator.Generate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(from.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourcePreviewGenerator", "generate")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewTextureFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Generate a preview directly from a path, implementing this is optional, as default code will load and call generate() Returning an empty texture is an OK way to fail and let another generator take care. Care must be taken because this function is always called from a thread (not the main thread).
	Args: [{ false path String}], Returns: Texture
*/
func (o *EditorResourcePreviewGenerator) GenerateFromPath(path gdnative.String) Texture {
	log.Println("Calling EditorResourcePreviewGenerator.GenerateFromPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourcePreviewGenerator", "generate_from_path")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewTextureFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Return if your generator supports this resource type.
	Args: [{ false type String}], Returns: bool
*/
func (o *EditorResourcePreviewGenerator) Handles(aType gdnative.String) gdnative.Bool {
	log.Println("Calling EditorResourcePreviewGenerator.Handles()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourcePreviewGenerator", "handles")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}
