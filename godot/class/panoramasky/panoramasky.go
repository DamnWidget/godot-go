package panoramasky

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type PanoramaSky struct {
	Sky
}

func (o *PanoramaSky) BaseClass() string {
	return "PanoramaSky"
}

/*
   Undocumented
*/
func (o *PanoramaSky) GetPanorama() *Texture {
	log.Println("Calling PanoramaSky.GetPanorama()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_panorama", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *PanoramaSky) SetPanorama(texture *Texture) {
	log.Println("Calling PanoramaSky.SetPanorama()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_panorama", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PanoramaSkyImplementer is an interface for PanoramaSky objects.
*/
type PanoramaSkyImplementer interface {
	Class
}
