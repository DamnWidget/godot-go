package spinbox

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
SpinBox is a numerical input text field. It allows entering integers and floats.
*/
type SpinBox struct {
	Range
}

func (o *SpinBox) BaseClass() string {
	return "SpinBox"
}

/*
   Undocumented
*/
func (o *SpinBox) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling SpinBox.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) X_LineEditFocusExit() {
	log.Println("Calling SpinBox.X_LineEditFocusExit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_line_edit_focus_exit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) X_LineEditInput(arg0 *InputEvent) {
	log.Println("Calling SpinBox.X_LineEditInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_line_edit_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) X_RangeClickTimeout() {
	log.Println("Calling SpinBox.X_RangeClickTimeout()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_range_click_timeout", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) X_TextEntered(arg0 gdnative.String) {
	log.Println("Calling SpinBox.X_TextEntered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_text_entered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *SpinBox) GetLineEdit() *LineEdit {
	log.Println("Calling SpinBox.GetLineEdit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_line_edit", goArguments, "*LineEdit")

	returnValue := goRet.Interface().(*LineEdit)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SpinBox) GetPrefix() gdnative.String {
	log.Println("Calling SpinBox.GetPrefix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_prefix", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SpinBox) GetSuffix() gdnative.String {
	log.Println("Calling SpinBox.GetSuffix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_suffix", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SpinBox) IsEditable() gdnative.Bool {
	log.Println("Calling SpinBox.IsEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_editable", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SpinBox) SetEditable(editable gdnative.Bool) {
	log.Println("Calling SpinBox.SetEditable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(editable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_editable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) SetPrefix(prefix gdnative.String) {
	log.Println("Calling SpinBox.SetPrefix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(prefix)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_prefix", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SpinBox) SetSuffix(suffix gdnative.String) {
	log.Println("Calling SpinBox.SetSuffix()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(suffix)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_suffix", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SpinBoxImplementer is an interface for SpinBox objects.
*/
type SpinBoxImplementer interface {
	Class
}
