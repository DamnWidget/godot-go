package dampedspringjoint2d

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.
*/
type DampedSpringJoint2D struct {
	Joint2D
}

func (o *DampedSpringJoint2D) BaseClass() string {
	return "DampedSpringJoint2D"
}

/*
   Undocumented
*/
func (o *DampedSpringJoint2D) GetDamping() gdnative.Float {
	log.Println("Calling DampedSpringJoint2D.GetDamping()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_damping", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *DampedSpringJoint2D) GetLength() gdnative.Float {
	log.Println("Calling DampedSpringJoint2D.GetLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_length", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *DampedSpringJoint2D) GetRestLength() gdnative.Float {
	log.Println("Calling DampedSpringJoint2D.GetRestLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_rest_length", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *DampedSpringJoint2D) GetStiffness() gdnative.Float {
	log.Println("Calling DampedSpringJoint2D.GetStiffness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_stiffness", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *DampedSpringJoint2D) SetDamping(damping gdnative.Float) {
	log.Println("Calling DampedSpringJoint2D.SetDamping()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(damping)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_damping", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *DampedSpringJoint2D) SetLength(length gdnative.Float) {
	log.Println("Calling DampedSpringJoint2D.SetLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(length)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *DampedSpringJoint2D) SetRestLength(restLength gdnative.Float) {
	log.Println("Calling DampedSpringJoint2D.SetRestLength()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(restLength)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_rest_length", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *DampedSpringJoint2D) SetStiffness(stiffness gdnative.Float) {
	log.Println("Calling DampedSpringJoint2D.SetStiffness()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(stiffness)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_stiffness", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   DampedSpringJoint2DImplementer is an interface for DampedSpringJoint2D objects.
*/
type DampedSpringJoint2DImplementer interface {
	Class
}
