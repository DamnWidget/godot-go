package class

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewMeshLibraryFromPointer(ptr gdnative.Pointer) MeshLibrary {
func NewMeshLibraryFromPointer(ptr gdnative.Pointer) MeshLibrary {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := MeshLibrary{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Library of meshes. Contains a list of [Mesh] resources, each with name and ID. Useful for GridMap or painting Terrain.
*/
type MeshLibrary struct {
	Resource
	owner gdnative.Object
}

func (o *MeshLibrary) BaseClass() string {
	return "MeshLibrary"
}

// SetBaseObject will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *MeshLibrary) SetBaseObject(object gdnative.Object) {
	o.owner = object
}

func (o *MeshLibrary) GetBaseObject() gdnative.Object {
	return o.owner
}

/*
        Clear the library.
	Args: [], Returns: void
*/
func (o *MeshLibrary) Clear() {
	log.Println("Calling MeshLibrary.Clear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Create a new item in the library, supplied an id.
	Args: [{ false id int}], Returns: void
*/
func (o *MeshLibrary) CreateItem(id gdnative.Int) {
	log.Println("Calling MeshLibrary.CreateItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "create_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false name String}], Returns: int
*/
func (o *MeshLibrary) FindItemByName(name gdnative.String) gdnative.Int {
	log.Println("Calling MeshLibrary.FindItemByName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "find_item_by_name")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Return the list of items.
	Args: [], Returns: PoolIntArray
*/
func (o *MeshLibrary) GetItemList() gdnative.PoolIntArray {
	log.Println("Calling MeshLibrary.GetItemList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_list")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Return the mesh of the item.
	Args: [{ false id int}], Returns: Mesh
*/
func (o *MeshLibrary) GetItemMesh(id gdnative.Int) Mesh {
	log.Println("Calling MeshLibrary.GetItemMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_mesh")

	// Call the parent method.
	// Mesh
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewMeshFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Return the name of the item.
	Args: [{ false id int}], Returns: String
*/
func (o *MeshLibrary) GetItemName(id gdnative.Int) gdnative.String {
	log.Println("Calling MeshLibrary.GetItemName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [{ false id int}], Returns: NavigationMesh
*/
func (o *MeshLibrary) GetItemNavmesh(id gdnative.Int) NavigationMesh {
	log.Println("Calling MeshLibrary.GetItemNavmesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_navmesh")

	// Call the parent method.
	// NavigationMesh
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewNavigationMeshFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [{ false id int}], Returns: Texture
*/
func (o *MeshLibrary) GetItemPreview(id gdnative.Int) Texture {
	log.Println("Calling MeshLibrary.GetItemPreview()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_preview")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewTextureFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [{ false id int}], Returns: Array
*/
func (o *MeshLibrary) GetItemShapes(id gdnative.Int) gdnative.Array {
	log.Println("Calling MeshLibrary.GetItemShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_shapes")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Get an unused id for a new item.
	Args: [], Returns: int
*/
func (o *MeshLibrary) GetLastUnusedItemId() gdnative.Int {
	log.Println("Calling MeshLibrary.GetLastUnusedItemId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_last_unused_item_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Remove the item.
	Args: [{ false id int}], Returns: void
*/
func (o *MeshLibrary) RemoveItem(id gdnative.Int) {
	log.Println("Calling MeshLibrary.RemoveItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "remove_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Set the mesh of the item.
	Args: [{ false id int} { false mesh Mesh}], Returns: void
*/
func (o *MeshLibrary) SetItemMesh(id gdnative.Int, mesh Mesh) {
	log.Println("Calling MeshLibrary.SetItemMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromObject(mesh.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_mesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Set the name of the item.
	Args: [{ false id int} { false name String}], Returns: void
*/
func (o *MeshLibrary) SetItemName(id gdnative.Int, name gdnative.String) {
	log.Println("Calling MeshLibrary.SetItemName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_name")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false id int} { false navmesh NavigationMesh}], Returns: void
*/
func (o *MeshLibrary) SetItemNavmesh(id gdnative.Int, navmesh NavigationMesh) {
	log.Println("Calling MeshLibrary.SetItemNavmesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromObject(navmesh.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_navmesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false id int} { false texture Texture}], Returns: void
*/
func (o *MeshLibrary) SetItemPreview(id gdnative.Int, texture Texture) {
	log.Println("Calling MeshLibrary.SetItemPreview()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromObject(texture.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_preview")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false id int} { false shapes Array}], Returns: void
*/
func (o *MeshLibrary) SetItemShapes(id gdnative.Int, shapes gdnative.Array) {
	log.Println("Calling MeshLibrary.SetItemShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromArray(shapes)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_shapes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}
