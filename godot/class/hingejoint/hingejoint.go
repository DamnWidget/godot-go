package hingejoint

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Normally uses the z-axis of body A as the hinge axis, another axis can be specified when adding it manually though.
*/
type HingeJoint struct {
	Joint
}

func (o *HingeJoint) BaseClass() string {
	return "HingeJoint"
}

/*
   Undocumented
*/
func (o *HingeJoint) X_GetLowerLimit() gdnative.Float {
	log.Println("Calling HingeJoint.X_GetLowerLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_lower_limit", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *HingeJoint) X_GetUpperLimit() gdnative.Float {
	log.Println("Calling HingeJoint.X_GetUpperLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_upper_limit", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *HingeJoint) X_SetLowerLimit(lowerLimit gdnative.Float) {
	log.Println("Calling HingeJoint.X_SetLowerLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(lowerLimit)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_lower_limit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *HingeJoint) X_SetUpperLimit(upperLimit gdnative.Float) {
	log.Println("Calling HingeJoint.X_SetUpperLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(upperLimit)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_upper_limit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *HingeJoint) GetFlag(flag gdnative.Int) gdnative.Bool {
	log.Println("Calling HingeJoint.GetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_flag", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *HingeJoint) GetParam(param gdnative.Int) gdnative.Float {
	log.Println("Calling HingeJoint.GetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *HingeJoint) SetFlag(flag gdnative.Int, enabled gdnative.Bool) {
	log.Println("Calling HingeJoint.SetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(flag)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_flag", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *HingeJoint) SetParam(param gdnative.Int, value gdnative.Float) {
	log.Println("Calling HingeJoint.SetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(param)
	goArguments[1] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   HingeJointImplementer is an interface for HingeJoint objects.
*/
type HingeJointImplementer interface {
	Class
}
