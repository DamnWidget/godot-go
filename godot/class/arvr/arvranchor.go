package arvr

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
The ARVR Anchor point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them. This node is mapped to one of the anchors through its unique id. When you receive a signal that a new anchor is available you should add this node to your scene for that anchor. You can predefine nodes and set the id and the nodes will simply remain on 0,0,0 until a plane is recognised. Keep in mind that as long as plane detection is enable the size, placing and orientation of an anchor will be updates as the detection logic learns more about the real world out there especially if only part of the surface is in view.
*/
type ARVRAnchor struct {
	Spatial
}

func (o *ARVRAnchor) BaseClass() string {
	return "ARVRAnchor"
}

/*
   Undocumented
*/
func (o *ARVRAnchor) GetAnchorId() gdnative.Int {
	log.Println("Calling ARVRAnchor.GetAnchorId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_anchor_id", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the name given to this anchor.
*/
func (o *ARVRAnchor) GetAnchorName() gdnative.String {
	log.Println("Calling ARVRAnchor.GetAnchorName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_anchor_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns true if the anchor is being tracked and false if no anchor with this id is currently known.
*/
func (o *ARVRAnchor) GetIsActive() gdnative.Bool {
	log.Println("Calling ARVRAnchor.GetIsActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_is_active", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a plane aligned with our anchor, handy for intersection testing
*/
func (o *ARVRAnchor) GetPlane() *Plane {
	log.Println("Calling ARVRAnchor.GetPlane()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_plane", goArguments, "*Plane")

	returnValue := goRet.Interface().(*Plane)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table.
*/
func (o *ARVRAnchor) GetSize() *Vector3 {
	log.Println("Calling ARVRAnchor.GetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_size", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ARVRAnchor) SetAnchorId(anchorId gdnative.Int) {
	log.Println("Calling ARVRAnchor.SetAnchorId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(anchorId)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_anchor_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ARVRAnchorImplementer is an interface for ARVRAnchor objects.
*/
type ARVRAnchorImplementer interface {
	Class
}
