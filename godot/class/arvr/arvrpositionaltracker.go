package arvr

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
An instance of this object represents a device that is tracked such as a controller or anchor point. HMDs aren't represented here as they are fully handled internally. As controllers are turned on and the AR/VR interface detects them instances of this object are automatically added to this list of active tracking objects accessible through the ARVRServer The ARVRController and ARVRAnchor both consume objects of this type and should be the objects you use in game. The positional trackers are just the under the hood objects that make this all work and are mostly exposed so GDNative based interfaces can interact with them.
*/
type ARVRPositionalTracker struct {
	Object
}

func (o *ARVRPositionalTracker) BaseClass() string {
	return "ARVRPositionalTracker"
}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetJoyId(joyId gdnative.Int) {
	log.Println("Calling ARVRPositionalTracker.X_SetJoyId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(joyId)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_joy_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetName(name gdnative.String) {
	log.Println("Calling ARVRPositionalTracker.X_SetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_name", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetOrientation(orientation *Basis) {
	log.Println("Calling ARVRPositionalTracker.X_SetOrientation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(orientation)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_orientation", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetRwPosition(rwPosition *Vector3) {
	log.Println("Calling ARVRPositionalTracker.X_SetRwPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rwPosition)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_rw_position", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) X_SetType(aType gdnative.Int) {
	log.Println("Calling ARVRPositionalTracker.X_SetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the hand holding this tracker, if known. See TRACKER_* constants.
*/
func (o *ARVRPositionalTracker) GetHand() gdnative.Int {
	log.Println("Calling ARVRPositionalTracker.GetHand()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_hand", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If this is a controller that is being tracked the controller will also be represented by a joystick entry with this id.
*/
func (o *ARVRPositionalTracker) GetJoyId() gdnative.Int {
	log.Println("Calling ARVRPositionalTracker.GetJoyId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_joy_id", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the controller or anchor point's name if available.
*/
func (o *ARVRPositionalTracker) GetName() gdnative.String {
	log.Println("Calling ARVRPositionalTracker.GetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the controller's orientation matrix.
*/
func (o *ARVRPositionalTracker) GetOrientation() *Basis {
	log.Println("Calling ARVRPositionalTracker.GetOrientation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_orientation", goArguments, "*Basis")

	returnValue := goRet.Interface().(*Basis)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the world-space controller position.
*/
func (o *ARVRPositionalTracker) GetPosition() *Vector3 {
	log.Println("Calling ARVRPositionalTracker.GetPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_position", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) GetRumble() gdnative.Float {
	log.Println("Calling ARVRPositionalTracker.GetRumble()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_rumble", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if this device tracks orientation.
*/
func (o *ARVRPositionalTracker) GetTracksOrientation() gdnative.Bool {
	log.Println("Calling ARVRPositionalTracker.GetTracksOrientation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tracks_orientation", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if this device tracks position.
*/
func (o *ARVRPositionalTracker) GetTracksPosition() gdnative.Bool {
	log.Println("Calling ARVRPositionalTracker.GetTracksPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_tracks_position", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the transform combining this device's orientation and position.
*/
func (o *ARVRPositionalTracker) GetTransform(adjustByReferenceFrame gdnative.Bool) *Transform {
	log.Println("Calling ARVRPositionalTracker.GetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(adjustByReferenceFrame)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the tracker's type.
*/
func (o *ARVRPositionalTracker) GetType() gdnative.Int {
	log.Println("Calling ARVRPositionalTracker.GetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ARVRPositionalTracker) SetRumble(rumble gdnative.Float) {
	log.Println("Calling ARVRPositionalTracker.SetRumble()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rumble)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_rumble", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ARVRPositionalTrackerImplementer is an interface for ARVRPositionalTracker objects.
*/
type ARVRPositionalTrackerImplementer interface {
	Class
}
