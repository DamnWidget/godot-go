package colorpicker

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
This is a simple color picker [Control]. It's useful for selecting a color from an RGB/RGBA colorspace.
*/
type ColorPicker struct {
	BoxContainer
}

func (o *ColorPicker) BaseClass() string {
	return "ColorPicker"
}

/*
   Undocumented
*/
func (o *ColorPicker) X_AddPresetPressed() {
	log.Println("Calling ColorPicker.X_AddPresetPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_add_preset_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_HsvDraw(arg0 gdnative.Int, arg1 *Object) {
	log.Println("Calling ColorPicker.X_HsvDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(arg0)
	goArguments[1] = reflect.ValueOf(arg1)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_hsv_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_HtmlEntered(arg0 gdnative.String) {
	log.Println("Calling ColorPicker.X_HtmlEntered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_html_entered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_PresetInput(arg0 *InputEvent) {
	log.Println("Calling ColorPicker.X_PresetInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_preset_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_SampleDraw() {
	log.Println("Calling ColorPicker.X_SampleDraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_sample_draw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_ScreenInput(arg0 *InputEvent) {
	log.Println("Calling ColorPicker.X_ScreenInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_screen_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_ScreenPickPressed() {
	log.Println("Calling ColorPicker.X_ScreenPickPressed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_screen_pick_pressed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_TextTypeToggled() {
	log.Println("Calling ColorPicker.X_TextTypeToggled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_text_type_toggled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_UpdatePresets() {
	log.Println("Calling ColorPicker.X_UpdatePresets()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_update_presets", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_UvInput(arg0 *InputEvent) {
	log.Println("Calling ColorPicker.X_UvInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_uv_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_ValueChanged(arg0 gdnative.Float) {
	log.Println("Calling ColorPicker.X_ValueChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_value_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) X_WInput(arg0 *InputEvent) {
	log.Println("Calling ColorPicker.X_WInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_w_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds the current selected to color to a list of colors (presets), the presets will be displayed in the color picker and the user will be able to select them, notice that the presets list is only for this color picker.
*/
func (o *ColorPicker) AddPreset(color *Color) {
	log.Println("Calling ColorPicker.AddPreset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_preset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) GetPickColor() *Color {
	log.Println("Calling ColorPicker.GetPickColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_pick_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ColorPicker) IsEditingAlpha() gdnative.Bool {
	log.Println("Calling ColorPicker.IsEditingAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_editing_alpha", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ColorPicker) IsRawMode() gdnative.Bool {
	log.Println("Calling ColorPicker.IsRawMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_raw_mode", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *ColorPicker) SetEditAlpha(show gdnative.Bool) {
	log.Println("Calling ColorPicker.SetEditAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(show)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_edit_alpha", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) SetPickColor(color *Color) {
	log.Println("Calling ColorPicker.SetPickColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_pick_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *ColorPicker) SetRawMode(mode gdnative.Bool) {
	log.Println("Calling ColorPicker.SetRawMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_raw_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ColorPickerImplementer is an interface for ColorPicker objects.
*/
type ColorPickerImplementer interface {
	Class
}
