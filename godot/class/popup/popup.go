package popup

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Popup is a base [Control] used to show dialogs and popups. It's a subwindow and modal by default (see [Control]) and has helpers for custom popup behavior.
*/
type Popup struct {
	Control
}

func (o *Popup) BaseClass() string {
	return "Popup"
}

/*
   Undocumented
*/
func (o *Popup) IsExclusive() gdnative.Bool {
	log.Println("Calling Popup.IsExclusive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_exclusive", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Popup (show the control in modal form).
*/
func (o *Popup) Popup(bounds *Rect2) {
	log.Println("Calling Popup.Popup()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(bounds)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "popup", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Popup (show the control in modal form) in the center of the screen, at the current size, or at a size determined by "size".
*/
func (o *Popup) PopupCentered(size *Vector2) {
	log.Println("Calling Popup.PopupCentered()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "popup_centered", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Popup (show the control in modal form) in the center of the screen, ensuring the size is never smaller than [code]minsize[/code].
*/
func (o *Popup) PopupCenteredMinsize(minsize *Vector2) {
	log.Println("Calling Popup.PopupCenteredMinsize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(minsize)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "popup_centered_minsize", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Popup (show the control in modal form) in the center of the screen, scaled at a ratio of size of the screen.
*/
func (o *Popup) PopupCenteredRatio(ratio gdnative.Float) {
	log.Println("Calling Popup.PopupCenteredRatio()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ratio)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "popup_centered_ratio", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Popup) SetExclusive(enable gdnative.Bool) {
	log.Println("Calling Popup.SetExclusive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_exclusive", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   PopupImplementer is an interface for Popup objects.
*/
type PopupImplementer interface {
	Class
}
