package editor

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"

	"github.com/shadowapex/godot-go/godot/class/reference"
	"github.com/shadowapex/godot-go/godot/class/resource"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewEditorResourceConversionPluginFromPointer(ptr gdnative.Pointer) *EditorResourceConversionPlugin {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorResourceConversionPlugin{}
	obj.SetOwner(owner)

	return &obj

}

/*

 */
type EditorResourceConversionPlugin struct {
	reference.Reference
}

func (o *EditorResourceConversionPlugin) BaseClass() string {
	return "EditorResourceConversionPlugin"
}

/*

	Args: [{ false resource Resource}], Returns: Resource
*/

func (o *EditorResourceConversionPlugin) X_Convert(resource resource.Resource) resource.Resource {
	log.Println("Calling EditorResourceConversionPlugin.X_Convert()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(resource.GetOwner())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourceConversionPlugin", "_convert")

	// Call the parent method.
	// Resource
	retPtr := resource.NewEmptyResource()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := resource.NewResourceFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*

	Args: [], Returns: String
*/

func (o *EditorResourceConversionPlugin) X_ConvertsTo() gdnative.String {
	log.Println("Calling EditorResourceConversionPlugin.X_ConvertsTo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourceConversionPlugin", "_converts_to")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}
