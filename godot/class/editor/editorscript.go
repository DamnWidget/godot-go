package editor

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Scripts extending this class and implementing its [code]_run()[/code] method can be executed from the Script Editor's [code]File -> Run[/code] menu option (or by pressing [code]CTRL+Shift+X[/code]) while the editor is running. This is useful for adding custom in-editor functionality to Godot. For more complex additions, consider using [EditorPlugin]s instead. Note that extending scripts need to have [code]tool mode[/code] enabled. Example script: [codeblock] tool extends EditorScript func _run(): print("Hello from the Godot Editor!") [/codeblock] Note that the script is run in the Editor context, which means the output is visible in the console window started with the Editor (STDOUT) instead of the usual Godot [i]Output[/i] dock.
*/
type EditorScript struct {
	Reference
}

func (o *EditorScript) BaseClass() string {
	return "EditorScript"
}

/*
   This method is executed by the Editor when [code]File -> Run[/code] is used.
*/
func (o *EditorScript) X_Run() {
	log.Println("Calling EditorScript.X_Run()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_run", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds [code]node[/code] as a child of the root node in the editor context. WARNING: The implementation of this method is currently disabled.
*/
func (o *EditorScript) AddRootNode(node *Object) {
	log.Println("Calling EditorScript.AddRootNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_root_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the [EditorInterface] singleton instance.
*/
func (o *EditorScript) GetEditorInterface() *EditorInterface {
	log.Println("Calling EditorScript.GetEditorInterface()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_editor_interface", goArguments, "*EditorInterface")

	returnValue := goRet.Interface().(*EditorInterface)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the Editor's currently active scene.
*/
func (o *EditorScript) GetScene() *Node {
	log.Println("Calling EditorScript.GetScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_scene", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   EditorScriptImplementer is an interface for EditorScript objects.
*/
type EditorScriptImplementer interface {
	Class
}
