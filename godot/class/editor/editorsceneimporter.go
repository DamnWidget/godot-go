package editor

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type EditorSceneImporter struct {
	Reference
}

func (o *EditorSceneImporter) BaseClass() string {
	return "EditorSceneImporter"
}

/*

 */
func (o *EditorSceneImporter) X_GetExtensions() *Array {
	log.Println("Calling EditorSceneImporter.X_GetExtensions()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_extensions", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorSceneImporter) X_GetImportFlags() gdnative.Int {
	log.Println("Calling EditorSceneImporter.X_GetImportFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_import_flags", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorSceneImporter) X_ImportAnimation(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) *Animation {
	log.Println("Calling EditorSceneImporter.X_ImportAnimation()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(flags)
	goArguments[2] = reflect.ValueOf(bakeFps)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_import_animation", goArguments, "*Animation")

	returnValue := goRet.Interface().(*Animation)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorSceneImporter) X_ImportScene(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) *Node {
	log.Println("Calling EditorSceneImporter.X_ImportScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(flags)
	goArguments[2] = reflect.ValueOf(bakeFps)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_import_scene", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorSceneImporter) ImportAnimationFromOtherImporter(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) *Animation {
	log.Println("Calling EditorSceneImporter.ImportAnimationFromOtherImporter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(flags)
	goArguments[2] = reflect.ValueOf(bakeFps)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "import_animation_from_other_importer", goArguments, "*Animation")

	returnValue := goRet.Interface().(*Animation)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorSceneImporter) ImportSceneFromOtherImporter(path gdnative.String, flags gdnative.Int, bakeFps gdnative.Int) *Node {
	log.Println("Calling EditorSceneImporter.ImportSceneFromOtherImporter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(flags)
	goArguments[2] = reflect.ValueOf(bakeFps)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "import_scene_from_other_importer", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   EditorSceneImporterImplementer is an interface for EditorSceneImporter objects.
*/
type EditorSceneImporterImplementer interface {
	Class
}
