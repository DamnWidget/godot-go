package editor

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Editor interface. Allows saving and (re-)loading scenes, rendering mesh previews, inspecting and editing resources and objects and provides access to [EditorSettings], [EditorFileSystem], [EditorResourcePreview]\ er, [ScriptEditor], the editor viewport, as well as information about scenes. Also see [EditorPlugin] and [EditorScript].
*/
type EditorInterface struct {
	Node
}

func (o *EditorInterface) BaseClass() string {
	return "EditorInterface"
}

/*
   Edits the given [Resource].
*/
func (o *EditorInterface) EditResource(resource *Resource) {
	log.Println("Calling EditorInterface.EditResource()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(resource)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "edit_resource", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the base [Control].
*/
func (o *EditorInterface) GetBaseControl() *Control {
	log.Println("Calling EditorInterface.GetBaseControl()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_base_control", goArguments, "*Control")

	returnValue := goRet.Interface().(*Control)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the edited scene's root [Node].
*/
func (o *EditorInterface) GetEditedSceneRoot() *Node {
	log.Println("Calling EditorInterface.GetEditedSceneRoot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_edited_scene_root", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [EditorSettings].
*/
func (o *EditorInterface) GetEditorSettings() *EditorSettings {
	log.Println("Calling EditorInterface.GetEditorSettings()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_editor_settings", goArguments, "*EditorSettings")

	returnValue := goRet.Interface().(*EditorSettings)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the editor [Viewport].
*/
func (o *EditorInterface) GetEditorViewport() *Control {
	log.Println("Calling EditorInterface.GetEditorViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_editor_viewport", goArguments, "*Control")

	returnValue := goRet.Interface().(*Control)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns an [Array] of the currently opened scenes.
*/
func (o *EditorInterface) GetOpenScenes() *Array {
	log.Println("Calling EditorInterface.GetOpenScenes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_open_scenes", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [EditorFileSystem].
*/
func (o *EditorInterface) GetResourceFilesystem() *EditorFileSystem {
	log.Println("Calling EditorInterface.GetResourceFilesystem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_resource_filesystem", goArguments, "*EditorFileSystem")

	returnValue := goRet.Interface().(*EditorFileSystem)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [EditorResourcePreview]\ er.
*/
func (o *EditorInterface) GetResourcePreviewer() *EditorResourcePreview {
	log.Println("Calling EditorInterface.GetResourcePreviewer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_resource_previewer", goArguments, "*EditorResourcePreview")

	returnValue := goRet.Interface().(*EditorResourcePreview)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [ScriptEditor].
*/
func (o *EditorInterface) GetScriptEditor() *ScriptEditor {
	log.Println("Calling EditorInterface.GetScriptEditor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_script_editor", goArguments, "*ScriptEditor")

	returnValue := goRet.Interface().(*ScriptEditor)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorInterface) GetSelectedPath() gdnative.String {
	log.Println("Calling EditorInterface.GetSelectedPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_selected_path", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [EditorSelection].
*/
func (o *EditorInterface) GetSelection() *EditorSelection {
	log.Println("Calling EditorInterface.GetSelection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_selection", goArguments, "*EditorSelection")

	returnValue := goRet.Interface().(*EditorSelection)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Shows the given property on the given [code]object[/code] in the Editor's Inspector dock.
*/
func (o *EditorInterface) InspectObject(object *Object, forProperty gdnative.String) {
	log.Println("Calling EditorInterface.InspectObject()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(object)
	goArguments[1] = reflect.ValueOf(forProperty)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "inspect_object", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the enabled status of a plugin. The plugin name is the same as its directory name.
*/
func (o *EditorInterface) IsPluginEnabled(plugin gdnative.String) gdnative.Bool {
	log.Println("Calling EditorInterface.IsPluginEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(plugin)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_plugin_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns mesh previews rendered at the given size as an [Array] of [Texture]s.
*/
func (o *EditorInterface) MakeMeshPreviews(meshes *Array, previewSize gdnative.Int) *Array {
	log.Println("Calling EditorInterface.MakeMeshPreviews()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(meshes)
	goArguments[1] = reflect.ValueOf(previewSize)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "make_mesh_previews", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Opens the scene at the given path.
*/
func (o *EditorInterface) OpenSceneFromPath(sceneFilepath gdnative.String) {
	log.Println("Calling EditorInterface.OpenSceneFromPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sceneFilepath)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "open_scene_from_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Reloads the scene at the given path.
*/
func (o *EditorInterface) ReloadSceneFromPath(sceneFilepath gdnative.String) {
	log.Println("Calling EditorInterface.ReloadSceneFromPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sceneFilepath)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reload_scene_from_path", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Saves the scene. Returns either OK or ERR_CANT_CREATE. See [@GlobalScope] constants.
*/
func (o *EditorInterface) SaveScene() gdnative.Int {
	log.Println("Calling EditorInterface.SaveScene()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "save_scene", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Saves the scene as a file at [code]path[/code].
*/
func (o *EditorInterface) SaveSceneAs(path gdnative.String, withPreview gdnative.Bool) {
	log.Println("Calling EditorInterface.SaveSceneAs()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(withPreview)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "save_scene_as", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorInterface) SelectFile(pFile gdnative.String) {
	log.Println("Calling EditorInterface.SelectFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(pFile)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "select_file", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the enabled status of a plugin. The plugin name is the same as its directory name.
*/
func (o *EditorInterface) SetPluginEnabled(plugin gdnative.String, enabled gdnative.Bool) {
	log.Println("Calling EditorInterface.SetPluginEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(plugin)
	goArguments[1] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_plugin_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   EditorInterfaceImplementer is an interface for EditorInterface objects.
*/
type EditorInterfaceImplementer interface {
	Class
}
