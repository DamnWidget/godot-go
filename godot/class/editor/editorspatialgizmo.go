package editor

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Custom gizmo that is used for providing custom visualization and editing (handles) for 3D Spatial objects. These are created by [method EditorPlugin.create_spatial_gizmo].
*/
type EditorSpatialGizmo struct {
	SpatialGizmo
}

func (o *EditorSpatialGizmo) BaseClass() string {
	return "EditorSpatialGizmo"
}

/*

 */
func (o *EditorSpatialGizmo) AddCollisionSegments(segments *PoolVector3Array) {
	log.Println("Calling EditorSpatialGizmo.AddCollisionSegments()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(segments)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_collision_segments", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add collision triangles to the gizmo for picking. A [TriangleMesh] can be generated from a regular [Mesh] too. Call this function during [method redraw].
*/
func (o *EditorSpatialGizmo) AddCollisionTriangles(triangles *TriangleMesh, bounds *AABB) {
	log.Println("Calling EditorSpatialGizmo.AddCollisionTriangles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(triangles)
	goArguments[1] = reflect.ValueOf(bounds)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_collision_triangles", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a list of handles (points) which can be used to deform the object being edited. There are virtual functions which will be called upon editing of these handles. Call this function during [method redraw].
*/
func (o *EditorSpatialGizmo) AddHandles(handles *PoolVector3Array, billboard gdnative.Bool, secondary gdnative.Bool) {
	log.Println("Calling EditorSpatialGizmo.AddHandles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(handles)
	goArguments[1] = reflect.ValueOf(billboard)
	goArguments[2] = reflect.ValueOf(secondary)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_handles", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this function during [method redraw].
*/
func (o *EditorSpatialGizmo) AddLines(lines *PoolVector3Array, material *Material, billboard gdnative.Bool) {
	log.Println("Calling EditorSpatialGizmo.AddLines()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(lines)
	goArguments[1] = reflect.ValueOf(material)
	goArguments[2] = reflect.ValueOf(billboard)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_lines", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorSpatialGizmo) AddMesh(mesh *ArrayMesh, billboard gdnative.Bool, skeleton *RID) {
	log.Println("Calling EditorSpatialGizmo.AddMesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(mesh)
	goArguments[1] = reflect.ValueOf(billboard)
	goArguments[2] = reflect.ValueOf(skeleton)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_mesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add an unscaled billboard for visualization. Call this function during [method redraw].
*/
func (o *EditorSpatialGizmo) AddUnscaledBillboard(material *Material, defaultScale gdnative.Float) {
	log.Println("Calling EditorSpatialGizmo.AddUnscaledBillboard()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(material)
	goArguments[1] = reflect.ValueOf(defaultScale)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_unscaled_billboard", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorSpatialGizmo) Clear() {
	log.Println("Calling EditorSpatialGizmo.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Commit a handle being edited (handles must have been previously added by [method add_handles]). If the cancel parameter is true, an option to restore the edited value to the original is provided.
*/
func (o *EditorSpatialGizmo) CommitHandle(index gdnative.Int, restore *Variant, cancel gdnative.Bool) {
	log.Println("Calling EditorSpatialGizmo.CommitHandle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(index)
	goArguments[1] = reflect.ValueOf(restore)
	goArguments[2] = reflect.ValueOf(cancel)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "commit_handle", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Get the name of an edited handle (handles must have been previously added by [method add_handles]). Handles can be named for reference to the user when editing.
*/
func (o *EditorSpatialGizmo) GetHandleName(index gdnative.Int) gdnative.String {
	log.Println("Calling EditorSpatialGizmo.GetHandleName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_handle_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get actual value of a handle. This value can be anything and used for eventually undoing the motion when calling [method commit_handle]
*/
func (o *EditorSpatialGizmo) GetHandleValue(index gdnative.Int) *Variant {
	log.Println("Calling EditorSpatialGizmo.GetHandleValue()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(index)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_handle_value", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   This function is called when the Spatial this gizmo refers to changes (the [method Spatial.update_gizmo] is called).
*/
func (o *EditorSpatialGizmo) Redraw() {
	log.Println("Calling EditorSpatialGizmo.Redraw()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "redraw", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   This function is used when the user drags a gizmo handle (previously added with [method add_handles]) in screen coordinates. The [Camera] is also provided so screen coordinates can be converted to raycasts.
*/
func (o *EditorSpatialGizmo) SetHandle(index gdnative.Int, camera *Camera, point *Vector2) {
	log.Println("Calling EditorSpatialGizmo.SetHandle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(index)
	goArguments[1] = reflect.ValueOf(camera)
	goArguments[2] = reflect.ValueOf(point)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_handle", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorSpatialGizmo) SetSpatialNode(node *Object) {
	log.Println("Calling EditorSpatialGizmo.SetSpatialNode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(node)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_spatial_node", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   EditorSpatialGizmoImplementer is an interface for EditorSpatialGizmo objects.
*/
type EditorSpatialGizmoImplementer interface {
	Class
}
