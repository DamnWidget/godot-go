package editor

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A more generalized, low-level variation of the directory concept.
*/
type EditorFileSystemDirectory struct {
	Object
}

func (o *EditorFileSystemDirectory) BaseClass() string {
	return "EditorFileSystemDirectory"
}

/*
   Returns the index of the directory with name [code]name[/code] or [code]-1[/code] if not found.
*/
func (o *EditorFileSystemDirectory) FindDirIndex(name gdnative.String) gdnative.Int {
	log.Println("Calling EditorFileSystemDirectory.FindDirIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "find_dir_index", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the index of the file with name [code]name[/code] or [code]-1[/code] if not found.
*/
func (o *EditorFileSystemDirectory) FindFileIndex(name gdnative.String) gdnative.Int {
	log.Println("Calling EditorFileSystemDirectory.FindFileIndex()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(name)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "find_file_index", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the name of the file at index [code]idx[/code].
*/
func (o *EditorFileSystemDirectory) GetFile(idx gdnative.Int) gdnative.String {
	log.Println("Calling EditorFileSystemDirectory.GetFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_file", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of files in this directory.
*/
func (o *EditorFileSystemDirectory) GetFileCount() gdnative.Int {
	log.Println("Calling EditorFileSystemDirectory.GetFileCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_file_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if the file at index [code]idx[/code] imported properly.
*/
func (o *EditorFileSystemDirectory) GetFileImportIsValid(idx gdnative.Int) gdnative.Bool {
	log.Println("Calling EditorFileSystemDirectory.GetFileImportIsValid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_file_import_is_valid", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the path to the file at index [code]idx[/code].
*/
func (o *EditorFileSystemDirectory) GetFilePath(idx gdnative.Int) gdnative.String {
	log.Println("Calling EditorFileSystemDirectory.GetFilePath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_file_path", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the file extension of the file at index [code]idx[/code].
*/
func (o *EditorFileSystemDirectory) GetFileType(idx gdnative.Int) gdnative.String {
	log.Println("Calling EditorFileSystemDirectory.GetFileType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_file_type", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the name of this directory.
*/
func (o *EditorFileSystemDirectory) GetName() gdnative.String {
	log.Println("Calling EditorFileSystemDirectory.GetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the parent directory for this directory or null if called on a directory at [code]res://[/code] or [code]user://[/code].
*/
func (o *EditorFileSystemDirectory) GetParent() *EditorFileSystemDirectory {
	log.Println("Calling EditorFileSystemDirectory.GetParent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_parent", goArguments, "*EditorFileSystemDirectory")

	returnValue := goRet.Interface().(*EditorFileSystemDirectory)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the path to this directory.
*/
func (o *EditorFileSystemDirectory) GetPath() gdnative.String {
	log.Println("Calling EditorFileSystemDirectory.GetPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_path", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the subdirectory at index [code]idx[/code].
*/
func (o *EditorFileSystemDirectory) GetSubdir(idx gdnative.Int) *EditorFileSystemDirectory {
	log.Println("Calling EditorFileSystemDirectory.GetSubdir()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_subdir", goArguments, "*EditorFileSystemDirectory")

	returnValue := goRet.Interface().(*EditorFileSystemDirectory)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of subdirectories in this directory.
*/
func (o *EditorFileSystemDirectory) GetSubdirCount() gdnative.Int {
	log.Println("Calling EditorFileSystemDirectory.GetSubdirCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_subdir_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   EditorFileSystemDirectoryImplementer is an interface for EditorFileSystemDirectory objects.
*/
type EditorFileSystemDirectoryImplementer interface {
	Class
}
