package editor

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type EditorExportPlugin struct {
	Reference
}

func (o *EditorExportPlugin) BaseClass() string {
	return "EditorExportPlugin"
}

/*

 */
func (o *EditorExportPlugin) X_ExportBegin(features *PoolStringArray, isDebug gdnative.Bool, path gdnative.String, flags gdnative.Int) {
	log.Println("Calling EditorExportPlugin.X_ExportBegin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(features)
	goArguments[1] = reflect.ValueOf(isDebug)
	goArguments[2] = reflect.ValueOf(path)
	goArguments[3] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_export_begin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) X_ExportFile(path gdnative.String, aType gdnative.String, features *PoolStringArray) {
	log.Println("Calling EditorExportPlugin.X_ExportFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(features)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_export_file", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) AddFile(path gdnative.String, file *PoolByteArray, remap gdnative.Bool) {
	log.Println("Calling EditorExportPlugin.AddFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(file)
	goArguments[2] = reflect.ValueOf(remap)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_file", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) AddIosBundleFile(path gdnative.String) {
	log.Println("Calling EditorExportPlugin.AddIosBundleFile()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_ios_bundle_file", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) AddIosCppCode(code gdnative.String) {
	log.Println("Calling EditorExportPlugin.AddIosCppCode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(code)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_ios_cpp_code", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) AddIosFramework(path gdnative.String) {
	log.Println("Calling EditorExportPlugin.AddIosFramework()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_ios_framework", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) AddIosLinkerFlags(flags gdnative.String) {
	log.Println("Calling EditorExportPlugin.AddIosLinkerFlags()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(flags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_ios_linker_flags", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) AddIosPlistContent(plistContent gdnative.String) {
	log.Println("Calling EditorExportPlugin.AddIosPlistContent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(plistContent)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_ios_plist_content", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) AddSharedObject(path gdnative.String, tags *PoolStringArray) {
	log.Println("Calling EditorExportPlugin.AddSharedObject()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(path)
	goArguments[1] = reflect.ValueOf(tags)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_shared_object", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorExportPlugin) Skip() {
	log.Println("Calling EditorExportPlugin.Skip()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "skip", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   EditorExportPluginImplementer is an interface for EditorExportPlugin objects.
*/
type EditorExportPluginImplementer interface {
	Class
}
