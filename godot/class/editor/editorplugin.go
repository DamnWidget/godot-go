package editor

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins.
*/
type EditorPlugin struct {
	Node
}

func (o *EditorPlugin) BaseClass() string {
	return "EditorPlugin"
}

/*
   Add a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_bottom_panel].
*/
func (o *EditorPlugin) AddControlToBottomPanel(control *Object, title gdnative.String) *ToolButton {
	log.Println("Calling EditorPlugin.AddControlToBottomPanel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(control)
	goArguments[1] = reflect.ValueOf(title)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "add_control_to_bottom_panel", goArguments, "*ToolButton")

	returnValue := goRet.Interface().(*ToolButton)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Add a custom control to a container (see CONTAINER_* enum). There are many locations where custom controls can be added in the editor UI. Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it). If your plugin is being removed, also make sure to remove your custom controls too.
*/
func (o *EditorPlugin) AddControlToContainer(container gdnative.Int, control *Object) {
	log.Println("Calling EditorPlugin.AddControlToContainer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(container)
	goArguments[1] = reflect.ValueOf(control)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_control_to_container", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add the control to a specific dock slot (see DOCK_* enum for options). If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions. If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_docks].
*/
func (o *EditorPlugin) AddControlToDock(slot gdnative.Int, control *Object) {
	log.Println("Calling EditorPlugin.AddControlToDock()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(slot)
	goArguments[1] = reflect.ValueOf(control)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_control_to_dock", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Add a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed. When given node or resource is selected, the base type will be instanced (ie, "Spatial", "Control", "Resource"), then the script will be loaded and set to this object. You can use the [method EditorPlugin.handles] to check if your custom object is being edited by checking the script or using 'is' keyword. During run-time, this will be a simple object with a script so this function does not need to be called then.
*/
func (o *EditorPlugin) AddCustomType(aType gdnative.String, base gdnative.String, script *Script, icon *Texture) {
	log.Println("Calling EditorPlugin.AddCustomType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(aType)
	goArguments[1] = reflect.ValueOf(base)
	goArguments[2] = reflect.ValueOf(script)
	goArguments[3] = reflect.ValueOf(icon)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_custom_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) AddExportPlugin(exporter *EditorExportPlugin) {
	log.Println("Calling EditorPlugin.AddExportPlugin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(exporter)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_export_plugin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) AddImportPlugin(importer *EditorImportPlugin) {
	log.Println("Calling EditorPlugin.AddImportPlugin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(importer)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_import_plugin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) AddSceneImportPlugin(sceneImporter *EditorSceneImporter) {
	log.Println("Calling EditorPlugin.AddSceneImportPlugin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sceneImporter)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_scene_import_plugin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) AddToolSubmenuItem(name gdnative.String, submenu *Object) {
	log.Println("Calling EditorPlugin.AddToolSubmenuItem()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(submenu)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "add_tool_submenu_item", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency. This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.
*/
func (o *EditorPlugin) ApplyChanges() {
	log.Println("Calling EditorPlugin.ApplyChanges()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "apply_changes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.
*/
func (o *EditorPlugin) Clear() {
	log.Println("Calling EditorPlugin.Clear()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   This is used for plugins that create gizmos used by the spatial editor. Just check that the node passed in the "for_spatial" argument matches your plugin.
*/
func (o *EditorPlugin) CreateSpatialGizmo(forSpatial *Spatial) *EditorSpatialGizmo {
	log.Println("Calling EditorPlugin.CreateSpatialGizmo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(forSpatial)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "create_spatial_gizmo", goArguments, "*EditorSpatialGizmo")

	returnValue := goRet.Interface().(*EditorSpatialGizmo)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.
*/
func (o *EditorPlugin) Edit(object *Object) {
	log.Println("Calling EditorPlugin.Edit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(object)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "edit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) ForwardCanvasGuiInput(event *InputEvent) gdnative.Bool {
	log.Println("Calling EditorPlugin.ForwardCanvasGuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(event)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "forward_canvas_gui_input", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorPlugin) ForwardDrawOverViewport(overlay *Control) {
	log.Println("Calling EditorPlugin.ForwardDrawOverViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(overlay)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "forward_draw_over_viewport", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) ForwardForceDrawOverViewport(overlay *Control) {
	log.Println("Calling EditorPlugin.ForwardForceDrawOverViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(overlay)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "forward_force_draw_over_viewport", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Implement this function if you are interested in 3D view screen input events. It will be called only if currently selected node is handled by your plugin. If you would like to always gets those input events then additionally use [method set_input_forwarding_always_enabled].
*/
func (o *EditorPlugin) ForwardSpatialGuiInput(camera *Camera, event *InputEvent) gdnative.Bool {
	log.Println("Calling EditorPlugin.ForwardSpatialGuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(camera)
	goArguments[1] = reflect.ValueOf(event)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "forward_spatial_gui_input", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   This is for editors that edit script based objects. You can return a list of breakpoints in the format (script:line), for example: res://path_to_script.gd:25
*/
func (o *EditorPlugin) GetBreakpoints() *PoolStringArray {
	log.Println("Calling EditorPlugin.GetBreakpoints()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_breakpoints", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorPlugin) GetEditorInterface() *EditorInterface {
	log.Println("Calling EditorPlugin.GetEditorInterface()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_editor_interface", goArguments, "*EditorInterface")

	returnValue := goRet.Interface().(*EditorInterface)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorPlugin) GetPluginIcon() *Object {
	log.Println("Calling EditorPlugin.GetPluginIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_plugin_icon", goArguments, "*Object")

	returnValue := goRet.Interface().(*Object)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorPlugin) GetPluginName() gdnative.String {
	log.Println("Calling EditorPlugin.GetPluginName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_plugin_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).
*/
func (o *EditorPlugin) GetState() *Dictionary {
	log.Println("Calling EditorPlugin.GetState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_state", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.
*/
func (o *EditorPlugin) GetUndoRedo() *UndoRedo {
	log.Println("Calling EditorPlugin.GetUndoRedo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_undo_redo", goArguments, "*UndoRedo")

	returnValue := goRet.Interface().(*UndoRedo)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the GUI layout of the plugin. This is used to save the project's editor layout when the [method EditorPlugin.queue_save_layout] is called or the editor layout was changed(For example changing the position of a dock).
*/
func (o *EditorPlugin) GetWindowLayout(layout *ConfigFile) {
	log.Println("Calling EditorPlugin.GetWindowLayout()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(layout)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "get_window_layout", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Implement this function if your plugin edits a specific type of object (Resource or Node). If you return true, then you will get the functions [method EditorPlugin.edit] and [method EditorPlugin.make_visible] called when the editor requests them.
*/
func (o *EditorPlugin) Handles(object *Object) gdnative.Bool {
	log.Println("Calling EditorPlugin.Handles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(object)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "handles", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if this is a main screen editor plugin (it goes in the main screen selector together with 2D, 3D, Script).
*/
func (o *EditorPlugin) HasMainScreen() gdnative.Bool {
	log.Println("Calling EditorPlugin.HasMainScreen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_main_screen", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorPlugin) HideBottomPanel() {
	log.Println("Calling EditorPlugin.HideBottomPanel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "hide_bottom_panel", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) MakeBottomPanelItemVisible(item *Object) {
	log.Println("Calling EditorPlugin.MakeBottomPanelItemVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(item)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "make_bottom_panel_item_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type. Remember that you have to manage the visibility of all your editor controls manually.
*/
func (o *EditorPlugin) MakeVisible(visible gdnative.Bool) {
	log.Println("Calling EditorPlugin.MakeVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(visible)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "make_visible", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Queue save the project's editor layout.
*/
func (o *EditorPlugin) QueueSaveLayout() {
	log.Println("Calling EditorPlugin.QueueSaveLayout()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "queue_save_layout", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove the control from the bottom panel. Don't forget to call this if you added one, so the editor can remove it cleanly.
*/
func (o *EditorPlugin) RemoveControlFromBottomPanel(control *Object) {
	log.Println("Calling EditorPlugin.RemoveControlFromBottomPanel()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(control)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_control_from_bottom_panel", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove the control from the specified container. Use it when cleaning up after adding a control with [method add_control_to_container]. Note that you can simply free the control if you won't use it anymore.
*/
func (o *EditorPlugin) RemoveControlFromContainer(container gdnative.Int, control *Object) {
	log.Println("Calling EditorPlugin.RemoveControlFromContainer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(container)
	goArguments[1] = reflect.ValueOf(control)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_control_from_container", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove the control from the dock. Don't forget to call this if you added one, so the editor can save the layout and remove it cleanly.
*/
func (o *EditorPlugin) RemoveControlFromDocks(control *Object) {
	log.Println("Calling EditorPlugin.RemoveControlFromDocks()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(control)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_control_from_docks", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Remove a custom type added by [method EditorPlugin.add_custom_type]
*/
func (o *EditorPlugin) RemoveCustomType(aType gdnative.String) {
	log.Println("Calling EditorPlugin.RemoveCustomType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_custom_type", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) RemoveExportPlugin(exporter *EditorExportPlugin) {
	log.Println("Calling EditorPlugin.RemoveExportPlugin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(exporter)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_export_plugin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) RemoveImportPlugin(importer *EditorImportPlugin) {
	log.Println("Calling EditorPlugin.RemoveImportPlugin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(importer)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_import_plugin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) RemoveSceneImportPlugin(sceneImporter *EditorSceneImporter) {
	log.Println("Calling EditorPlugin.RemoveSceneImportPlugin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(sceneImporter)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "remove_scene_import_plugin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.
*/
func (o *EditorPlugin) SaveExternalData() {
	log.Println("Calling EditorPlugin.SaveExternalData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "save_external_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) SetForceDrawOverForwardingEnabled() {
	log.Println("Calling EditorPlugin.SetForceDrawOverForwardingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_force_draw_over_forwarding_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Use this method if you always want to receive inputs from 3D view screen inside [method forward_spatial_gui_input]. It might be especially usable if your plugin will want to use raycast in the scene.
*/
func (o *EditorPlugin) SetInputEventForwardingAlwaysEnabled() {
	log.Println("Calling EditorPlugin.SetInputEventForwardingAlwaysEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_input_event_forwarding_always_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Restore the state saved by [method EditorPlugin.get_state].
*/
func (o *EditorPlugin) SetState(state *Dictionary) {
	log.Println("Calling EditorPlugin.SetState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(state)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_state", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Restore the plugin GUI layout saved by [method EditorPlugin.get_window_layout].
*/
func (o *EditorPlugin) SetWindowLayout(layout *ConfigFile) {
	log.Println("Calling EditorPlugin.SetWindowLayout()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(layout)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_window_layout", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *EditorPlugin) UpdateOverlays() gdnative.Int {
	log.Println("Calling EditorPlugin.UpdateOverlays()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "update_overlays", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   EditorPluginImplementer is an interface for EditorPlugin objects.
*/
type EditorPluginImplementer interface {
	Class
}
