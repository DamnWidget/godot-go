package editor

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Custom code to generate previews. Please check "file_dialog/thumbnail_size" in EditorSettings to find out the right size to do previews at.
*/
type EditorResourcePreviewGenerator struct {
	Reference
}

func (o *EditorResourcePreviewGenerator) BaseClass() string {
	return "EditorResourcePreviewGenerator"
}

/*
   Generate a preview from a given resource. This must be always implemented. Returning an empty texture is an OK way to fail and let another generator take care. Care must be taken because this function is always called from a thread (not the main thread).
*/
func (o *EditorResourcePreviewGenerator) Generate(from *Resource) *Texture {
	log.Println("Calling EditorResourcePreviewGenerator.Generate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(from)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "generate", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Generate a preview directly from a path, implementing this is optional, as default code will load and call generate() Returning an empty texture is an OK way to fail and let another generator take care. Care must be taken because this function is always called from a thread (not the main thread).
*/
func (o *EditorResourcePreviewGenerator) GenerateFromPath(path gdnative.String) *Texture {
	log.Println("Calling EditorResourcePreviewGenerator.GenerateFromPath()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(path)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "generate_from_path", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return if your generator supports this resource type.
*/
func (o *EditorResourcePreviewGenerator) Handles(aType gdnative.String) gdnative.Bool {
	log.Println("Calling EditorResourcePreviewGenerator.Handles()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "handles", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   EditorResourcePreviewGeneratorImplementer is an interface for EditorResourcePreviewGenerator objects.
*/
type EditorResourcePreviewGeneratorImplementer interface {
	Class
}
