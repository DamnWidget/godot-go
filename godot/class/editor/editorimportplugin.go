package editor

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your [EditorPlugin] with [method EditorPlugin.add_import_plugin]. EditorImportPlugins work by associating with specific file extensions and a resource type. See [method get_recognized_extension] and [method get_resource_type]). They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the [code].import[/code] directory. Below is an example EditorImportPlugin that imports a [Mesh] from a file with the extension ".special" or ".spec": [codeblock] tool extends EditorImportPlugin func get_importer_name(): return "my.special.plugin" func get_visible_name(): return "Special Mesh Importer" func get_recognized_extensions(): return ["special", "spec"] func get_save_extension(): return "mesh" func get_resource_type(): return "Mesh" func get_preset_count(): return 1 func get_preset_name(i): return "Default" func get_import_options(i): return [{"name": "my_option", "default_value": false}] func load(src, dst, opts, r_platform_variants, r_gen_files): var file = File.new() if file.open(src, File.READ) != OK: return FAILED var mesh = Mesh.new() var save = dst + "." + get_save_extension() ResourceSaver.save(file, mesh) return OK [/codeblock]
*/
type EditorImportPlugin struct {
	Reference
}

func (o *EditorImportPlugin) BaseClass() string {
	return "EditorImportPlugin"
}

/*
   Get the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: "name", "default_value", "property_hint" (optional), "hint_string" (optional), "usage" (optional).
*/
func (o *EditorImportPlugin) GetImportOptions(preset gdnative.Int) *Array {
	log.Println("Calling EditorImportPlugin.GetImportOptions()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(preset)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_import_options", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the order of this importer to be run when importing resources. Higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported.
*/
func (o *EditorImportPlugin) GetImportOrder() gdnative.Int {
	log.Println("Calling EditorImportPlugin.GetImportOrder()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_import_order", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the unique name of the importer.
*/
func (o *EditorImportPlugin) GetImporterName() gdnative.String {
	log.Println("Calling EditorImportPlugin.GetImporterName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_importer_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorImportPlugin) GetOptionVisibility(option gdnative.String, options *Dictionary) gdnative.Bool {
	log.Println("Calling EditorImportPlugin.GetOptionVisibility()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(option)
	goArguments[1] = reflect.ValueOf(options)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_option_visibility", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the number of initial presets defined by the plugin. Use [method get_import_options] to get the default options for the preset and [method get_preset_name] to get the name of the preset.
*/
func (o *EditorImportPlugin) GetPresetCount() gdnative.Int {
	log.Println("Calling EditorImportPlugin.GetPresetCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_preset_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the name of the options preset at this index.
*/
func (o *EditorImportPlugin) GetPresetName(preset gdnative.Int) gdnative.String {
	log.Println("Calling EditorImportPlugin.GetPresetName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(preset)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_preset_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the priority of this plugin for the recognized extension. Higher priority plugins will be preferred. Default value is 1.0.
*/
func (o *EditorImportPlugin) GetPriority() gdnative.Float {
	log.Println("Calling EditorImportPlugin.GetPriority()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_priority", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the list of file extensions to associate with this loader (case insensitive). e.g. ["obj"].
*/
func (o *EditorImportPlugin) GetRecognizedExtensions() *Array {
	log.Println("Calling EditorImportPlugin.GetRecognizedExtensions()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_recognized_extensions", goArguments, "*Array")

	returnValue := goRet.Interface().(*Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the godot resource type associated with this loader. e.g. "Mesh" or "Animation".
*/
func (o *EditorImportPlugin) GetResourceType() gdnative.String {
	log.Println("Calling EditorImportPlugin.GetResourceType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_resource_type", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the extension used to save this resource in the [code].import[/code] directory.
*/
func (o *EditorImportPlugin) GetSaveExtension() gdnative.String {
	log.Println("Calling EditorImportPlugin.GetSaveExtension()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_save_extension", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Get the name to display in the import window.
*/
func (o *EditorImportPlugin) GetVisibleName() gdnative.String {
	log.Println("Calling EditorImportPlugin.GetVisibleName()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_visible_name", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *EditorImportPlugin) Import(sourceFile gdnative.String, savePath gdnative.String, options *Dictionary, rPlatformVariants *Array, rGenFiles *Array) gdnative.Int {
	log.Println("Calling EditorImportPlugin.Import()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 5, 5)
	goArguments[0] = reflect.ValueOf(sourceFile)
	goArguments[1] = reflect.ValueOf(savePath)
	goArguments[2] = reflect.ValueOf(options)
	goArguments[3] = reflect.ValueOf(rPlatformVariants)
	goArguments[4] = reflect.ValueOf(rGenFiles)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "import", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   EditorImportPluginImplementer is an interface for EditorImportPlugin objects.
*/
type EditorImportPluginImplementer interface {
	Class
}
