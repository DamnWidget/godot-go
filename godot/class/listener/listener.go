package listener

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type Listener struct {
	Spatial
}

func (o *Listener) BaseClass() string {
	return "Listener"
}

/*

 */
func (o *Listener) ClearCurrent() {
	log.Println("Calling Listener.ClearCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *Listener) GetListenerTransform() *Transform {
	log.Println("Calling Listener.GetListenerTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_listener_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Listener) IsCurrent() gdnative.Bool {
	log.Println("Calling Listener.IsCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_current", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *Listener) MakeCurrent() {
	log.Println("Calling Listener.MakeCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "make_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ListenerImplementer is an interface for Listener objects.
*/
type ListenerImplementer interface {
	Class
}
