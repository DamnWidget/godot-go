package bitmap

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.
*/
type BitMap struct {
	Resource
}

func (o *BitMap) BaseClass() string {
	return "BitMap"
}

/*
   Undocumented
*/
func (o *BitMap) X_GetData() *Dictionary {
	log.Println("Calling BitMap.X_GetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "_get_data", goArguments, "*Dictionary")

	returnValue := goRet.Interface().(*Dictionary)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BitMap) X_SetData(arg0 *Dictionary) {
	log.Println("Calling BitMap.X_SetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a bitmap with the specified size, filled with false.
*/
func (o *BitMap) Create(size *Vector2) {
	log.Println("Calling BitMap.Create()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(size)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "create", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to false if the alpha value of the image at that position is equal to [code]threshold[/code] or less, and true in other case.
*/
func (o *BitMap) CreateFromImageAlpha(image *Image) {
	log.Println("Calling BitMap.CreateFromImageAlpha()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(image)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "create_from_image_alpha", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns bitmap's value at the specified position.
*/
func (o *BitMap) GetBit(position *Vector2) gdnative.Bool {
	log.Println("Calling BitMap.GetBit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(position)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_bit", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns bitmap's dimensions.
*/
func (o *BitMap) GetSize() *Vector2 {
	log.Println("Calling BitMap.GetSize()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_size", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the amount of bitmap elements that are set to true.
*/
func (o *BitMap) GetTrueBitCount() gdnative.Int {
	log.Println("Calling BitMap.GetTrueBitCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_true_bit_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the bitmap's element at the specified position, to the specified value.
*/
func (o *BitMap) SetBit(position *Vector2, bit gdnative.Bool) {
	log.Println("Calling BitMap.SetBit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(position)
	goArguments[1] = reflect.ValueOf(bit)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a rectangular portion of the bitmap to the specified value.
*/
func (o *BitMap) SetBitRect(pRect *Rect2, bit gdnative.Bool) {
	log.Println("Calling BitMap.SetBitRect()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(pRect)
	goArguments[1] = reflect.ValueOf(bit)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_bit_rect", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   BitMapImplementer is an interface for BitMap objects.
*/
type BitMapImplementer interface {
	Class
}
