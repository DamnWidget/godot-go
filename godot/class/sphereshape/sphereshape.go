package sphereshape

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Sphere shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. This shape is useful for modeling sphere-like 3D objects.
*/
type SphereShape struct {
	Shape
}

func (o *SphereShape) BaseClass() string {
	return "SphereShape"
}

/*
   Undocumented
*/
func (o *SphereShape) GetRadius() gdnative.Float {
	log.Println("Calling SphereShape.GetRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_radius", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SphereShape) SetRadius(radius gdnative.Float) {
	log.Println("Calling SphereShape.SetRadius()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(radius)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_radius", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SphereShapeImplementer is an interface for SphereShape objects.
*/
type SphereShapeImplementer interface {
	Class
}
