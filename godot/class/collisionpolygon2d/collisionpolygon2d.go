package collisionpolygon2d

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Provides a 2D collision polygon to a [CollisionObject2D] parent. Polygon can be drawn in the editor or specified by a list of vertices.
*/
type CollisionPolygon2D struct {
	Node2D
}

func (o *CollisionPolygon2D) BaseClass() string {
	return "CollisionPolygon2D"
}

/*
   Undocumented
*/
func (o *CollisionPolygon2D) GetBuildMode() gdnative.Int {
	log.Println("Calling CollisionPolygon2D.GetBuildMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_build_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CollisionPolygon2D) GetPolygon() *PoolVector2Array {
	log.Println("Calling CollisionPolygon2D.GetPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_polygon", goArguments, "*PoolVector2Array")

	returnValue := goRet.Interface().(*PoolVector2Array)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CollisionPolygon2D) IsDisabled() gdnative.Bool {
	log.Println("Calling CollisionPolygon2D.IsDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_disabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CollisionPolygon2D) IsOneWayCollisionEnabled() gdnative.Bool {
	log.Println("Calling CollisionPolygon2D.IsOneWayCollisionEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_one_way_collision_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *CollisionPolygon2D) SetBuildMode(buildMode gdnative.Int) {
	log.Println("Calling CollisionPolygon2D.SetBuildMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(buildMode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_build_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *CollisionPolygon2D) SetDisabled(disabled gdnative.Bool) {
	log.Println("Calling CollisionPolygon2D.SetDisabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(disabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_disabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *CollisionPolygon2D) SetOneWayCollision(enabled gdnative.Bool) {
	log.Println("Calling CollisionPolygon2D.SetOneWayCollision()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_one_way_collision", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *CollisionPolygon2D) SetPolygon(polygon *PoolVector2Array) {
	log.Println("Calling CollisionPolygon2D.SetPolygon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(polygon)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_polygon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   CollisionPolygon2DImplementer is an interface for CollisionPolygon2D objects.
*/
type CollisionPolygon2DImplementer interface {
	Class
}
