package physics

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Direct access object to a physics body in the [Physics2DServer]. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body.
*/
type Physics2DDirectBodyState struct {
	Object
}

func (o *Physics2DDirectBodyState) BaseClass() string {
	return "Physics2DDirectBodyState"
}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) GetAngularVelocity() gdnative.Float {
	log.Println("Calling Physics2DDirectBodyState.GetAngularVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_angular_velocity", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the [RID] of the collider.
*/
func (o *Physics2DDirectBodyState) GetContactCollider(contactIdx gdnative.Int) *RID {
	log.Println("Calling Physics2DDirectBodyState.GetContactCollider()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_collider", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the object id of the collider.
*/
func (o *Physics2DDirectBodyState) GetContactColliderId(contactIdx gdnative.Int) gdnative.Int {
	log.Println("Calling Physics2DDirectBodyState.GetContactColliderId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_collider_id", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the collider object, this depends on how it was created (will return a scene node if such was used to create it).
*/
func (o *Physics2DDirectBodyState) GetContactColliderObject(contactIdx gdnative.Int) *Object {
	log.Println("Calling Physics2DDirectBodyState.GetContactColliderObject()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_collider_object", goArguments, "*Object")

	returnValue := goRet.Interface().(*Object)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the contact position in the collider.
*/
func (o *Physics2DDirectBodyState) GetContactColliderPosition(contactIdx gdnative.Int) *Vector2 {
	log.Println("Calling Physics2DDirectBodyState.GetContactColliderPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_collider_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the collider shape index.
*/
func (o *Physics2DDirectBodyState) GetContactColliderShape(contactIdx gdnative.Int) gdnative.Int {
	log.Println("Calling Physics2DDirectBodyState.GetContactColliderShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_collider_shape", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the metadata of the collided shape. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
*/
func (o *Physics2DDirectBodyState) GetContactColliderShapeMetadata(contactIdx gdnative.Int) *Variant {
	log.Println("Calling Physics2DDirectBodyState.GetContactColliderShapeMetadata()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_collider_shape_metadata", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the linear velocity vector at contact point of the collider.
*/
func (o *Physics2DDirectBodyState) GetContactColliderVelocityAtPosition(contactIdx gdnative.Int) *Vector2 {
	log.Println("Calling Physics2DDirectBodyState.GetContactColliderVelocityAtPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_collider_velocity_at_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the amount of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts.
*/
func (o *Physics2DDirectBodyState) GetContactCount() gdnative.Int {
	log.Println("Calling Physics2DDirectBodyState.GetContactCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the local normal (of this body) of the contact point.
*/
func (o *Physics2DDirectBodyState) GetContactLocalNormal(contactIdx gdnative.Int) *Vector2 {
	log.Println("Calling Physics2DDirectBodyState.GetContactLocalNormal()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_local_normal", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the local position (of this body) of the contact point.
*/
func (o *Physics2DDirectBodyState) GetContactLocalPosition(contactIdx gdnative.Int) *Vector2 {
	log.Println("Calling Physics2DDirectBodyState.GetContactLocalPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_local_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the local shape index of the collision.
*/
func (o *Physics2DDirectBodyState) GetContactLocalShape(contactIdx gdnative.Int) gdnative.Int {
	log.Println("Calling Physics2DDirectBodyState.GetContactLocalShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(contactIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_contact_local_shape", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) GetInverseInertia() gdnative.Float {
	log.Println("Calling Physics2DDirectBodyState.GetInverseInertia()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_inverse_inertia", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) GetInverseMass() gdnative.Float {
	log.Println("Calling Physics2DDirectBodyState.GetInverseMass()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_inverse_mass", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) GetLinearVelocity() *Vector2 {
	log.Println("Calling Physics2DDirectBodyState.GetLinearVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_linear_velocity", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the current state of space, useful for queries.
*/
func (o *Physics2DDirectBodyState) GetSpaceState() *Physics2DDirectSpaceState {
	log.Println("Calling Physics2DDirectBodyState.GetSpaceState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_space_state", goArguments, "*Physics2DDirectSpaceState")

	returnValue := goRet.Interface().(*Physics2DDirectSpaceState)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) GetStep() gdnative.Float {
	log.Println("Calling Physics2DDirectBodyState.GetStep()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_step", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) GetTotalAngularDamp() gdnative.Float {
	log.Println("Calling Physics2DDirectBodyState.GetTotalAngularDamp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_total_angular_damp", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) GetTotalGravity() *Vector2 {
	log.Println("Calling Physics2DDirectBodyState.GetTotalGravity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_total_gravity", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) GetTotalLinearDamp() gdnative.Float {
	log.Println("Calling Physics2DDirectBodyState.GetTotalLinearDamp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_total_linear_damp", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) GetTransform() *Transform2D {
	log.Println("Calling Physics2DDirectBodyState.GetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_transform", goArguments, "*Transform2D")

	returnValue := goRet.Interface().(*Transform2D)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Call the built-in force integration code.
*/
func (o *Physics2DDirectBodyState) IntegrateForces() {
	log.Println("Calling Physics2DDirectBodyState.IntegrateForces()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "integrate_forces", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) IsSleeping() gdnative.Bool {
	log.Println("Calling Physics2DDirectBodyState.IsSleeping()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_sleeping", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) SetAngularVelocity(velocity gdnative.Float) {
	log.Println("Calling Physics2DDirectBodyState.SetAngularVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(velocity)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_angular_velocity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) SetLinearVelocity(velocity *Vector2) {
	log.Println("Calling Physics2DDirectBodyState.SetLinearVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(velocity)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_linear_velocity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) SetSleepState(enabled gdnative.Bool) {
	log.Println("Calling Physics2DDirectBodyState.SetSleepState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_sleep_state", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Physics2DDirectBodyState) SetTransform(transform *Transform2D) {
	log.Println("Calling Physics2DDirectBodyState.SetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Physics2DDirectBodyStateImplementer is an interface for Physics2DDirectBodyState objects.
*/
type Physics2DDirectBodyStateImplementer interface {
	Class
}
