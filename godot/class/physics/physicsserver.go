package physics

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func newSingletonPhysicsServer() *physicsServer {
	obj := &physicsServer{}
	ptr := C.godot_global_get_singleton(C.CString("PhysicsServer"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*
   Everything related to physics in 3D.
*/
var PhysicsServer = newSingletonPhysicsServer()

/*
Everything related to physics in 3D.
*/
type physicsServer struct {
	Object
}

func (o *physicsServer) BaseClass() string {
	return "PhysicsServer"
}

/*
   Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
func (o *physicsServer) AreaAddShape(area *RID, shape *RID, transform *Transform) {
	log.Println("Calling PhysicsServer.AreaAddShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shape)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_add_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns the area to a descendant of [Object], so it can exist in the node tree.
*/
func (o *physicsServer) AreaAttachObjectInstanceId(area *RID, id gdnative.Int) {
	log.Println("Calling PhysicsServer.AreaAttachObjectInstanceId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_attach_object_instance_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
*/
func (o *physicsServer) AreaClearShapes(area *RID) {
	log.Println("Calling PhysicsServer.AreaClearShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_clear_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates an [Area].
*/
func (o *physicsServer) AreaCreate() *RID {
	log.Println("Calling PhysicsServer.AreaCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets the instance ID of the object the area is assigned to.
*/
func (o *physicsServer) AreaGetObjectInstanceId(area *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.AreaGetObjectInstanceId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_get_object_instance_id", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.
*/
func (o *physicsServer) AreaGetParam(area *RID, param gdnative.Int) *Variant {
	log.Println("Calling PhysicsServer.AreaGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_get_param", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [RID] of the nth shape of an area.
*/
func (o *physicsServer) AreaGetShape(area *RID, shapeIdx gdnative.Int) *RID {
	log.Println("Calling PhysicsServer.AreaGetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_get_shape", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of shapes assigned to an area.
*/
func (o *physicsServer) AreaGetShapeCount(area *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.AreaGetShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_get_shape_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the transform matrix of a shape within an area.
*/
func (o *physicsServer) AreaGetShapeTransform(area *RID, shapeIdx gdnative.Int) *Transform {
	log.Println("Calling PhysicsServer.AreaGetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_get_shape_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the space assigned to the area.
*/
func (o *physicsServer) AreaGetSpace(area *RID) *RID {
	log.Println("Calling PhysicsServer.AreaGetSpace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_get_space", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the space override mode for the area.
*/
func (o *physicsServer) AreaGetSpaceOverrideMode(area *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.AreaGetSpaceOverrideMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_get_space_override_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the transform matrix for an area.
*/
func (o *physicsServer) AreaGetTransform(area *RID) *Transform {
	log.Println("Calling PhysicsServer.AreaGetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_get_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] area collides with rays.
*/
func (o *physicsServer) AreaIsRayPickable(area *RID) gdnative.Bool {
	log.Println("Calling PhysicsServer.AreaIsRayPickable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(area)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "area_is_ray_pickable", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
*/
func (o *physicsServer) AreaRemoveShape(area *RID, shapeIdx gdnative.Int) {
	log.Println("Calling PhysicsServer.AreaRemoveShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_remove_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns the area to one or many physics layers.
*/
func (o *physicsServer) AreaSetCollisionLayer(area *RID, layer gdnative.Int) {
	log.Println("Calling PhysicsServer.AreaSetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_collision_layer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets which physics layers the area will monitor.
*/
func (o *physicsServer) AreaSetCollisionMask(area *RID, mask gdnative.Int) {
	log.Println("Calling PhysicsServer.AreaSetCollisionMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_collision_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters: 1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area. 2: [RID] of the object that entered/exited the area. 3: Instance ID of the object that entered/exited the area. 4: The shape index of the object that entered/exited the area. 5: The shape index of the area where the object entered/exited.
*/
func (o *physicsServer) AreaSetMonitorCallback(area *RID, receiver *Object, method gdnative.String) {
	log.Println("Calling PhysicsServer.AreaSetMonitorCallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(receiver)
	goArguments[2] = reflect.ValueOf(method)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_monitor_callback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.
*/
func (o *physicsServer) AreaSetParam(area *RID, param gdnative.Int, value *Variant) {
	log.Println("Calling PhysicsServer.AreaSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets object pickable with rays.
*/
func (o *physicsServer) AreaSetRayPickable(area *RID, enable gdnative.Bool) {
	log.Println("Calling PhysicsServer.AreaSetRayPickable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_ray_pickable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].
*/
func (o *physicsServer) AreaSetShape(area *RID, shapeIdx gdnative.Int, shape *RID) {
	log.Println("Calling PhysicsServer.AreaSetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the transform matrix for an area shape.
*/
func (o *physicsServer) AreaSetShapeTransform(area *RID, shapeIdx gdnative.Int, transform *Transform) {
	log.Println("Calling PhysicsServer.AreaSetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_shape_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns a space to the area.
*/
func (o *physicsServer) AreaSetSpace(area *RID, space *RID) {
	log.Println("Calling PhysicsServer.AreaSetSpace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(space)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_space", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.
*/
func (o *physicsServer) AreaSetSpaceOverrideMode(area *RID, mode gdnative.Int) {
	log.Println("Calling PhysicsServer.AreaSetSpaceOverrideMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_space_override_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the transform matrix for an area.
*/
func (o *physicsServer) AreaSetTransform(area *RID, transform *Transform) {
	log.Println("Calling PhysicsServer.AreaSetTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(area)
	goArguments[1] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "area_set_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a body to the list of bodies exempt from collisions.
*/
func (o *physicsServer) BodyAddCollisionException(body *RID, exceptedBody *RID) {
	log.Println("Calling PhysicsServer.BodyAddCollisionException()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(exceptedBody)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_add_collision_exception", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
*/
func (o *physicsServer) BodyAddShape(body *RID, shape *RID, transform *Transform) {
	log.Println("Calling PhysicsServer.BodyAddShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shape)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_add_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Gives the body a push at a [code]position[/code] in the direction of the [code]impulse[/code].
*/
func (o *physicsServer) BodyApplyImpulse(body *RID, position *Vector3, impulse *Vector3) {
	log.Println("Calling PhysicsServer.BodyApplyImpulse()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(position)
	goArguments[2] = reflect.ValueOf(impulse)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_apply_impulse", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Gives the body a push to rotate it.
*/
func (o *physicsServer) BodyApplyTorqueImpulse(body *RID, impulse *Vector3) {
	log.Println("Calling PhysicsServer.BodyApplyTorqueImpulse()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(impulse)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_apply_torque_impulse", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns the area to a descendant of [Object], so it can exist in the node tree.
*/
func (o *physicsServer) BodyAttachObjectInstanceId(body *RID, id gdnative.Int) {
	log.Println("Calling PhysicsServer.BodyAttachObjectInstanceId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(id)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_attach_object_instance_id", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes all shapes from a body.
*/
func (o *physicsServer) BodyClearShapes(body *RID) {
	log.Println("Calling PhysicsServer.BodyClearShapes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_clear_shapes", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.
*/
func (o *physicsServer) BodyCreate(mode gdnative.Int, initSleeping gdnative.Bool) *RID {
	log.Println("Calling PhysicsServer.BodyCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(mode)
	goArguments[1] = reflect.ValueOf(initSleeping)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the physics layer or layers a body belongs to.
*/
func (o *physicsServer) BodyGetCollisionLayer(body *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.BodyGetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_collision_layer", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
        Returns the physics layer or layers a body can collide with.
-
*/
func (o *physicsServer) BodyGetCollisionMask(body *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.BodyGetCollisionMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_collision_mask", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [PhysicsDirectBodyState] of the body.
*/
func (o *physicsServer) BodyGetDirectState(body *RID) *PhysicsDirectBodyState {
	log.Println("Calling PhysicsServer.BodyGetDirectState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_direct_state", goArguments, "*PhysicsDirectBodyState")

	returnValue := goRet.Interface().(*PhysicsDirectBodyState)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *physicsServer) BodyGetKinematicSafeMargin(body *RID) gdnative.Float {
	log.Println("Calling PhysicsServer.BodyGetKinematicSafeMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_kinematic_safe_margin", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].
*/
func (o *physicsServer) BodyGetMaxContactsReported(body *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.BodyGetMaxContactsReported()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_max_contacts_reported", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the body mode.
*/
func (o *physicsServer) BodyGetMode(body *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.BodyGetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets the instance ID of the object the area is assigned to.
*/
func (o *physicsServer) BodyGetObjectInstanceId(body *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.BodyGetObjectInstanceId()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_object_instance_id", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
*/
func (o *physicsServer) BodyGetParam(body *RID, param gdnative.Int) gdnative.Float {
	log.Println("Calling PhysicsServer.BodyGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [RID] of the nth shape of a body.
*/
func (o *physicsServer) BodyGetShape(body *RID, shapeIdx gdnative.Int) *RID {
	log.Println("Calling PhysicsServer.BodyGetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_shape", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the number of shapes assigned to a body.
*/
func (o *physicsServer) BodyGetShapeCount(body *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.BodyGetShapeCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_shape_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the transform matrix of a body shape.
*/
func (o *physicsServer) BodyGetShapeTransform(body *RID, shapeIdx gdnative.Int) *Transform {
	log.Println("Calling PhysicsServer.BodyGetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_shape_transform", goArguments, "*Transform")

	returnValue := goRet.Interface().(*Transform)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [RID] of the space assigned to a body.
*/
func (o *physicsServer) BodyGetSpace(body *RID) *RID {
	log.Println("Calling PhysicsServer.BodyGetSpace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_space", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns a body state.
*/
func (o *physicsServer) BodyGetState(body *RID, state gdnative.Int) *Variant {
	log.Println("Calling PhysicsServer.BodyGetState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(state)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_get_state", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *physicsServer) BodyIsAxisLocked(body *RID, axis gdnative.Int) gdnative.Bool {
	log.Println("Calling PhysicsServer.BodyIsAxisLocked()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(axis)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_is_axis_locked", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] the continuous collision detection mode is enabled.
*/
func (o *physicsServer) BodyIsContinuousCollisionDetectionEnabled(body *RID) gdnative.Bool {
	log.Println("Calling PhysicsServer.BodyIsContinuousCollisionDetectionEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_is_continuous_collision_detection_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
*/
func (o *physicsServer) BodyIsOmittingForceIntegration(body *RID) gdnative.Bool {
	log.Println("Calling PhysicsServer.BodyIsOmittingForceIntegration()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_is_omitting_force_integration", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   If [code]true[/code] the body can be detected by rays
*/
func (o *physicsServer) BodyIsRayPickable(body *RID) gdnative.Bool {
	log.Println("Calling PhysicsServer.BodyIsRayPickable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(body)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "body_is_ray_pickable", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Removes a body from the list of bodies exempt from collisions. Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
*/
func (o *physicsServer) BodyRemoveCollisionException(body *RID, exceptedBody *RID) {
	log.Println("Calling PhysicsServer.BodyRemoveCollisionException()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(exceptedBody)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_remove_collision_exception", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
*/
func (o *physicsServer) BodyRemoveShape(body *RID, shapeIdx gdnative.Int) {
	log.Println("Calling PhysicsServer.BodyRemoveShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_remove_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *physicsServer) BodySetAxisLock(body *RID, axis gdnative.Int, lock gdnative.Bool) {
	log.Println("Calling PhysicsServer.BodySetAxisLock()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(axis)
	goArguments[2] = reflect.ValueOf(lock)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_axis_lock", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
*/
func (o *physicsServer) BodySetAxisVelocity(body *RID, axisVelocity *Vector3) {
	log.Println("Calling PhysicsServer.BodySetAxisVelocity()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(axisVelocity)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_axis_velocity", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the physics layer or layers a body belongs to.
*/
func (o *physicsServer) BodySetCollisionLayer(body *RID, layer gdnative.Int) {
	log.Println("Calling PhysicsServer.BodySetCollisionLayer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(layer)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_collision_layer", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the physics layer or layers a body can collide with.
*/
func (o *physicsServer) BodySetCollisionMask(body *RID, mask gdnative.Int) {
	log.Println("Calling PhysicsServer.BodySetCollisionMask()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(mask)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_collision_mask", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   If [code]true[/code] the continuous collision detection mode is enabled. Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
*/
func (o *physicsServer) BodySetEnableContinuousCollisionDetection(body *RID, enable gdnative.Bool) {
	log.Println("Calling PhysicsServer.BodySetEnableContinuousCollisionDetection()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_enable_continuous_collision_detection", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force integration]).
*/
func (o *physicsServer) BodySetForceIntegrationCallback(body *RID, receiver *Object, method gdnative.String, userdata *Variant) {
	log.Println("Calling PhysicsServer.BodySetForceIntegrationCallback()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(receiver)
	goArguments[2] = reflect.ValueOf(method)
	goArguments[3] = reflect.ValueOf(userdata)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_force_integration_callback", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *physicsServer) BodySetKinematicSafeMargin(body *RID, margin gdnative.Float) {
	log.Println("Calling PhysicsServer.BodySetKinematicSafeMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(margin)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_kinematic_safe_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
*/
func (o *physicsServer) BodySetMaxContactsReported(body *RID, amount gdnative.Int) {
	log.Println("Calling PhysicsServer.BodySetMaxContactsReported()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(amount)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_max_contacts_reported", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the body mode, from one of the constants BODY_MODE*.
*/
func (o *physicsServer) BodySetMode(body *RID, mode gdnative.Int) {
	log.Println("Calling PhysicsServer.BodySetMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
*/
func (o *physicsServer) BodySetOmitForceIntegration(body *RID, enable gdnative.Bool) {
	log.Println("Calling PhysicsServer.BodySetOmitForceIntegration()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_omit_force_integration", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
*/
func (o *physicsServer) BodySetParam(body *RID, param gdnative.Int, value gdnative.Float) {
	log.Println("Calling PhysicsServer.BodySetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the body pickable with rays if [code]enabled[/code] is set.
*/
func (o *physicsServer) BodySetRayPickable(body *RID, enable gdnative.Bool) {
	log.Println("Calling PhysicsServer.BodySetRayPickable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_ray_pickable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].
*/
func (o *physicsServer) BodySetShape(body *RID, shapeIdx gdnative.Int, shape *RID) {
	log.Println("Calling PhysicsServer.BodySetShape()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(shape)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_shape", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the transform matrix for a body shape.
*/
func (o *physicsServer) BodySetShapeTransform(body *RID, shapeIdx gdnative.Int, transform *Transform) {
	log.Println("Calling PhysicsServer.BodySetShapeTransform()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(shapeIdx)
	goArguments[2] = reflect.ValueOf(transform)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_shape_transform", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Assigns a space to the body (see [method create_space]).
*/
func (o *physicsServer) BodySetSpace(body *RID, space *RID) {
	log.Println("Calling PhysicsServer.BodySetSpace()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(space)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_space", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a body state (see BODY_STATE* constants).
*/
func (o *physicsServer) BodySetState(body *RID, state gdnative.Int, value *Variant) {
	log.Println("Calling PhysicsServer.BodySetState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(body)
	goArguments[1] = reflect.ValueOf(state)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "body_set_state", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Gets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).
*/
func (o *physicsServer) ConeTwistJointGetParam(joint *RID, param gdnative.Int) gdnative.Float {
	log.Println("Calling PhysicsServer.ConeTwistJointGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "cone_twist_joint_get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).
*/
func (o *physicsServer) ConeTwistJointSetParam(joint *RID, param gdnative.Int, value gdnative.Float) {
	log.Println("Calling PhysicsServer.ConeTwistJointSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "cone_twist_joint_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Destroys any of the objects created by PhysicsServer. If the [RID] passed is not one of the objects that can be created by PhysicsServer, an error will be sent to the console.
*/
func (o *physicsServer) FreeRid(rid *RID) {
	log.Println("Calling PhysicsServer.FreeRid()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rid)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "free_rid", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Gets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).
*/
func (o *physicsServer) Generic6DofJointGetFlag(joint *RID, axis gdnative.Int, flag gdnative.Int) gdnative.Bool {
	log.Println("Calling PhysicsServer.Generic6DofJointGetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(axis)
	goArguments[2] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "generic_6dof_joint_get_flag", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).
*/
func (o *physicsServer) Generic6DofJointGetParam(joint *RID, axis gdnative.Int, param gdnative.Int) gdnative.Float {
	log.Println("Calling PhysicsServer.Generic6DofJointGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(axis)
	goArguments[2] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "generic_6dof_joint_get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).
*/
func (o *physicsServer) Generic6DofJointSetFlag(joint *RID, axis gdnative.Int, flag gdnative.Int, enable gdnative.Bool) {
	log.Println("Calling PhysicsServer.Generic6DofJointSetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(axis)
	goArguments[2] = reflect.ValueOf(flag)
	goArguments[3] = reflect.ValueOf(enable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "generic_6dof_joint_set_flag", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).
*/
func (o *physicsServer) Generic6DofJointSetParam(joint *RID, axis gdnative.Int, param gdnative.Int, value gdnative.Float) {
	log.Println("Calling PhysicsServer.Generic6DofJointSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(axis)
	goArguments[2] = reflect.ValueOf(param)
	goArguments[3] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "generic_6dof_joint_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns an Info defined by the [ProcessInfo] input given.
*/
func (o *physicsServer) GetProcessInfo(processInfo gdnative.Int) gdnative.Int {
	log.Println("Calling PhysicsServer.GetProcessInfo()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(processInfo)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_process_info", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).
*/
func (o *physicsServer) HingeJointGetFlag(joint *RID, flag gdnative.Int) gdnative.Bool {
	log.Println("Calling PhysicsServer.HingeJointGetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(flag)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "hinge_joint_get_flag", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).
*/
func (o *physicsServer) HingeJointGetParam(joint *RID, param gdnative.Int) gdnative.Float {
	log.Println("Calling PhysicsServer.HingeJointGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "hinge_joint_get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).
*/
func (o *physicsServer) HingeJointSetFlag(joint *RID, flag gdnative.Int, enabled gdnative.Bool) {
	log.Println("Calling PhysicsServer.HingeJointSetFlag()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(flag)
	goArguments[2] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "hinge_joint_set_flag", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).
*/
func (o *physicsServer) HingeJointSetParam(joint *RID, param gdnative.Int, value gdnative.Float) {
	log.Println("Calling PhysicsServer.HingeJointSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "hinge_joint_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a [ConeTwistJoint].
*/
func (o *physicsServer) JointCreateConeTwist(bodyA *RID, localRefA *Transform, bodyB *RID, localRefB *Transform) *RID {
	log.Println("Calling PhysicsServer.JointCreateConeTwist()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(bodyA)
	goArguments[1] = reflect.ValueOf(localRefA)
	goArguments[2] = reflect.ValueOf(bodyB)
	goArguments[3] = reflect.ValueOf(localRefB)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "joint_create_cone_twist", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Creates a [Generic6DOFJoint].
*/
func (o *physicsServer) JointCreateGeneric6Dof(bodyA *RID, localRefA *Transform, bodyB *RID, localRefB *Transform) *RID {
	log.Println("Calling PhysicsServer.JointCreateGeneric6Dof()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(bodyA)
	goArguments[1] = reflect.ValueOf(localRefA)
	goArguments[2] = reflect.ValueOf(bodyB)
	goArguments[3] = reflect.ValueOf(localRefB)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "joint_create_generic_6dof", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Creates a [HingeJoint].
*/
func (o *physicsServer) JointCreateHinge(bodyA *RID, hingeA *Transform, bodyB *RID, hingeB *Transform) *RID {
	log.Println("Calling PhysicsServer.JointCreateHinge()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(bodyA)
	goArguments[1] = reflect.ValueOf(hingeA)
	goArguments[2] = reflect.ValueOf(bodyB)
	goArguments[3] = reflect.ValueOf(hingeB)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "joint_create_hinge", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Creates a [PinJoint].
*/
func (o *physicsServer) JointCreatePin(bodyA *RID, localA *Vector3, bodyB *RID, localB *Vector3) *RID {
	log.Println("Calling PhysicsServer.JointCreatePin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(bodyA)
	goArguments[1] = reflect.ValueOf(localA)
	goArguments[2] = reflect.ValueOf(bodyB)
	goArguments[3] = reflect.ValueOf(localB)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "joint_create_pin", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Creates a [SliderJoint].
*/
func (o *physicsServer) JointCreateSlider(bodyA *RID, localRefA *Transform, bodyB *RID, localRefB *Transform) *RID {
	log.Println("Calling PhysicsServer.JointCreateSlider()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 4, 4)
	goArguments[0] = reflect.ValueOf(bodyA)
	goArguments[1] = reflect.ValueOf(localRefA)
	goArguments[2] = reflect.ValueOf(bodyB)
	goArguments[3] = reflect.ValueOf(localRefB)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "joint_create_slider", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets the priority value of the Joint.
*/
func (o *physicsServer) JointGetSolverPriority(joint *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.JointGetSolverPriority()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(joint)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "joint_get_solver_priority", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the type of the Joint.
*/
func (o *physicsServer) JointGetType(joint *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.JointGetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(joint)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "joint_get_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the priority value of the Joint.
*/
func (o *physicsServer) JointSetSolverPriority(joint *RID, priority gdnative.Int) {
	log.Println("Calling PhysicsServer.JointSetSolverPriority()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(priority)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "joint_set_solver_priority", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns position of the joint in the local space of body a of the joint.
*/
func (o *physicsServer) PinJointGetLocalA(joint *RID) *Vector3 {
	log.Println("Calling PhysicsServer.PinJointGetLocalA()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(joint)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "pin_joint_get_local_a", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns position of the joint in the local space of body b of the joint.
*/
func (o *physicsServer) PinJointGetLocalB(joint *RID) *Vector3 {
	log.Println("Calling PhysicsServer.PinJointGetLocalB()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(joint)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "pin_joint_get_local_b", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets a pin_joint parameter (see PIN_JOINT* constants).
*/
func (o *physicsServer) PinJointGetParam(joint *RID, param gdnative.Int) gdnative.Float {
	log.Println("Calling PhysicsServer.PinJointGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "pin_joint_get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets position of the joint in the local space of body a of the joint.
*/
func (o *physicsServer) PinJointSetLocalA(joint *RID, localA *Vector3) {
	log.Println("Calling PhysicsServer.PinJointSetLocalA()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(localA)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "pin_joint_set_local_a", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets position of the joint in the local space of body b of the joint.
*/
func (o *physicsServer) PinJointSetLocalB(joint *RID, localB *Vector3) {
	log.Println("Calling PhysicsServer.PinJointSetLocalB()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(localB)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "pin_joint_set_local_b", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets a pin_joint parameter (see PIN_JOINT* constants).
*/
func (o *physicsServer) PinJointSetParam(joint *RID, param gdnative.Int, value gdnative.Float) {
	log.Println("Calling PhysicsServer.PinJointSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "pin_joint_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Activates or deactivates the 3D physics engine.
*/
func (o *physicsServer) SetActive(active gdnative.Bool) {
	log.Println("Calling PhysicsServer.SetActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(active)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape].
*/
func (o *physicsServer) ShapeCreate(aType gdnative.Int) *RID {
	log.Println("Calling PhysicsServer.ShapeCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "shape_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the shape data.
*/
func (o *physicsServer) ShapeGetData(shape *RID) *Variant {
	log.Println("Calling PhysicsServer.ShapeGetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shape)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "shape_get_data", goArguments, "*Variant")

	returnValue := goRet.Interface().(*Variant)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the type of shape (see SHAPE_* constants).
*/
func (o *physicsServer) ShapeGetType(shape *RID) gdnative.Int {
	log.Println("Calling PhysicsServer.ShapeGetType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(shape)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "shape_get_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].
*/
func (o *physicsServer) ShapeSetData(shape *RID, data *Variant) {
	log.Println("Calling PhysicsServer.ShapeSetData()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(shape)
	goArguments[1] = reflect.ValueOf(data)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "shape_set_data", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Gets a slider_joint parameter (see SLIDER_JOINT* constants).
*/
func (o *physicsServer) SliderJointGetParam(joint *RID, param gdnative.Int) gdnative.Float {
	log.Println("Calling PhysicsServer.SliderJointGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "slider_joint_get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Gets a slider_joint parameter (see SLIDER_JOINT* constants).
*/
func (o *physicsServer) SliderJointSetParam(joint *RID, param gdnative.Int, value gdnative.Float) {
	log.Println("Calling PhysicsServer.SliderJointSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(joint)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "slider_joint_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].
*/
func (o *physicsServer) SpaceCreate() *RID {
	log.Println("Calling PhysicsServer.SpaceCreate()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "space_create", goArguments, "*RID")

	returnValue := goRet.Interface().(*RID)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the state of a space, a [PhysicsDirectSpaceState]. This object can be used to make collision/intersection queries.
*/
func (o *physicsServer) SpaceGetDirectState(space *RID) *PhysicsDirectSpaceState {
	log.Println("Calling PhysicsServer.SpaceGetDirectState()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(space)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "space_get_direct_state", goArguments, "*PhysicsDirectSpaceState")

	returnValue := goRet.Interface().(*PhysicsDirectSpaceState)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the value of a space parameter.
*/
func (o *physicsServer) SpaceGetParam(space *RID, param gdnative.Int) gdnative.Float {
	log.Println("Calling PhysicsServer.SpaceGetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(space)
	goArguments[1] = reflect.ValueOf(param)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "space_get_param", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns whether the space is active.
*/
func (o *physicsServer) SpaceIsActive(space *RID) gdnative.Bool {
	log.Println("Calling PhysicsServer.SpaceIsActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(space)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "space_is_active", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
*/
func (o *physicsServer) SpaceSetActive(space *RID, active gdnative.Bool) {
	log.Println("Calling PhysicsServer.SpaceSetActive()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(space)
	goArguments[1] = reflect.ValueOf(active)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "space_set_active", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.
*/
func (o *physicsServer) SpaceSetParam(space *RID, param gdnative.Int, value gdnative.Float) {
	log.Println("Calling PhysicsServer.SpaceSetParam()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(space)
	goArguments[1] = reflect.ValueOf(param)
	goArguments[2] = reflect.ValueOf(value)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "space_set_param", goArguments, "")

	log.Println("  Function successfully completed.")

}
