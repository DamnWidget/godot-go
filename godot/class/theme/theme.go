package theme

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Theme for skinning controls. Controls can be skinned individually, but for complex applications it's more efficient to just create a global theme that defines everything. This theme can be applied to any [Control], and it and its children will automatically use it. Theme resources can be alternatively loaded by writing them in a .theme file, see docs for more info.
*/
type Theme struct {
	Resource
}

func (o *Theme) BaseClass() string {
	return "Theme"
}

/*
   Undocumented
*/
func (o *Theme) X_EmitThemeChanged() {
	log.Println("Calling Theme.X_EmitThemeChanged()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_emit_theme_changed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears theme [Color] at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) ClearColor(name gdnative.String, aType gdnative.String) {
	log.Println("Calling Theme.ClearColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears theme constant at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) ClearConstant(name gdnative.String, aType gdnative.String) {
	log.Println("Calling Theme.ClearConstant()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_constant", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears [Font] at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) ClearFont(name gdnative.String, aType gdnative.String) {
	log.Println("Calling Theme.ClearFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_font", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears icon at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) ClearIcon(name gdnative.String, aType gdnative.String) {
	log.Println("Calling Theme.ClearIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Clears [StyleBox] at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) ClearStylebox(name gdnative.String, aType gdnative.String) {
	log.Println("Calling Theme.ClearStylebox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_stylebox", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets theme values to a copy of the default theme values.
*/
func (o *Theme) CopyDefaultTheme() {
	log.Println("Calling Theme.CopyDefaultTheme()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "copy_default_theme", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Returns the [Color] at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) GetColor(name gdnative.String, aType gdnative.String) *Color {
	log.Println("Calling Theme.GetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns all of the [Color]s as a [PoolStringArray] filled with each [Color]'s name, for use in [method get_color], if Theme has [code]type[/code].
*/
func (o *Theme) GetColorList(aType gdnative.String) *PoolStringArray {
	log.Println("Calling Theme.GetColorList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_color_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the constant at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) GetConstant(name gdnative.String, aType gdnative.String) gdnative.Int {
	log.Println("Calling Theme.GetConstant()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_constant", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns all of the constants as a [PoolStringArray] filled with each constant's name, for use in [method get_constant], if Theme has [code]type[/code].
*/
func (o *Theme) GetConstantList(aType gdnative.String) *PoolStringArray {
	log.Println("Calling Theme.GetConstantList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_constant_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Theme) GetDefaultFont() *Font {
	log.Println("Calling Theme.GetDefaultFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_default_font", goArguments, "*Font")

	returnValue := goRet.Interface().(*Font)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the [Font] at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) GetFont(name gdnative.String, aType gdnative.String) *Font {
	log.Println("Calling Theme.GetFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_font", goArguments, "*Font")

	returnValue := goRet.Interface().(*Font)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns all of the [Font]s as a [PoolStringArray] filled with each [Font]'s name, for use in [method get_font], if Theme has [code]type[/code].
*/
func (o *Theme) GetFontList(aType gdnative.String) *PoolStringArray {
	log.Println("Calling Theme.GetFontList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_font_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the icon [Texture] at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) GetIcon(name gdnative.String, aType gdnative.String) *Texture {
	log.Println("Calling Theme.GetIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_icon", goArguments, "*Texture")

	returnValue := goRet.Interface().(*Texture)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns all of the icons as a [PoolStringArray] filled with each [Texture]'s name, for use in [method get_icon], if Theme has [code]type[/code].
*/
func (o *Theme) GetIconList(aType gdnative.String) *PoolStringArray {
	log.Println("Calling Theme.GetIconList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_icon_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the icon [StyleBox] at [code]name[/code] if Theme has [code]type[/code].
*/
func (o *Theme) GetStylebox(name gdnative.String, aType gdnative.String) *StyleBox {
	log.Println("Calling Theme.GetStylebox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_stylebox", goArguments, "*StyleBox")

	returnValue := goRet.Interface().(*StyleBox)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns all of the [StyleBox]s as a [PoolStringArray] filled with each [StyleBox]'s name, for use in [method get_stylebox], if Theme has [code]type[/code].
*/
func (o *Theme) GetStyleboxList(aType gdnative.String) *PoolStringArray {
	log.Println("Calling Theme.GetStyleboxList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_stylebox_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns all of the [StyleBox] types as a [PoolStringArray] filled with each [StyleBox]'s type, for use in [method get_stylebox] and/or [method get_stylebox_list], if Theme has [code]type[/code].
*/
func (o *Theme) GetStyleboxTypes() *PoolStringArray {
	log.Println("Calling Theme.GetStyleboxTypes()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_stylebox_types", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns all of the types in [code]type[/code] as a [PoolStringArray] for use in any of the get_* functions, if Theme has [code]type[/code].
*/
func (o *Theme) GetTypeList(aType gdnative.String) *PoolStringArray {
	log.Println("Calling Theme.GetTypeList()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_type_list", goArguments, "*PoolStringArray")

	returnValue := goRet.Interface().(*PoolStringArray)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if [Color] with [code]name[/code] is in [code]type[/code]. Returns [code]false[/code] if Theme does not have [code]type[/code].
*/
func (o *Theme) HasColor(name gdnative.String, aType gdnative.String) gdnative.Bool {
	log.Println("Calling Theme.HasColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_color", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if constant with [code]name[/code] is in [code]type[/code]. Returns [code]false[/code] if Theme does not have [code]type[/code].
*/
func (o *Theme) HasConstant(name gdnative.String, aType gdnative.String) gdnative.Bool {
	log.Println("Calling Theme.HasConstant()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_constant", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if [Font] with [code]name[/code] is in [code]type[/code]. Returns [code]false[/code] if Theme does not have [code]type[/code].
*/
func (o *Theme) HasFont(name gdnative.String, aType gdnative.String) gdnative.Bool {
	log.Println("Calling Theme.HasFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_font", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if icon [Texture] with [code]name[/code] is in [code]type[/code]. Returns [code]false[/code] if Theme does not have [code]type[/code].
*/
func (o *Theme) HasIcon(name gdnative.String, aType gdnative.String) gdnative.Bool {
	log.Println("Calling Theme.HasIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_icon", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns [code]true[/code] if [StyleBox] with [code]name[/code] is in [code]type[/code]. Returns [code]false[/code] if Theme does not have [code]type[/code].
*/
func (o *Theme) HasStylebox(name gdnative.String, aType gdnative.String) gdnative.Bool {
	log.Println("Calling Theme.HasStylebox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_stylebox", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Sets Theme's [Color] to [code]color[/code] at [code]name[/code] in [code]type[/code]. Does nothing if Theme does not have [code]type[/code].
*/
func (o *Theme) SetColor(name gdnative.String, aType gdnative.String, color *Color) {
	log.Println("Calling Theme.SetColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(color)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_color", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets Theme's constant to [code]constant[/code] at [code]name[/code] in [code]type[/code]. Does nothing if Theme does not have [code]type[/code].
*/
func (o *Theme) SetConstant(name gdnative.String, aType gdnative.String, constant gdnative.Int) {
	log.Println("Calling Theme.SetConstant()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(constant)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_constant", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Theme) SetDefaultFont(font *Font) {
	log.Println("Calling Theme.SetDefaultFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(font)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_default_font", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets Theme's [Font] to [code]font[/code] at [code]name[/code] in [code]type[/code]. Does nothing if Theme does not have [code]type[/code].
*/
func (o *Theme) SetFont(name gdnative.String, aType gdnative.String, font *Font) {
	log.Println("Calling Theme.SetFont()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(font)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_font", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets Theme's icon [Texture] to [code]texture[/code] at [code]name[/code] in [code]type[/code]. Does nothing if Theme does not have [code]type[/code].
*/
func (o *Theme) SetIcon(name gdnative.String, aType gdnative.String, texture *Texture) {
	log.Println("Calling Theme.SetIcon()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_icon", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Sets Theme's [StyleBox] to [code]stylebox[/code] at [code]name[/code] in [code]type[/code]. Does nothing if Theme does not have [code]type[/code].
*/
func (o *Theme) SetStylebox(name gdnative.String, aType gdnative.String, texture *StyleBox) {
	log.Println("Calling Theme.SetStylebox()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(name)
	goArguments[1] = reflect.ValueOf(aType)
	goArguments[2] = reflect.ValueOf(texture)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_stylebox", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   ThemeImplementer is an interface for Theme objects.
*/
type ThemeImplementer interface {
	Class
}
