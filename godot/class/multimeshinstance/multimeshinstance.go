package multimeshinstance

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"

	"github.com/shadowapex/godot-go/godot/class/geometryinstance"
	"github.com/shadowapex/godot-go/godot/class/multimesh"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func NewMultiMeshInstanceFromPointer(ptr gdnative.Pointer) *MultiMeshInstance {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := MultiMeshInstance{}
	obj.SetOwner(owner)

	return &obj

}

/*
[code]MultiMeshInstance[/code] is a specialized node to instance [GeometryInstance]s based on a [MultiMesh] resource. This is useful to optimize the rendering of a high amount of instances of a given mesh (for example tree in a forest or grass strands).
*/
type MultiMeshInstance struct {
	geometryinstance.GeometryInstance
}

func (o *MultiMeshInstance) BaseClass() string {
	return "MultiMeshInstance"
}

/*
        Undocumented
	Args: [], Returns: MultiMesh
*/

func (o *MultiMeshInstance) GetMultimesh() multimesh.MultiMesh {
	log.Println("Calling MultiMeshInstance.GetMultimesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MultiMeshInstance", "get_multimesh")

	// Call the parent method.
	// MultiMesh
	retPtr := multimesh.NewEmptyMultiMesh()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := multimesh.NewMultiMeshFromPointer(retPtr)

	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false multimesh MultiMesh}], Returns: void
*/

func (o *MultiMeshInstance) SetMultimesh(multimesh multimesh.MultiMesh) {
	log.Println("Calling MultiMeshInstance.SetMultimesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(multimesh.GetOwner())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MultiMeshInstance", "set_multimesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}
