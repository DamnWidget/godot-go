package multimeshinstance

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
[code]MultiMeshInstance[/code] is a specialized node to instance [GeometryInstance]s based on a [MultiMesh] resource. This is useful to optimize the rendering of a high amount of instances of a given mesh (for example tree in a forest or grass strands).
*/
type MultiMeshInstance struct {
	GeometryInstance
}

func (o *MultiMeshInstance) BaseClass() string {
	return "MultiMeshInstance"
}

/*
   Undocumented
*/
func (o *MultiMeshInstance) GetMultimesh() *MultiMesh {
	log.Println("Calling MultiMeshInstance.GetMultimesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_multimesh", goArguments, "*MultiMesh")

	returnValue := goRet.Interface().(*MultiMesh)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *MultiMeshInstance) SetMultimesh(multimesh *MultiMesh) {
	log.Println("Calling MultiMeshInstance.SetMultimesh()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(multimesh)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_multimesh", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   MultiMeshInstanceImplementer is an interface for MultiMeshInstance objects.
*/
type MultiMeshInstanceImplementer interface {
	Class
}
