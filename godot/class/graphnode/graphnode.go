package graphnode

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
A GraphNode is a container defined by a title. It can have 1 or more input and output slots, which can be enabled (shown) or disabled (not shown) and have different (incompatible) types. Colors can also be assigned to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input and output connections are left and right slots, but only enabled slots are counted as connections.
*/
type GraphNode struct {
	Container
}

func (o *GraphNode) BaseClass() string {
	return "GraphNode"
}

/*
   Undocumented
*/
func (o *GraphNode) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling GraphNode.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Disable all input and output slots of the GraphNode.
*/
func (o *GraphNode) ClearAllSlots() {
	log.Println("Calling GraphNode.ClearAllSlots()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_all_slots", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Disable input and output slot whose index is 'idx'.
*/
func (o *GraphNode) ClearSlot(idx gdnative.Int) {
	log.Println("Calling GraphNode.ClearSlot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_slot", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the color of the input connection 'idx'.
*/
func (o *GraphNode) GetConnectionInputColor(idx gdnative.Int) *Color {
	log.Println("Calling GraphNode.GetConnectionInputColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_input_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the number of enabled input slots (connections) to the GraphNode.
*/
func (o *GraphNode) GetConnectionInputCount() gdnative.Int {
	log.Println("Calling GraphNode.GetConnectionInputCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_input_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the position of the input connection 'idx'.
*/
func (o *GraphNode) GetConnectionInputPosition(idx gdnative.Int) *Vector2 {
	log.Println("Calling GraphNode.GetConnectionInputPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_input_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the type of the input connection 'idx'.
*/
func (o *GraphNode) GetConnectionInputType(idx gdnative.Int) gdnative.Int {
	log.Println("Calling GraphNode.GetConnectionInputType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_input_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the color of the output connection 'idx'.
*/
func (o *GraphNode) GetConnectionOutputColor(idx gdnative.Int) *Color {
	log.Println("Calling GraphNode.GetConnectionOutputColor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_output_color", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the number of enabled output slots (connections) of the GraphNode.
*/
func (o *GraphNode) GetConnectionOutputCount() gdnative.Int {
	log.Println("Calling GraphNode.GetConnectionOutputCount()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_output_count", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the position of the output connection 'idx'.
*/
func (o *GraphNode) GetConnectionOutputPosition(idx gdnative.Int) *Vector2 {
	log.Println("Calling GraphNode.GetConnectionOutputPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_output_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the type of the output connection 'idx'.
*/
func (o *GraphNode) GetConnectionOutputType(idx gdnative.Int) gdnative.Int {
	log.Println("Calling GraphNode.GetConnectionOutputType()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_connection_output_type", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphNode) GetOffset() *Vector2 {
	log.Println("Calling GraphNode.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphNode) GetOverlay() gdnative.Int {
	log.Println("Calling GraphNode.GetOverlay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_overlay", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the color set to 'idx' left (input) slot.
*/
func (o *GraphNode) GetSlotColorLeft(idx gdnative.Int) *Color {
	log.Println("Calling GraphNode.GetSlotColorLeft()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_slot_color_left", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the color set to 'idx' right (output) slot.
*/
func (o *GraphNode) GetSlotColorRight(idx gdnative.Int) *Color {
	log.Println("Calling GraphNode.GetSlotColorRight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_slot_color_right", goArguments, "*Color")

	returnValue := goRet.Interface().(*Color)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the (integer) type of left (input) 'idx' slot.
*/
func (o *GraphNode) GetSlotTypeLeft(idx gdnative.Int) gdnative.Int {
	log.Println("Calling GraphNode.GetSlotTypeLeft()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_slot_type_left", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the (integer) type of right (output) 'idx' slot.
*/
func (o *GraphNode) GetSlotTypeRight(idx gdnative.Int) gdnative.Int {
	log.Println("Calling GraphNode.GetSlotTypeRight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_slot_type_right", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphNode) GetTitle() gdnative.String {
	log.Println("Calling GraphNode.GetTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_title", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphNode) IsCloseButtonVisible() gdnative.Bool {
	log.Println("Calling GraphNode.IsCloseButtonVisible()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_close_button_visible", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphNode) IsComment() gdnative.Bool {
	log.Println("Calling GraphNode.IsComment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_comment", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphNode) IsResizable() gdnative.Bool {
	log.Println("Calling GraphNode.IsResizable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_resizable", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphNode) IsSelected() gdnative.Bool {
	log.Println("Calling GraphNode.IsSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_selected", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if left (input) slot 'idx' is enabled. False otherwise.
*/
func (o *GraphNode) IsSlotEnabledLeft(idx gdnative.Int) gdnative.Bool {
	log.Println("Calling GraphNode.IsSlotEnabledLeft()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_slot_enabled_left", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return true if right (output) slot 'idx' is enabled. False otherwise.
*/
func (o *GraphNode) IsSlotEnabledRight(idx gdnative.Int) gdnative.Bool {
	log.Println("Calling GraphNode.IsSlotEnabledRight()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(idx)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_slot_enabled_right", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *GraphNode) SetComment(comment gdnative.Bool) {
	log.Println("Calling GraphNode.SetComment()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(comment)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_comment", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphNode) SetOffset(offset *Vector2) {
	log.Println("Calling GraphNode.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphNode) SetOverlay(overlay gdnative.Int) {
	log.Println("Calling GraphNode.SetOverlay()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(overlay)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_overlay", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphNode) SetResizable(resizable gdnative.Bool) {
	log.Println("Calling GraphNode.SetResizable()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(resizable)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_resizable", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphNode) SetSelected(selected gdnative.Bool) {
	log.Println("Calling GraphNode.SetSelected()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(selected)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_selected", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphNode) SetShowCloseButton(show gdnative.Bool) {
	log.Println("Calling GraphNode.SetShowCloseButton()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(show)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_show_close_button", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *GraphNode) SetSlot(idx gdnative.Int, enableLeft gdnative.Bool, typeLeft gdnative.Int, colorLeft *Color, enableRight gdnative.Bool, typeRight gdnative.Int, colorRight *Color, customLeft *Texture, customRight *Texture) {
	log.Println("Calling GraphNode.SetSlot()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 9, 9)
	goArguments[0] = reflect.ValueOf(idx)
	goArguments[1] = reflect.ValueOf(enableLeft)
	goArguments[2] = reflect.ValueOf(typeLeft)
	goArguments[3] = reflect.ValueOf(colorLeft)
	goArguments[4] = reflect.ValueOf(enableRight)
	goArguments[5] = reflect.ValueOf(typeRight)
	goArguments[6] = reflect.ValueOf(colorRight)
	goArguments[7] = reflect.ValueOf(customLeft)
	goArguments[8] = reflect.ValueOf(customRight)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_slot", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *GraphNode) SetTitle(title gdnative.String) {
	log.Println("Calling GraphNode.SetTitle()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(title)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_title", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   GraphNodeImplementer is an interface for GraphNode objects.
*/
type GraphNodeImplementer interface {
	Class
}
