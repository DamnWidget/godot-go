package splitcontainer

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.
*/
type SplitContainer struct {
	Container
}

func (o *SplitContainer) BaseClass() string {
	return "SplitContainer"
}

/*
   Undocumented
*/
func (o *SplitContainer) X_GuiInput(arg0 *InputEvent) {
	log.Println("Calling SplitContainer.X_GuiInput()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_gui_input", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SplitContainer) GetDraggerVisibility() gdnative.Int {
	log.Println("Calling SplitContainer.GetDraggerVisibility()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_dragger_visibility", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SplitContainer) GetSplitOffset() gdnative.Int {
	log.Println("Calling SplitContainer.GetSplitOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_split_offset", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SplitContainer) IsCollapsed() gdnative.Bool {
	log.Println("Calling SplitContainer.IsCollapsed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_collapsed", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *SplitContainer) SetCollapsed(collapsed gdnative.Bool) {
	log.Println("Calling SplitContainer.SetCollapsed()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(collapsed)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_collapsed", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SplitContainer) SetDraggerVisibility(mode gdnative.Int) {
	log.Println("Calling SplitContainer.SetDraggerVisibility()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_dragger_visibility", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *SplitContainer) SetSplitOffset(offset gdnative.Int) {
	log.Println("Calling SplitContainer.SetSplitOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_split_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   SplitContainerImplementer is an interface for SplitContainer objects.
*/
type SplitContainerImplementer interface {
	Class
}
