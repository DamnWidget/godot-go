package performance

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func newSingletonPerformance() *performance {
	obj := &performance{}
	ptr := C.godot_global_get_singleton(C.CString("Performance"))
	obj.owner = (*C.godot_object)(ptr)
	return obj
}

/*
   This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the [i]Monitor[/i] tab in the editor's [i]Debugger[/i] panel. By using the [method get_monitor] method of this class, you can access this data from your code. Note that a few of these monitors are only available in debug mode and will always return 0 when used in a release build. Many of these monitors are not updated in real-time, so there may be a short delay between changes.
*/
var Performance = newSingletonPerformance()

/*
This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the [i]Monitor[/i] tab in the editor's [i]Debugger[/i] panel. By using the [method get_monitor] method of this class, you can access this data from your code. Note that a few of these monitors are only available in debug mode and will always return 0 when used in a release build. Many of these monitors are not updated in real-time, so there may be a short delay between changes.
*/
type performance struct {
	Object
}

func (o *performance) BaseClass() string {
	return "Performance"
}

/*
   Returns the value of one of the available monitors. You should provide one of this class's constants as the argument, like this: [codeblock] print(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console [/codeblock]
*/
func (o *performance) GetMonitor(monitor gdnative.Int) gdnative.Float {
	log.Println("Calling Performance.GetMonitor()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(monitor)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_monitor", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}
