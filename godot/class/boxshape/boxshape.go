package boxshape

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
3D box shape that can be a child of a [PhysicsBody] or [Area].
*/
type BoxShape struct {
	Shape
}

func (o *BoxShape) BaseClass() string {
	return "BoxShape"
}

/*
   Undocumented
*/
func (o *BoxShape) GetExtents() *Vector3 {
	log.Println("Calling BoxShape.GetExtents()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_extents", goArguments, "*Vector3")

	returnValue := goRet.Interface().(*Vector3)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *BoxShape) SetExtents(extents *Vector3) {
	log.Println("Calling BoxShape.SetExtents()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(extents)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_extents", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   BoxShapeImplementer is an interface for BoxShape objects.
*/
type BoxShapeImplementer interface {
	Class
}
