package class

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewCubeMapFromPointer(ptr gdnative.Pointer) CubeMap {
func NewCubeMapFromPointer(ptr gdnative.Pointer) CubeMap {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CubeMap{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A 6-sided 3D texture typically used for faking reflections. It can be used to make an object look as if it's reflecting its surroundings. This usually delivers much better performance than other reflection methods.
*/
type CubeMap struct {
	Resource
	owner gdnative.Object
}

func (o *CubeMap) BaseClass() string {
	return "CubeMap"
}

// SetBaseObject will internally set the Godot object inside the struct.
// This is used to call parent methods.
func (o *CubeMap) SetBaseObject(object gdnative.Object) {
	o.owner = object
}

func (o *CubeMap) GetBaseObject() gdnative.Object {
	return o.owner
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CubeMap) GetFlags() gdnative.Int {
	log.Println("Calling CubeMap.GetFlags()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMap", "get_flags")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns the [code]CubeMap[/code]'s height.
	Args: [], Returns: int
*/
func (o *CubeMap) GetHeight() gdnative.Int {
	log.Println("Calling CubeMap.GetHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMap", "get_height")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CubeMap) GetLossyStorageQuality() gdnative.Float {
	log.Println("Calling CubeMap.GetLossyStorageQuality()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMap", "get_lossy_storage_quality")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyFloat()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewFloatFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Returns an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.
	Args: [{ false side int}], Returns: Image
*/
func (o *CubeMap) GetSide(side gdnative.Int) Image {
	log.Println("Calling CubeMap.GetSide()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(side)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMap", "get_side")

	// Call the parent method.
	// Image
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := NewImageFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.CubeMap::Storage
*/

/*
        Returns the [code]CubeMap[/code]'s width.
	Args: [], Returns: int
*/
func (o *CubeMap) GetWidth() gdnative.Int {
	log.Println("Calling CubeMap.GetWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMap", "get_width")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	log.Println("  Got return value: ", ret)
	return ret
}

/*
        Undocumented
	Args: [{ false flags int}], Returns: void
*/
func (o *CubeMap) SetFlags(flags gdnative.Int) {
	log.Println("Calling CubeMap.SetFlags()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(flags)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMap", "set_flags")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false quality float}], Returns: void
*/
func (o *CubeMap) SetLossyStorageQuality(quality gdnative.Float) {
	log.Println("Calling CubeMap.SetLossyStorageQuality()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromFloat(quality)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMap", "set_lossy_storage_quality")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.
	Args: [{ false side int} { false image Image}], Returns: void
*/
func (o *CubeMap) SetSide(side gdnative.Int, image Image) {
	log.Println("Calling CubeMap.SetSide()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(side)
	ptrArguments[1] = gdnative.NewPointerFromObject(image.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMap", "set_side")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *CubeMap) SetStorage(mode gdnative.Int) {
	log.Println("Calling CubeMap.SetStorage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMap", "set_storage")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}
