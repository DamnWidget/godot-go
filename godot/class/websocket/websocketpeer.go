package websocket

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type WebSocketPeer struct {
	PacketPeer
}

func (o *WebSocketPeer) BaseClass() string {
	return "WebSocketPeer"
}

/*

 */
func (o *WebSocketPeer) Close() {
	log.Println("Calling WebSocketPeer.Close()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "close", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *WebSocketPeer) GetWriteMode() gdnative.Int {
	log.Println("Calling WebSocketPeer.GetWriteMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_write_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *WebSocketPeer) IsConnectedToHost() gdnative.Bool {
	log.Println("Calling WebSocketPeer.IsConnectedToHost()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_connected_to_host", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *WebSocketPeer) SetWriteMode(mode gdnative.Int) {
	log.Println("Calling WebSocketPeer.SetWriteMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(mode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_write_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*

 */
func (o *WebSocketPeer) WasStringPacket() gdnative.Bool {
	log.Println("Calling WebSocketPeer.WasStringPacket()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "was_string_packet", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   WebSocketPeerImplementer is an interface for WebSocketPeer objects.
*/
type WebSocketPeerImplementer interface {
	Class
}
