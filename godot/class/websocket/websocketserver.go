package websocket

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type WebSocketServer struct {
	WebSocketMultiplayerPeer
}

func (o *WebSocketServer) BaseClass() string {
	return "WebSocketServer"
}

/*

 */
func (o *WebSocketServer) HasPeer(id gdnative.Int) gdnative.Bool {
	log.Println("Calling WebSocketServer.HasPeer()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(id)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "has_peer", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *WebSocketServer) IsListening() gdnative.Bool {
	log.Println("Calling WebSocketServer.IsListening()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_listening", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *WebSocketServer) Listen(port gdnative.Int, protocols *PoolStringArray, gdMpApi gdnative.Bool) gdnative.Int {
	log.Println("Calling WebSocketServer.Listen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(port)
	goArguments[1] = reflect.ValueOf(protocols)
	goArguments[2] = reflect.ValueOf(gdMpApi)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "listen", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*

 */
func (o *WebSocketServer) Stop() {
	log.Println("Calling WebSocketServer.Stop()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "stop", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   WebSocketServerImplementer is an interface for WebSocketServer objects.
*/
type WebSocketServerImplementer interface {
	Class
}
