package websocket

import (
	"log"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*

 */
type WebSocketServer struct {
}

func (o *WebSocketServer) BaseClass() string {
	return "WebSocketServer"
}

/*

 */
func (o *WebSocketServer) HasPeer(id gdnative.Int) gdnative.Bool {
	log.Println("Calling WebSocketServer.HasPeer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "has_peer")

	// Call the parent method.
	// bool
	retPtr := NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	log.Println("  Got return value: ", returnValue)
	return ret

}

/*

 */
func (o *WebSocketServer) IsListening() gdnative.Bool {
	log.Println("Calling WebSocketServer.IsListening()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "is_listening")

	// Call the parent method.
	// bool
	retPtr := NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	log.Println("  Got return value: ", returnValue)
	return ret

}

/*

 */
func (o *WebSocketServer) Listen(port gdnative.Int, protocols *PoolStringArray, gdMpApi gdnative.Bool) gdnative.Int {
	log.Println("Calling WebSocketServer.Listen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)
	ptrArguments[1] = gdnative.NewPointerFromPoolStringArray(protocols)
	ptrArguments[2] = gdnative.NewPointerFromBool(gdMpApi)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "listen")

	// Call the parent method.
	// enum.Error
	retPtr := NewEmpty()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewFromPointer(retPtr)
	log.Println("  Got return value: ", returnValue)
	return ret

}

/*

 */
func (o *WebSocketServer) Stop() {
	log.Println("Calling WebSocketServer.Stop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "stop")

	// Call the parent method.
	// void
	retPtr := NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

}

/*
   WebSocketServerImplementer is an interface for WebSocketServer objects.
*/
type WebSocketServerImplementer interface {
	Class
}
