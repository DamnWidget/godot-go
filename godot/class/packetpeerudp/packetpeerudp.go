package packetpeerudp

import (
	"log"
	"reflect"

	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
UDP packet peer. Can be used to send raw UDP packets as well as [Variant]s.
*/
type PacketPeerUDP struct {
	PacketPeer
}

func (o *PacketPeerUDP) BaseClass() string {
	return "PacketPeerUDP"
}

/*
   Close the UDP socket the [code]PacketPeerUDP[/code] is currently listening on.
*/
func (o *PacketPeerUDP) Close() {
	log.Println("Calling PacketPeerUDP.Close()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "close", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Return the IP of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).
*/
func (o *PacketPeerUDP) GetPacketIp() gdnative.String {
	log.Println("Calling PacketPeerUDP.GetPacketIp()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_packet_ip", goArguments, "gdnative.String")

	returnValue := goRet.Interface().(gdnative.String)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the port of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).
*/
func (o *PacketPeerUDP) GetPacketPort() gdnative.Int {
	log.Println("Calling PacketPeerUDP.GetPacketPort()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_packet_port", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return whether this [code]PacketPeerUDP[/code] is listening.
*/
func (o *PacketPeerUDP) IsListening() gdnative.Bool {
	log.Println("Calling PacketPeerUDP.IsListening()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_listening", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Make this [code]PacketPeerUDP[/code] listen on the "port" binding to "bind_address" with a buffer size "recv_buf_size". If "bind_address" is set as "*" (default), the peer will listen on all available addresses (both IPv4 and IPv6). If "bind_address" is set as "0.0.0.0" (for IPv4) or "::" (for IPv6), the peer will listen on all available addresses matching that IP type. If "bind_address" is set to any valid address (e.g. "192.168.1.101", "::1", etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).
*/
func (o *PacketPeerUDP) Listen(port gdnative.Int, bindAddress gdnative.String, recvBufSize gdnative.Int) gdnative.Int {
	log.Println("Calling PacketPeerUDP.Listen()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 3, 3)
	goArguments[0] = reflect.ValueOf(port)
	goArguments[1] = reflect.ValueOf(bindAddress)
	goArguments[2] = reflect.ValueOf(recvBufSize)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "listen", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Set the destination address and port for sending packets and variables, a hostname will be resolved using if valid.
*/
func (o *PacketPeerUDP) SetDestAddress(host gdnative.String, port gdnative.Int) gdnative.Int {
	log.Println("Calling PacketPeerUDP.SetDestAddress()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(host)
	goArguments[1] = reflect.ValueOf(port)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "set_dest_address", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Wait for a packet to arrive on the listening port, see [method listen].
*/
func (o *PacketPeerUDP) Wait() gdnative.Int {
	log.Println("Calling PacketPeerUDP.Wait()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "wait", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   PacketPeerUDPImplementer is an interface for PacketPeerUDP objects.
*/
type PacketPeerUDPImplementer interface {
	Class
}
