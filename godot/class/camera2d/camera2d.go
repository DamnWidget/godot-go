package camera2d

import (
	"log"
	"reflect"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem] based nodes. This node is intended to be a simple helper to get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [Node2D] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [Viewport].
*/
type Camera2D struct {
	Node2D
}

func (o *Camera2D) BaseClass() string {
	return "Camera2D"
}

/*
   Undocumented
*/
func (o *Camera2D) X_MakeCurrent(arg0 *Object) {
	log.Println("Calling Camera2D.X_MakeCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(arg0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_make_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) X_SetCurrent(current gdnative.Bool) {
	log.Println("Calling Camera2D.X_SetCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(current)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) X_SetOldSmoothing(followSmoothing gdnative.Float) {
	log.Println("Calling Camera2D.X_SetOldSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(followSmoothing)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_set_old_smoothing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) X_UpdateScroll() {
	log.Println("Calling Camera2D.X_UpdateScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "_update_scroll", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Align the camera to the tracked node
*/
func (o *Camera2D) Align() {
	log.Println("Calling Camera2D.Align()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "align", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Removes any [code]Camera2D[/code] from the ancestor [Viewport]'s internal currently-assigned camera.
*/
func (o *Camera2D) ClearCurrent() {
	log.Println("Calling Camera2D.ClearCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "clear_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Force the camera to update scroll immediately.
*/
func (o *Camera2D) ForceUpdateScroll() {
	log.Println("Calling Camera2D.ForceUpdateScroll()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "force_update_scroll", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) GetAnchorMode() gdnative.Int {
	log.Println("Calling Camera2D.GetAnchorMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_anchor_mode", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Return the camera position.
*/
func (o *Camera2D) GetCameraPosition() *Vector2 {
	log.Println("Calling Camera2D.GetCameraPosition()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_camera_position", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Returns the location of the [code]Camera2D[/code]'s screen-center, relative to the origin.
*/
func (o *Camera2D) GetCameraScreenCenter() *Vector2 {
	log.Println("Calling Camera2D.GetCameraScreenCenter()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_camera_screen_center", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) GetCustomViewport() *Node {
	log.Println("Calling Camera2D.GetCustomViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_custom_viewport", goArguments, "*Node")

	returnValue := goRet.Interface().(*Node)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) GetDragMargin(margin gdnative.Int) gdnative.Float {
	log.Println("Calling Camera2D.GetDragMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_drag_margin", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) GetFollowSmoothing() gdnative.Float {
	log.Println("Calling Camera2D.GetFollowSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_follow_smoothing", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) GetHOffset() gdnative.Float {
	log.Println("Calling Camera2D.GetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_h_offset", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) GetLimit(margin gdnative.Int) gdnative.Int {
	log.Println("Calling Camera2D.GetLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(margin)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_limit", goArguments, "gdnative.Int")

	returnValue := goRet.Interface().(gdnative.Int)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) GetOffset() *Vector2 {
	log.Println("Calling Camera2D.GetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_offset", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) GetVOffset() gdnative.Float {
	log.Println("Calling Camera2D.GetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_v_offset", goArguments, "gdnative.Float")

	returnValue := goRet.Interface().(gdnative.Float)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) GetZoom() *Vector2 {
	log.Println("Calling Camera2D.GetZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "get_zoom", goArguments, "*Vector2")

	returnValue := goRet.Interface().(*Vector2)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) IsCurrent() gdnative.Bool {
	log.Println("Calling Camera2D.IsCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_current", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) IsFollowSmoothingEnabled() gdnative.Bool {
	log.Println("Calling Camera2D.IsFollowSmoothingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_follow_smoothing_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) IsHDragEnabled() gdnative.Bool {
	log.Println("Calling Camera2D.IsHDragEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_h_drag_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) IsLimitDrawingEnabled() gdnative.Bool {
	log.Println("Calling Camera2D.IsLimitDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_limit_drawing_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) IsLimitSmoothingEnabled() gdnative.Bool {
	log.Println("Calling Camera2D.IsLimitSmoothingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_limit_smoothing_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) IsMarginDrawingEnabled() gdnative.Bool {
	log.Println("Calling Camera2D.IsMarginDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_margin_drawing_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) IsRotating() gdnative.Bool {
	log.Println("Calling Camera2D.IsRotating()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_rotating", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) IsScreenDrawingEnabled() gdnative.Bool {
	log.Println("Calling Camera2D.IsScreenDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_screen_drawing_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Undocumented
*/
func (o *Camera2D) IsVDragEnabled() gdnative.Bool {
	log.Println("Calling Camera2D.IsVDragEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	goRet := o.callParentMethod(o.BaseClass(), "is_v_drag_enabled", goArguments, "gdnative.Bool")

	returnValue := goRet.Interface().(gdnative.Bool)

	log.Println("  Got return value: ", returnValue)
	return returnValue

}

/*
   Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.
*/
func (o *Camera2D) MakeCurrent() {
	log.Println("Calling Camera2D.MakeCurrent()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "make_current", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Set the camera's position immediately to its current smoothing destination. This has no effect if smoothing is disabled.
*/
func (o *Camera2D) ResetSmoothing() {
	log.Println("Calling Camera2D.ResetSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 0, 0)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "reset_smoothing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetAnchorMode(anchorMode gdnative.Int) {
	log.Println("Calling Camera2D.SetAnchorMode()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(anchorMode)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_anchor_mode", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetCustomViewport(viewport *Object) {
	log.Println("Calling Camera2D.SetCustomViewport()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(viewport)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_custom_viewport", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetDragMargin(margin gdnative.Int, dragMargin gdnative.Float) {
	log.Println("Calling Camera2D.SetDragMargin()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(margin)
	goArguments[1] = reflect.ValueOf(dragMargin)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_drag_margin", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetEnableFollowSmoothing(followSmoothing gdnative.Bool) {
	log.Println("Calling Camera2D.SetEnableFollowSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(followSmoothing)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_enable_follow_smoothing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetFollowSmoothing(followSmoothing gdnative.Float) {
	log.Println("Calling Camera2D.SetFollowSmoothing()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(followSmoothing)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_follow_smoothing", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetHDragEnabled(enabled gdnative.Bool) {
	log.Println("Calling Camera2D.SetHDragEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_h_drag_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetHOffset(ofs gdnative.Float) {
	log.Println("Calling Camera2D.SetHOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_h_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetLimit(margin gdnative.Int, limit gdnative.Int) {
	log.Println("Calling Camera2D.SetLimit()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 2, 2)
	goArguments[0] = reflect.ValueOf(margin)
	goArguments[1] = reflect.ValueOf(limit)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_limit", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetLimitDrawingEnabled(limitDrawingEnabled gdnative.Bool) {
	log.Println("Calling Camera2D.SetLimitDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(limitDrawingEnabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_limit_drawing_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetLimitSmoothingEnabled(limitSmoothingEnabled gdnative.Bool) {
	log.Println("Calling Camera2D.SetLimitSmoothingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(limitSmoothingEnabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_limit_smoothing_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetMarginDrawingEnabled(marginDrawingEnabled gdnative.Bool) {
	log.Println("Calling Camera2D.SetMarginDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(marginDrawingEnabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_margin_drawing_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetOffset(offset *Vector2) {
	log.Println("Calling Camera2D.SetOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(offset)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetRotating(rotating gdnative.Bool) {
	log.Println("Calling Camera2D.SetRotating()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(rotating)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_rotating", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetScreenDrawingEnabled(screenDrawingEnabled gdnative.Bool) {
	log.Println("Calling Camera2D.SetScreenDrawingEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(screenDrawingEnabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_screen_drawing_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetVDragEnabled(enabled gdnative.Bool) {
	log.Println("Calling Camera2D.SetVDragEnabled()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(enabled)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_v_drag_enabled", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetVOffset(ofs gdnative.Float) {
	log.Println("Calling Camera2D.SetVOffset()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(ofs)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_v_offset", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Undocumented
*/
func (o *Camera2D) SetZoom(zoom *Vector2) {
	log.Println("Calling Camera2D.SetZoom()")

	// Build out the method's arguments
	goArguments := make([]reflect.Value, 1, 1)
	goArguments[0] = reflect.ValueOf(zoom)

	// Call the parent method.

	o.callParentMethod(o.BaseClass(), "set_zoom", goArguments, "")

	log.Println("  Function successfully completed.")

}

/*
   Camera2DImplementer is an interface for Camera2D objects.
*/
type Camera2DImplementer interface {
	Class
}
