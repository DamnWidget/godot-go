package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewUndoRedoFromPointer(ptr gdnative.Pointer) UndoRedo {
func newUndoRedoFromPointer(ptr gdnative.Pointer) UndoRedo {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := UndoRedo{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Helper to manage UndoRedo in the editor or custom tools. It works by storing calls to functions in both 'do' an 'undo' lists. Common behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.
*/
type UndoRedo struct {
	Object
	owner gdnative.Object
}

func (o *UndoRedo) BaseClass() string {
	return "UndoRedo"
}

/*

	Args: [{ false object Object} { false method String}], Returns: Variant
*/
func (o *UndoRedo) AddDoMethod(object Object, method gdnative.String) gdnative.Variant {
	//log.Println("Calling UndoRedo.AddDoMethod()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "add_do_method")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Set a property with a custom value.
	Args: [{ false object Object} { false property String} { false value Variant}], Returns: void
*/
func (o *UndoRedo) AddDoProperty(object Object, property gdnative.String, value gdnative.Variant) {
	//log.Println("Calling UndoRedo.AddDoProperty()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(property)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "add_do_property")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Add a 'do' reference that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.
	Args: [{ false object Object}], Returns: void
*/
func (o *UndoRedo) AddDoReference(object Object) {
	//log.Println("Calling UndoRedo.AddDoReference()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "add_do_reference")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false object Object} { false method String}], Returns: Variant
*/
func (o *UndoRedo) AddUndoMethod(object Object, method gdnative.String) gdnative.Variant {
	//log.Println("Calling UndoRedo.AddUndoMethod()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "add_undo_method")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undo setting of a property with a custom value.
	Args: [{ false object Object} { false property String} { false value Variant}], Returns: void
*/
func (o *UndoRedo) AddUndoProperty(object Object, property gdnative.String, value gdnative.Variant) {
	//log.Println("Calling UndoRedo.AddUndoProperty()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(property)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "add_undo_property")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Add an 'undo' reference that will be erased if the 'undo' history is lost. This is useful mostly for nodes removed with the 'do' call (not the 'undo' call!).
	Args: [{ false object Object}], Returns: void
*/
func (o *UndoRedo) AddUndoReference(object Object) {
	//log.Println("Calling UndoRedo.AddUndoReference()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "add_undo_reference")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clear the undo/redo history and associated references.
	Args: [], Returns: void
*/
func (o *UndoRedo) ClearHistory() {
	//log.Println("Calling UndoRedo.ClearHistory()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "clear_history")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Commit the action. All 'do' methods/properties are called/set when this function is called.
	Args: [], Returns: void
*/
func (o *UndoRedo) CommitAction() {
	//log.Println("Calling UndoRedo.CommitAction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "commit_action")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property] and [method add_undo_property].
	Args: [{ false name String} {0 true merge_mode int}], Returns: void
*/
func (o *UndoRedo) CreateAction(name gdnative.String, mergeMode gdnative.Int) {
	//log.Println("Calling UndoRedo.CreateAction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(name)
	ptrArguments[1] = gdnative.NewPointerFromInt(mergeMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "create_action")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Get the name of the current action.
	Args: [], Returns: String
*/
func (o *UndoRedo) GetCurrentActionName() gdnative.String {
	//log.Println("Calling UndoRedo.GetCurrentActionName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "get_current_action_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Get the version, each time a new action is committed, the version number of the UndoRedo is increased automatically. This is useful mostly to check if something changed from a saved version.
	Args: [], Returns: int
*/
func (o *UndoRedo) GetVersion() gdnative.Int {
	//log.Println("Calling UndoRedo.GetVersion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "get_version")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: void
*/
func (o *UndoRedo) Redo() {
	//log.Println("Calling UndoRedo.Redo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "redo")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *UndoRedo) Undo() {
	//log.Println("Calling UndoRedo.Undo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("UndoRedo", "undo")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// UndoRedoImplementer is an interface that implements the methods
// of the UndoRedo class.
type UndoRedoImplementer interface {
	ObjectImplementer
	AddDoMethod(object Object, method gdnative.String) gdnative.Variant
	AddDoProperty(object Object, property gdnative.String, value gdnative.Variant)
	AddDoReference(object Object)
	AddUndoMethod(object Object, method gdnative.String) gdnative.Variant
	AddUndoProperty(object Object, property gdnative.String, value gdnative.Variant)
	AddUndoReference(object Object)
	ClearHistory()
	CommitAction()
	CreateAction(name gdnative.String, mergeMode gdnative.Int)
	GetCurrentActionName() gdnative.String
	GetVersion() gdnative.Int
	Redo()
	Undo()
}
