package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// EditorPluginCustomControlContainer is an enum for CustomControlContainer values.
type EditorPluginCustomControlContainer int

const (
	EditorPluginContainerCanvasEditorBottom   EditorPluginCustomControlContainer = 6
	EditorPluginContainerCanvasEditorMenu     EditorPluginCustomControlContainer = 4
	EditorPluginContainerCanvasEditorSide     EditorPluginCustomControlContainer = 5
	EditorPluginContainerPropertyEditorBottom EditorPluginCustomControlContainer = 7
	EditorPluginContainerSpatialEditorBottom  EditorPluginCustomControlContainer = 3
	EditorPluginContainerSpatialEditorMenu    EditorPluginCustomControlContainer = 1
	EditorPluginContainerSpatialEditorSide    EditorPluginCustomControlContainer = 2
	EditorPluginContainerToolbar              EditorPluginCustomControlContainer = 0
)

// EditorPluginDockSlot is an enum for DockSlot values.
type EditorPluginDockSlot int

const (
	EditorPluginDockSlotLeftBl  EditorPluginDockSlot = 1
	EditorPluginDockSlotLeftBr  EditorPluginDockSlot = 3
	EditorPluginDockSlotLeftUl  EditorPluginDockSlot = 0
	EditorPluginDockSlotLeftUr  EditorPluginDockSlot = 2
	EditorPluginDockSlotMax     EditorPluginDockSlot = 8
	EditorPluginDockSlotRightBl EditorPluginDockSlot = 5
	EditorPluginDockSlotRightBr EditorPluginDockSlot = 7
	EditorPluginDockSlotRightUl EditorPluginDockSlot = 4
	EditorPluginDockSlotRightUr EditorPluginDockSlot = 6
)

//func NewEditorPluginFromPointer(ptr gdnative.Pointer) EditorPlugin {
func newEditorPluginFromPointer(ptr gdnative.Pointer) EditorPlugin {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorPlugin{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins.
*/
type EditorPlugin struct {
	Node
	owner gdnative.Object
}

func (o *EditorPlugin) BaseClass() string {
	return "EditorPlugin"
}

/*
        Add a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_bottom_panel].
	Args: [{ false control Object} { false title String}], Returns: ToolButton
*/
func (o *EditorPlugin) AddControlToBottomPanel(control ObjectImplementer, title gdnative.String) ToolButtonImplementer {
	//log.Println("Calling EditorPlugin.AddControlToBottomPanel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(control.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(title)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "add_control_to_bottom_panel")

	// Call the parent method.
	// ToolButton
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newToolButtonFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ToolButtonImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "ToolButton" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ToolButtonImplementer)
	}

	return &ret
}

/*
        Add a custom control to a container (see CONTAINER_* enum). There are many locations where custom controls can be added in the editor UI. Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it). If your plugin is being removed, also make sure to remove your custom controls too.
	Args: [{ false container int} { false control Object}], Returns: void
*/
func (o *EditorPlugin) AddControlToContainer(container gdnative.Int, control ObjectImplementer) {
	//log.Println("Calling EditorPlugin.AddControlToContainer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(container)
	ptrArguments[1] = gdnative.NewPointerFromObject(control.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "add_control_to_container")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Add the control to a specific dock slot (see DOCK_* enum for options). If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions. If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_docks].
	Args: [{ false slot int} { false control Object}], Returns: void
*/
func (o *EditorPlugin) AddControlToDock(slot gdnative.Int, control ObjectImplementer) {
	//log.Println("Calling EditorPlugin.AddControlToDock()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(slot)
	ptrArguments[1] = gdnative.NewPointerFromObject(control.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "add_control_to_dock")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Add a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed. When given node or resource is selected, the base type will be instanced (ie, "Spatial", "Control", "Resource"), then the script will be loaded and set to this object. You can use the [method EditorPlugin.handles] to check if your custom object is being edited by checking the script or using 'is' keyword. During run-time, this will be a simple object with a script so this function does not need to be called then.
	Args: [{ false type String} { false base String} { false script Script} { false icon Texture}], Returns: void
*/
func (o *EditorPlugin) AddCustomType(aType gdnative.String, base gdnative.String, script ScriptImplementer, icon TextureImplementer) {
	//log.Println("Calling EditorPlugin.AddCustomType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(aType)
	ptrArguments[1] = gdnative.NewPointerFromString(base)
	ptrArguments[2] = gdnative.NewPointerFromObject(script.GetBaseObject())
	ptrArguments[3] = gdnative.NewPointerFromObject(icon.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "add_custom_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false exporter EditorExportPlugin}], Returns: void
*/
func (o *EditorPlugin) AddExportPlugin(exporter EditorExportPluginImplementer) {
	//log.Println("Calling EditorPlugin.AddExportPlugin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(exporter.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "add_export_plugin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false importer EditorImportPlugin}], Returns: void
*/
func (o *EditorPlugin) AddImportPlugin(importer EditorImportPluginImplementer) {
	//log.Println("Calling EditorPlugin.AddImportPlugin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(importer.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "add_import_plugin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false scene_importer EditorSceneImporter}], Returns: void
*/
func (o *EditorPlugin) AddSceneImportPlugin(sceneImporter EditorSceneImporterImplementer) {
	//log.Println("Calling EditorPlugin.AddSceneImportPlugin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(sceneImporter.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "add_scene_import_plugin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false name String} { false submenu Object}], Returns: void
*/
func (o *EditorPlugin) AddToolSubmenuItem(name gdnative.String, submenu ObjectImplementer) {
	//log.Println("Calling EditorPlugin.AddToolSubmenuItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(name)
	ptrArguments[1] = gdnative.NewPointerFromObject(submenu.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "add_tool_submenu_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency. This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.
	Args: [], Returns: void
*/
func (o *EditorPlugin) ApplyChanges() {
	//log.Println("Calling EditorPlugin.ApplyChanges()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "apply_changes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.
	Args: [], Returns: void
*/
func (o *EditorPlugin) Clear() {
	//log.Println("Calling EditorPlugin.Clear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        This is used for plugins that create gizmos used by the spatial editor. Just check that the node passed in the "for_spatial" argument matches your plugin.
	Args: [{ false for_spatial Spatial}], Returns: EditorSpatialGizmo
*/
func (o *EditorPlugin) CreateSpatialGizmo(forSpatial SpatialImplementer) EditorSpatialGizmoImplementer {
	//log.Println("Calling EditorPlugin.CreateSpatialGizmo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(forSpatial.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "create_spatial_gizmo")

	// Call the parent method.
	// EditorSpatialGizmo
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newEditorSpatialGizmoFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(EditorSpatialGizmoImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "EditorSpatialGizmo" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(EditorSpatialGizmoImplementer)
	}

	return &ret
}

/*
        This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.
	Args: [{ false object Object}], Returns: void
*/
func (o *EditorPlugin) Edit(object ObjectImplementer) {
	//log.Println("Calling EditorPlugin.Edit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "edit")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false event InputEvent}], Returns: bool
*/
func (o *EditorPlugin) ForwardCanvasGuiInput(event InputEventImplementer) gdnative.Bool {
	//log.Println("Calling EditorPlugin.ForwardCanvasGuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(event.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "forward_canvas_gui_input")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false overlay Control}], Returns: void
*/
func (o *EditorPlugin) ForwardDrawOverViewport(overlay ControlImplementer) {
	//log.Println("Calling EditorPlugin.ForwardDrawOverViewport()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(overlay.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "forward_draw_over_viewport")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false overlay Control}], Returns: void
*/
func (o *EditorPlugin) ForwardForceDrawOverViewport(overlay ControlImplementer) {
	//log.Println("Calling EditorPlugin.ForwardForceDrawOverViewport()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(overlay.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "forward_force_draw_over_viewport")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Implement this function if you are interested in 3D view screen input events. It will be called only if currently selected node is handled by your plugin. If you would like to always gets those input events then additionally use [method set_input_forwarding_always_enabled].
	Args: [{ false camera Camera} { false event InputEvent}], Returns: bool
*/
func (o *EditorPlugin) ForwardSpatialGuiInput(camera CameraImplementer, event InputEventImplementer) gdnative.Bool {
	//log.Println("Calling EditorPlugin.ForwardSpatialGuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(camera.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromObject(event.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "forward_spatial_gui_input")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        This is for editors that edit script based objects. You can return a list of breakpoints in the format (script:line), for example: res://path_to_script.gd:25
	Args: [], Returns: PoolStringArray
*/
func (o *EditorPlugin) GetBreakpoints() gdnative.PoolStringArray {
	//log.Println("Calling EditorPlugin.GetBreakpoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "get_breakpoints")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: EditorInterface
*/
func (o *EditorPlugin) GetEditorInterface() EditorInterfaceImplementer {
	//log.Println("Calling EditorPlugin.GetEditorInterface()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "get_editor_interface")

	// Call the parent method.
	// EditorInterface
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newEditorInterfaceFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(EditorInterfaceImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "EditorInterface" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(EditorInterfaceImplementer)
	}

	return &ret
}

/*

	Args: [], Returns: Object
*/
func (o *EditorPlugin) GetPluginIcon() ObjectImplementer {
	//log.Println("Calling EditorPlugin.GetPluginIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "get_plugin_icon")

	// Call the parent method.
	// Object
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newObjectFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ObjectImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Object" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ObjectImplementer)
	}

	return &ret
}

/*

	Args: [], Returns: String
*/
func (o *EditorPlugin) GetPluginName() gdnative.String {
	//log.Println("Calling EditorPlugin.GetPluginName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "get_plugin_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Get the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).
	Args: [], Returns: Dictionary
*/
func (o *EditorPlugin) GetState() gdnative.Dictionary {
	//log.Println("Calling EditorPlugin.GetState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "get_state")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Get the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.
	Args: [], Returns: UndoRedo
*/
func (o *EditorPlugin) GetUndoRedo() UndoRedoImplementer {
	//log.Println("Calling EditorPlugin.GetUndoRedo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "get_undo_redo")

	// Call the parent method.
	// UndoRedo
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newUndoRedoFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(UndoRedoImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "UndoRedo" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(UndoRedoImplementer)
	}

	return &ret
}

/*
        Get the GUI layout of the plugin. This is used to save the project's editor layout when the [method EditorPlugin.queue_save_layout] is called or the editor layout was changed(For example changing the position of a dock).
	Args: [{ false layout ConfigFile}], Returns: void
*/
func (o *EditorPlugin) GetWindowLayout(layout ConfigFileImplementer) {
	//log.Println("Calling EditorPlugin.GetWindowLayout()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(layout.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "get_window_layout")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Implement this function if your plugin edits a specific type of object (Resource or Node). If you return true, then you will get the functions [method EditorPlugin.edit] and [method EditorPlugin.make_visible] called when the editor requests them.
	Args: [{ false object Object}], Returns: bool
*/
func (o *EditorPlugin) Handles(object ObjectImplementer) gdnative.Bool {
	//log.Println("Calling EditorPlugin.Handles()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(object.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "handles")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Return true if this is a main screen editor plugin (it goes in the main screen selector together with 2D, 3D, Script).
	Args: [], Returns: bool
*/
func (o *EditorPlugin) HasMainScreen() gdnative.Bool {
	//log.Println("Calling EditorPlugin.HasMainScreen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "has_main_screen")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: void
*/
func (o *EditorPlugin) HideBottomPanel() {
	//log.Println("Calling EditorPlugin.HideBottomPanel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "hide_bottom_panel")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false item Object}], Returns: void
*/
func (o *EditorPlugin) MakeBottomPanelItemVisible(item ObjectImplementer) {
	//log.Println("Calling EditorPlugin.MakeBottomPanelItemVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(item.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "make_bottom_panel_item_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type. Remember that you have to manage the visibility of all your editor controls manually.
	Args: [{ false visible bool}], Returns: void
*/
func (o *EditorPlugin) MakeVisible(visible gdnative.Bool) {
	//log.Println("Calling EditorPlugin.MakeVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(visible)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "make_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Queue save the project's editor layout.
	Args: [], Returns: void
*/
func (o *EditorPlugin) QueueSaveLayout() {
	//log.Println("Calling EditorPlugin.QueueSaveLayout()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "queue_save_layout")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remove the control from the bottom panel. Don't forget to call this if you added one, so the editor can remove it cleanly.
	Args: [{ false control Object}], Returns: void
*/
func (o *EditorPlugin) RemoveControlFromBottomPanel(control ObjectImplementer) {
	//log.Println("Calling EditorPlugin.RemoveControlFromBottomPanel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(control.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "remove_control_from_bottom_panel")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remove the control from the specified container. Use it when cleaning up after adding a control with [method add_control_to_container]. Note that you can simply free the control if you won't use it anymore.
	Args: [{ false container int} { false control Object}], Returns: void
*/
func (o *EditorPlugin) RemoveControlFromContainer(container gdnative.Int, control ObjectImplementer) {
	//log.Println("Calling EditorPlugin.RemoveControlFromContainer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(container)
	ptrArguments[1] = gdnative.NewPointerFromObject(control.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "remove_control_from_container")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remove the control from the dock. Don't forget to call this if you added one, so the editor can save the layout and remove it cleanly.
	Args: [{ false control Object}], Returns: void
*/
func (o *EditorPlugin) RemoveControlFromDocks(control ObjectImplementer) {
	//log.Println("Calling EditorPlugin.RemoveControlFromDocks()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(control.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "remove_control_from_docks")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remove a custom type added by [method EditorPlugin.add_custom_type]
	Args: [{ false type String}], Returns: void
*/
func (o *EditorPlugin) RemoveCustomType(aType gdnative.String) {
	//log.Println("Calling EditorPlugin.RemoveCustomType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "remove_custom_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false exporter EditorExportPlugin}], Returns: void
*/
func (o *EditorPlugin) RemoveExportPlugin(exporter EditorExportPluginImplementer) {
	//log.Println("Calling EditorPlugin.RemoveExportPlugin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(exporter.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "remove_export_plugin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false importer EditorImportPlugin}], Returns: void
*/
func (o *EditorPlugin) RemoveImportPlugin(importer EditorImportPluginImplementer) {
	//log.Println("Calling EditorPlugin.RemoveImportPlugin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(importer.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "remove_import_plugin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false scene_importer EditorSceneImporter}], Returns: void
*/
func (o *EditorPlugin) RemoveSceneImportPlugin(sceneImporter EditorSceneImporterImplementer) {
	//log.Println("Calling EditorPlugin.RemoveSceneImportPlugin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(sceneImporter.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "remove_scene_import_plugin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.
	Args: [], Returns: void
*/
func (o *EditorPlugin) SaveExternalData() {
	//log.Println("Calling EditorPlugin.SaveExternalData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "save_external_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *EditorPlugin) SetForceDrawOverForwardingEnabled() {
	//log.Println("Calling EditorPlugin.SetForceDrawOverForwardingEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "set_force_draw_over_forwarding_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Use this method if you always want to receive inputs from 3D view screen inside [method forward_spatial_gui_input]. It might be especially usable if your plugin will want to use raycast in the scene.
	Args: [], Returns: void
*/
func (o *EditorPlugin) SetInputEventForwardingAlwaysEnabled() {
	//log.Println("Calling EditorPlugin.SetInputEventForwardingAlwaysEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "set_input_event_forwarding_always_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Restore the state saved by [method EditorPlugin.get_state].
	Args: [{ false state Dictionary}], Returns: void
*/
func (o *EditorPlugin) SetState(state gdnative.Dictionary) {
	//log.Println("Calling EditorPlugin.SetState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromDictionary(state)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "set_state")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Restore the plugin GUI layout saved by [method EditorPlugin.get_window_layout].
	Args: [{ false layout ConfigFile}], Returns: void
*/
func (o *EditorPlugin) SetWindowLayout(layout ConfigFileImplementer) {
	//log.Println("Calling EditorPlugin.SetWindowLayout()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(layout.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "set_window_layout")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: int
*/
func (o *EditorPlugin) UpdateOverlays() gdnative.Int {
	//log.Println("Calling EditorPlugin.UpdateOverlays()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorPlugin", "update_overlays")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

// EditorPluginImplementer is an interface that implements the methods
// of the EditorPlugin class.
type EditorPluginImplementer interface {
	NodeImplementer
	AddControlToBottomPanel(control ObjectImplementer, title gdnative.String) ToolButtonImplementer
	AddControlToContainer(container gdnative.Int, control ObjectImplementer)
	AddControlToDock(slot gdnative.Int, control ObjectImplementer)
	AddCustomType(aType gdnative.String, base gdnative.String, script ScriptImplementer, icon TextureImplementer)
	AddExportPlugin(exporter EditorExportPluginImplementer)
	AddImportPlugin(importer EditorImportPluginImplementer)
	AddSceneImportPlugin(sceneImporter EditorSceneImporterImplementer)
	AddToolSubmenuItem(name gdnative.String, submenu ObjectImplementer)
	ApplyChanges()
	Clear()
	CreateSpatialGizmo(forSpatial SpatialImplementer) EditorSpatialGizmoImplementer
	Edit(object ObjectImplementer)
	ForwardCanvasGuiInput(event InputEventImplementer) gdnative.Bool
	ForwardDrawOverViewport(overlay ControlImplementer)
	ForwardForceDrawOverViewport(overlay ControlImplementer)
	ForwardSpatialGuiInput(camera CameraImplementer, event InputEventImplementer) gdnative.Bool
	GetBreakpoints() gdnative.PoolStringArray
	GetEditorInterface() EditorInterfaceImplementer
	GetPluginIcon() ObjectImplementer
	GetPluginName() gdnative.String
	GetState() gdnative.Dictionary
	GetUndoRedo() UndoRedoImplementer
	GetWindowLayout(layout ConfigFileImplementer)
	Handles(object ObjectImplementer) gdnative.Bool
	HasMainScreen() gdnative.Bool
	HideBottomPanel()
	MakeBottomPanelItemVisible(item ObjectImplementer)
	MakeVisible(visible gdnative.Bool)
	QueueSaveLayout()
	RemoveControlFromBottomPanel(control ObjectImplementer)
	RemoveControlFromContainer(container gdnative.Int, control ObjectImplementer)
	RemoveControlFromDocks(control ObjectImplementer)
	RemoveCustomType(aType gdnative.String)
	RemoveExportPlugin(exporter EditorExportPluginImplementer)
	RemoveImportPlugin(importer EditorImportPluginImplementer)
	RemoveSceneImportPlugin(sceneImporter EditorSceneImporterImplementer)
	SaveExternalData()
	SetForceDrawOverForwardingEnabled()
	SetInputEventForwardingAlwaysEnabled()
	SetState(state gdnative.Dictionary)
	SetWindowLayout(layout ConfigFileImplementer)
	UpdateOverlays() gdnative.Int
}
