{{ $view := . }}{{ $API := $view.API -}}
package {{ $view.Package }}

import (
	"github.com/shadowapex/godot-go/gdnative"
	{{ range $i, $pkg := $view.GetImports }}
		"github.com/shadowapex/godot-go/godot/class/{{ $pkg }}"
	{{ end }}
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

func New{{ $view.SetClassName $API.Name $API.Singleton}}FromPointer(ptr gdnative.Pointer) *{{ $view.SetClassName $API.Name $API.Singleton }} {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := {{ $view.SetClassName $API.Name $API.Singleton }}{}
	obj.SetOwner(owner)

	return &obj

}

{{ if $API.Singleton -}}
    func newSingleton{{ $view.GoClassName $API.Name }}() *{{ $view.SetClassName $API.Name $API.Singleton}} {
        obj := &{{ $view.SetClassName $API.Name $API.Singleton }}{}
        ptr := C.godot_global_get_singleton(C.CString("{{ $API.Name }}"))
        obj.owner = (*C.godot_object)(ptr)
        return obj
    }
    /*
    {{ $view.ClassDoc $API.Name }}
    */
    var {{ $view.GoClassName $API.Name }} = newSingleton{{ $view.GoClassName $API.Name }}()
{{ end }}
/*
{{ $view.ClassDoc $API.Name }}
*/
type {{ $view.SetClassName $API.Name $API.Singleton }} struct {
    {{ if eq $API.Name "Object" }}
        owner gdnative.Object
    {{ else }}
	{{ if eq ($view.ResolvePackage $view.Package ($view.SetBaseClassName $API.BaseClass)) "" }}
		{{ $view.SetBaseClassName $API.BaseClass }}
	{{ else }}
		{{ $view.ResolvePackage $view.Package ($view.SetBaseClassName $API.BaseClass) }}.{{ $view.SetBaseClassName $API.BaseClass }}
	{{ end }}
    {{ end }}
}

func (o *{{ $view.SetClassName $API.Name $API.Singleton }}) BaseClass() string {
    return "{{ $API.Name }}"
}

{{ if $API.Methods }}
    {{ range $j, $method := $API.Methods }}
        /*
        {{ $view.MethodDoc $API.Name $method.Name }}
	Args: {{ $method.Arguments }}, Returns: {{ $method.ReturnType }}
        */
	{{/* Skip ENUM functions for now*/}}{{ if not ($view.IsEnum $method.ReturnType) }}
	    func (o *{{ $view.SetClassName $API.Name $API.Singleton }}) {{ $view.GoMethodName $method.Name }}({{ range $k, $arg := $method.Arguments }}{{ $view.GoArgName $arg.Name }} {{ $view.GoValue $view.Package $arg.Type }},{{ end }}) {{ if $method.ReturnType }}{{ $view.GoValue $view.Package $method.ReturnType }}{{ end }} {
                log.Println("Calling {{ $API.Name }}.{{ $view.GoMethodName $method.Name }}()")

                // Build out the method's arguments
                ptrArguments := make([]gdnative.Pointer, {{ len $method.Arguments }}, {{ len $method.Arguments }})
                {{ range $k, $arg := $method.Arguments -}}
	    	    {{ if ($view.IsGodotClass $arg.Type) -}}
	    	        ptrArguments[{{ $k }}] = gdnative.NewPointerFromObject({{ $view.GoArgName $arg.Name }}.GetOwner())
	    	    {{ else -}}
	    	        ptrArguments[{{ $k }}] = gdnative.NewPointerFrom{{ $view.GoName $arg.Type }}({{ $view.GoArgName $arg.Name }})
	            {{ end -}}
                {{ end }}

	        // Get the method bind 
	        methodBind := gdnative.NewMethodBind("{{ $API.Name }}", "{{ $method.Name }}")

                // Call the parent method.
	        // {{ $method.ReturnType }}
	        retPtr := {{ $view.GoEmptyReturnType $view.Package $method.ReturnType }}()
	        gdnative.MethodBindPtrCall(methodBind, o.GetOwner(), ptrArguments, retPtr)

               	{{ if $method.ReturnType }}
	    	    {{ $returnType := $view.GoValue $view.Package $method.ReturnType }}{{ if ne $returnType "" }}
	    		// If we have a return type, convert it from a pointer into its actual object. 
			{{ if $view.IsGodotClass $method.ReturnType -}}
		            {{ if eq ($view.ResolvePackage $view.Package $method.ReturnType) "" -}}
			        ret := New{{ $view.GoNewFromPointerType $method.ReturnType }}FromPointer(retPtr)
	                    {{ else -}}
				ret := {{ $view.ResolvePackage $view.Package $method.ReturnType }}.New{{ $view.GoNewFromPointerType $method.ReturnType }}FromPointer(retPtr)
			    {{ end -}}
		        {{ else -}}
			    ret := gdnative.New{{ $view.GoNewFromPointerType $method.ReturnType }}FromPointer(retPtr)
		        {{ end }}
                        log.Println("  Got return value: ", ret)
	    		return ret
                    {{ end -}}
                {{ else -}}
                    log.Println("  Function successfully completed.")
                {{ end -}}
            }
	{{ end }}
    {{ end }}
{{ end }}

{{ if eq $API.Name "Object" }}
    // SetOwner will internally set the Godot object inside the struct.
    // This is used to call parent methods.
    func (o *Object) SetOwner(object gdnative.Object) {
        o.owner = object
    }
    
    func (o *Object) GetOwner() gdnative.Object {
        return o.owner
    }
{{ end }}
