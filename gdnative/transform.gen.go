package gdnative

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "types.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
#include <gdnative/transform.h>
*/
import "C"

type Transform struct {
	base *C.godot_transform
}

func (t Transform) getBase() *C.godot_transform {
	return t.base
}

// GetBasis godot_transform_get_basis [[const godot_transform * p_self]] godot_basis
func (t *Transform) GetBasis() Basis {
	arg0 := t.getBase()

	ret := C.go_godot_transform_get_basis(GDNative.api, arg0)

	return Basis{base: ret}

}

// SetBasis godot_transform_set_basis [[godot_transform * p_self] [const godot_basis * p_v]] void
func (t *Transform) SetBasis(v Basis) {
	arg0 := t.getBase()
	arg1 := v.getBase()

	C.go_godot_transform_set_basis(GDNative.api, arg0, arg1)

}

// GetOrigin godot_transform_get_origin [[const godot_transform * p_self]] godot_vector3
func (t *Transform) GetOrigin() Vector3 {
	arg0 := t.getBase()

	ret := C.go_godot_transform_get_origin(GDNative.api, arg0)

	return Vector3{base: ret}

}

// SetOrigin godot_transform_set_origin [[godot_transform * p_self] [const godot_vector3 * p_v]] void
func (t *Transform) SetOrigin(v Vector3) {
	arg0 := t.getBase()
	arg1 := v.getBase()

	C.go_godot_transform_set_origin(GDNative.api, arg0, arg1)

}

// AsString godot_transform_as_string [[const godot_transform * p_self]] godot_string
func (t *Transform) AsString() String {
	arg0 := t.getBase()

	ret := C.go_godot_transform_as_string(GDNative.api, arg0)

	return String{base: ret}

}

// Inverse godot_transform_inverse [[const godot_transform * p_self]] godot_transform
func (t *Transform) Inverse() Transform {
	arg0 := t.getBase()

	ret := C.go_godot_transform_inverse(GDNative.api, arg0)

	return Transform{base: ret}

}

// AffineInverse godot_transform_affine_inverse [[const godot_transform * p_self]] godot_transform
func (t *Transform) AffineInverse() Transform {
	arg0 := t.getBase()

	ret := C.go_godot_transform_affine_inverse(GDNative.api, arg0)

	return Transform{base: ret}

}

// Orthonormalized godot_transform_orthonormalized [[const godot_transform * p_self]] godot_transform
func (t *Transform) Orthonormalized() Transform {
	arg0 := t.getBase()

	ret := C.go_godot_transform_orthonormalized(GDNative.api, arg0)

	return Transform{base: ret}

}

// Rotated godot_transform_rotated [[const godot_transform * p_self] [const godot_vector3 * p_axis] [const godot_real p_phi]] godot_transform
func (t *Transform) Rotated(axis Vector3, phi Real) Transform {
	arg0 := t.getBase()
	arg1 := axis.getBase()
	arg2 := phi.getBase()

	ret := C.go_godot_transform_rotated(GDNative.api, arg0, arg1, arg2)

	return Transform{base: ret}

}

// Scaled godot_transform_scaled [[const godot_transform * p_self] [const godot_vector3 * p_scale]] godot_transform
func (t *Transform) Scaled(scale Vector3) Transform {
	arg0 := t.getBase()
	arg1 := scale.getBase()

	ret := C.go_godot_transform_scaled(GDNative.api, arg0, arg1)

	return Transform{base: ret}

}

// Translated godot_transform_translated [[const godot_transform * p_self] [const godot_vector3 * p_ofs]] godot_transform
func (t *Transform) Translated(ofs Vector3) Transform {
	arg0 := t.getBase()
	arg1 := ofs.getBase()

	ret := C.go_godot_transform_translated(GDNative.api, arg0, arg1)

	return Transform{base: ret}

}

// LookingAt godot_transform_looking_at [[const godot_transform * p_self] [const godot_vector3 * p_target] [const godot_vector3 * p_up]] godot_transform
func (t *Transform) LookingAt(target Vector3, up Vector3) Transform {
	arg0 := t.getBase()
	arg1 := target.getBase()
	arg2 := up.getBase()

	ret := C.go_godot_transform_looking_at(GDNative.api, arg0, arg1, arg2)

	return Transform{base: ret}

}

// XformPlane godot_transform_xform_plane [[const godot_transform * p_self] [const godot_plane * p_v]] godot_plane
func (t *Transform) XformPlane(v Plane) Plane {
	arg0 := t.getBase()
	arg1 := v.getBase()

	ret := C.go_godot_transform_xform_plane(GDNative.api, arg0, arg1)

	return Plane{base: ret}

}

// XformInvPlane godot_transform_xform_inv_plane [[const godot_transform * p_self] [const godot_plane * p_v]] godot_plane
func (t *Transform) XformInvPlane(v Plane) Plane {
	arg0 := t.getBase()
	arg1 := v.getBase()

	ret := C.go_godot_transform_xform_inv_plane(GDNative.api, arg0, arg1)

	return Plane{base: ret}

}

// OperatorEqual godot_transform_operator_equal [[const godot_transform * p_self] [const godot_transform * p_b]] godot_bool
func (t *Transform) OperatorEqual(b Transform) Bool {
	arg0 := t.getBase()
	arg1 := b.getBase()

	ret := C.go_godot_transform_operator_equal(GDNative.api, arg0, arg1)

	return Bool{base: ret}

}

// OperatorMultiply godot_transform_operator_multiply [[const godot_transform * p_self] [const godot_transform * p_b]] godot_transform
func (t *Transform) OperatorMultiply(b Transform) Transform {
	arg0 := t.getBase()
	arg1 := b.getBase()

	ret := C.go_godot_transform_operator_multiply(GDNative.api, arg0, arg1)

	return Transform{base: ret}

}

// XformVector3 godot_transform_xform_vector3 [[const godot_transform * p_self] [const godot_vector3 * p_v]] godot_vector3
func (t *Transform) XformVector3(v Vector3) Vector3 {
	arg0 := t.getBase()
	arg1 := v.getBase()

	ret := C.go_godot_transform_xform_vector3(GDNative.api, arg0, arg1)

	return Vector3{base: ret}

}

// XformInvVector3 godot_transform_xform_inv_vector3 [[const godot_transform * p_self] [const godot_vector3 * p_v]] godot_vector3
func (t *Transform) XformInvVector3(v Vector3) Vector3 {
	arg0 := t.getBase()
	arg1 := v.getBase()

	ret := C.go_godot_transform_xform_inv_vector3(GDNative.api, arg0, arg1)

	return Vector3{base: ret}

}

// XformAabb godot_transform_xform_aabb [[const godot_transform * p_self] [const godot_aabb * p_v]] godot_aabb
func (t *Transform) XformAabb(v Aabb) Aabb {
	arg0 := t.getBase()
	arg1 := v.getBase()

	ret := C.go_godot_transform_xform_aabb(GDNative.api, arg0, arg1)

	return Aabb{base: ret}

}

// XformInvAabb godot_transform_xform_inv_aabb [[const godot_transform * p_self] [const godot_aabb * p_v]] godot_aabb
func (t *Transform) XformInvAabb(v Aabb) Aabb {
	arg0 := t.getBase()
	arg1 := v.getBase()

	ret := C.go_godot_transform_xform_inv_aabb(GDNative.api, arg0, arg1)

	return Aabb{base: ret}

}
