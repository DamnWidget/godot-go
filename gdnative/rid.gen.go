package gdnative

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "types.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
#include <gdnative/rid.h>
*/
import "C"

type Rid struct {
	base *C.godot_rid
}

func (t Rid) getBase() *C.godot_rid {
	return t.base
}

// GetId godot_rid_get_id [[const godot_rid * p_self]] godot_int
func (t *Rid) GetId() Int {
	arg0 := t.getBase()

	ret := C.go_godot_rid_get_id(GDNative.api, arg0)

	return Int{base: ret}

}

// OperatorEqual godot_rid_operator_equal [[const godot_rid * p_self] [const godot_rid * p_b]] godot_bool
func (t *Rid) OperatorEqual(b Rid) Bool {
	arg0 := t.getBase()
	arg1 := b.getBase()

	ret := C.go_godot_rid_operator_equal(GDNative.api, arg0, arg1)

	return Bool{base: ret}

}

// OperatorLess godot_rid_operator_less [[const godot_rid * p_self] [const godot_rid * p_b]] godot_bool
func (t *Rid) OperatorLess(b Rid) Bool {
	arg0 := t.getBase()
	arg1 := b.getBase()

	ret := C.go_godot_rid_operator_less(GDNative.api, arg0, arg1)

	return Bool{base: ret}

}
