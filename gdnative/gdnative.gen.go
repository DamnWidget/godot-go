package gdnative

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "types.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
#include "gdnative.gen.h"
#include <gdnative/gdnative.h>
// Include all headers for now. TODO: Look up all the required
// headers we need to import based on the method arguments and return types.
#include <gdnative/aabb.h>
#include <gdnative/array.h>
#include <gdnative/basis.h>
#include <gdnative/color.h>
#include <gdnative/dictionary.h>
#include <gdnative/gdnative.h>
#include <gdnative/node_path.h>
#include <gdnative/plane.h>
#include <gdnative/pool_arrays.h>
#include <gdnative/quat.h>
#include <gdnative/rect2.h>
#include <gdnative/rid.h>
#include <gdnative/string.h>
#include <gdnative/string_name.h>
#include <gdnative/transform.h>
#include <gdnative/transform2d.h>
#include <gdnative/variant.h>
#include <gdnative/vector2.h>
#include <gdnative/vector3.h>
#include <gdnative_api_struct.gen.h>
*/
import "C"
import "unsafe"

// Error is a Go wrapper for the C.godot_error enum type.
type Error int

func (e Error) getBase() C.godot_error {
	return C.godot_error(e)
}

const (
	Ok Error = iota
	Failed
	ErrUnavailable
	ErrUnconfigured
	ErrUnauthorized
	ErrOutOfMemory
	ErrFileNotFound
	ErrFileBadDrive
	ErrFileBadPath
	ErrFileAlreadyInUse
	ErrFileCantOpen
	ErrFileCantWrite
	ErrFileCantRead
	ErrFileCorrupt
	ErrFileMissingDependencies
	ErrFileEof
	ErrCantOpen
	ErrQueryFailed
	ErrAlreadyInUse
	ErrLocked
	ErrTimeout
	ErrCantResolve
	ErrConnectionError
	ErrCantAcquireResource
	ErrCantFork
	ErrInvalidParameter
	ErrAlreadyExists
	ErrDoesNotExist
	ErrDatabaseCantRead
	ErrCompilationFailed
	ErrMethodNotFound
	ErrLinkFailed
	ErrScriptFailed
	ErrInvalidDeclaration
	ErrDuplicateSymbol
	ErrParseError
	ErrBusy
	ErrHelp
	ErrBug
	ErrPrinterOnFire
)

// NewEmptyBool will return a pointer to an empty
// initialized Bool. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyBool() Pointer {
	var obj C.godot_bool
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromBool will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromBool(obj Bool) Pointer {
	base := obj.getBase()
	return Pointer{base: unsafe.Pointer(&base)}
}

// NewBoolFromPointer will return a Bool from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewBoolFromPointer(ptr Pointer) Bool {
	base := ptr.getBase()
	return Bool(*(*C.godot_bool)(base))
}

// Bool is a Go wrapper for the base C.godot_bool type
type Bool bool

func (t Bool) getBase() C.godot_bool {
	return C.godot_bool(t)
}

// NewEmptyInt will return a pointer to an empty
// initialized Int. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyInt() Pointer {
	var obj C.godot_int
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromInt will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromInt(obj Int) Pointer {
	base := obj.getBase()
	return Pointer{base: unsafe.Pointer(&base)}
}

// NewIntFromPointer will return a Int from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewIntFromPointer(ptr Pointer) Int {
	base := ptr.getBase()
	return Int(*(*C.godot_int)(base))
}

// Int is a Go wrapper for the base C.godot_int type
type Int int

func (t Int) getBase() C.godot_int {
	return C.godot_int(t)
}

// NewEmptyReal will return a pointer to an empty
// initialized Real. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyReal() Pointer {
	var obj C.godot_real
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromReal will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromReal(obj Real) Pointer {
	base := obj.getBase()
	return Pointer{base: unsafe.Pointer(&base)}
}

// NewRealFromPointer will return a Real from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewRealFromPointer(ptr Pointer) Real {
	base := ptr.getBase()
	return Real(*(*C.godot_real)(base))
}

// Real is a Go wrapper for the base C.godot_real type
type Real float64

func (t Real) getBase() C.godot_real {
	return C.godot_real(t)
}

// NewEmptyObject will return a pointer to an empty
// initialized Object. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyObject() Pointer {
	var obj C.godot_object
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromObject will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromObject(obj Object) Pointer {
	return Pointer{base: unsafe.Pointer(obj.getBase())}
}

// NewObjectFromPointer will return a Object from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewObjectFromPointer(ptr Pointer) Object {

	return Object{base: (*C.godot_object)(ptr.getBase())}
}

type Object struct {
	base *C.godot_object
}

func (gdt Object) getBase() *C.godot_object {
	return gdt.base
}

// NewEmptyMethodBind will return a pointer to an empty
// initialized MethodBind. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyMethodBind() Pointer {
	var obj C.godot_method_bind
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromMethodBind will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromMethodBind(obj MethodBind) Pointer {
	return Pointer{base: unsafe.Pointer(obj.getBase())}
}

// NewMethodBindFromPointer will return a MethodBind from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewMethodBindFromPointer(ptr Pointer) MethodBind {

	return MethodBind{base: (*C.godot_method_bind)(ptr.getBase())}
}

type MethodBind struct {
	base *C.godot_method_bind
}

func (gdt MethodBind) getBase() *C.godot_method_bind {
	return gdt.base
}

// NewEmptyGdnativeApiVersion will return a pointer to an empty
// initialized GdnativeApiVersion. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyGdnativeApiVersion() Pointer {
	var obj C.godot_gdnative_api_version
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromGdnativeApiVersion will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromGdnativeApiVersion(obj GdnativeApiVersion) Pointer {
	return Pointer{base: unsafe.Pointer(obj.getBase())}
}

// NewGdnativeApiVersionFromPointer will return a GdnativeApiVersion from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewGdnativeApiVersionFromPointer(ptr Pointer) GdnativeApiVersion {

	return GdnativeApiVersion{base: (*C.godot_gdnative_api_version)(ptr.getBase())}
}

type GdnativeApiVersion struct {
	base *C.godot_gdnative_api_version

	Major Uint
	Minor Uint
}

func (gdt GdnativeApiVersion) getBase() *C.godot_gdnative_api_version {
	return gdt.base
}

// NewEmptyGdnativeTerminateOptions will return a pointer to an empty
// initialized GdnativeTerminateOptions. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyGdnativeTerminateOptions() Pointer {
	var obj C.godot_gdnative_terminate_options
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromGdnativeTerminateOptions will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromGdnativeTerminateOptions(obj GdnativeTerminateOptions) Pointer {
	return Pointer{base: unsafe.Pointer(obj.getBase())}
}

// NewGdnativeTerminateOptionsFromPointer will return a GdnativeTerminateOptions from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewGdnativeTerminateOptionsFromPointer(ptr Pointer) GdnativeTerminateOptions {

	return GdnativeTerminateOptions{base: (*C.godot_gdnative_terminate_options)(ptr.getBase())}
}

type GdnativeTerminateOptions struct {
	base *C.godot_gdnative_terminate_options

	InEditor Bool
}

func (gdt GdnativeTerminateOptions) getBase() *C.godot_gdnative_terminate_options {
	return gdt.base
}
